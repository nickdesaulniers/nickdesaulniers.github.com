<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web | Nick Desaulniers]]></title>
  <link href="http://nickdesaulniers.github.io/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://nickdesaulniers.github.io/"/>
  <updated>2020-04-06T08:08:18-07:00</updated>
  <id>http://nickdesaulniers.github.io/</id>
  <author>
    <name><![CDATA[Nick Desaulniers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing my first technical book chapter]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/01/25/writing-my-first-book-chapter/"/>
    <updated>2015-01-25T20:50:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/01/25/writing-my-first-book-chapter</id>
    <content type="html"><![CDATA[<p>It&rsquo;s a feeling of immense satisfaction when we complete a major achievement.
Being able to say &ldquo;it&rsquo;s done&rdquo; is such a great stress relief.  Recently, I
completed work on my first publication, a chapter about Emscripten for the
upcoming book
<a href="http://www.crcpress.com/product/isbn/9781498716079">WebGL Insights</a>
to be published by CRC Press in time for
<a href="http://s2015.siggraph.org/">SIGGRAPH 2015</a>.</p>

<p>One of the life goals I&rsquo;ve had for a while is writing a book.  A romantic idea
it seems to have your ideas transcribed to a medium that will outlast your
bones.  It&rsquo;s enamoring to hold books from long dead authors, and see that their
ideas are still valid and powerful.  Being able to write a book, in my eyes,
provides some form of life after death.  Though, one could imagine ancestors
reading blog posts from long dead relatives via utilities like the
<a href="https://web.archive.org/web/20141218200253/http://nickdesaulniers.github.io/">Internet Archive&rsquo;s WayBack Machine</a>.</p>

<p>Writing about highly technical content places an upper limit on the usefulness
of the content, and shows as &ldquo;dated&rdquo; quickly.  A book I recently ordered was
<a href="http://shop.oreilly.com/product/0636920033707.do">Scott Meyers' Effective Modern C++</a>.
This title strikes me, because what
exactly do we consider <em>modern</em> or <em>contemporary</em>?  Those adjectives only make
sense in a time limited context.  When C++ undergoes another revolution,
Scott&rsquo;s book may become irrelevant, at which point the adjective <em>modern</em>
becomes incorrect.  Not that I think Scott&rsquo;s book or my own is time-limited in
usefulness; more that technical books' duration of usefulness is significantly
less than philosophical works like <em>1984</em> or <em>Brave New World</em>.  Almost like having
a record in a sport is a feather in one&rsquo;s cap, until the next best thing comes
along and you&rsquo;re forgotten to time.</p>

<p>Somewhat short of my goal of writing an entire book, I only wrote a single
chapter for a book.  It&rsquo;s interesting to see that a lot of graphics programming
books seem to follow the format of one author per chapter or at least multiple
authors.  Such book series as <em>GPU Gems</em>, <em>Shader X</em>, and <em>GPU Pro</em> follow this
pattern, which is interesting.  After seeing how much work goes into one
chapter, I think I&rsquo;m content with not writing an entire book, though I may
revisit that decision later in life.</p>

<p>How did this all get started?  I had followed Graham Sellers on Twitter and saw
<a href="http://octopress.org/2015/01/15/octopress-3.0-is-coming/">a tweet from him</a>
about a call to authors for WebGL Insights.  Explicitly in the linked to page
under the call for authors was interest in proposals about Emscripten and
asm.js.</p>

<p><a href="https://twitter.com/grahamsellers/status/504974663848456193">Tweet</a></p>

<p>At the time, I was headlong into a project helping Disney port Where&rsquo;s My Water
from C++ to JavaScript using Emscripten.  I was intimately familiar with
Emscripten, having been trained by one of its most prolific contributors,
<a href="http://clb.demon.fi/">Jukka Jylänki</a>.
Also, Emscripten&rsquo;s creator,
<a href="http://mozakai.blogspot.com/">Alon Zakai</a>, sat on the other side
of the office from me, so I was constantly pestering him about how to do
different things with Emscripten.  The #emscripten irc channel on
irc.mozilla.org is very active, but there&rsquo;s no substitute for being able to
have a second pair of eyes look over your shoulder when something is going
wrong.</p>

<p>Knowing Emscripten&rsquo;s strengths and limitations, seeing interest in the subject
I knew a bit about (but wouldn&rsquo;t consider myself an expert in), and having the
goal of writing something to be published in book form, this was my opportunity
to seize.</p>

<p>I wrote up a quick proposal with a few figures about why Emscripten was
important and how it worked, and sent it off with fingers crossed.  Initially,
I was overjoyed to learn when my proposal was accepted, but then there was a
slow realization that I had a lot of work to do.  The editor,
<a href="http://www.seas.upenn.edu/~pcozzi/">Patrick Cozzi</a>, set up
<a href="https://github.com/WebGLInsights/WebGLInsights-1">a GitHub repo</a>
for our additional code and figures, a mailing
list, and sent us a chapter template document detailing the process.  We had 6
weeks to write the rough draft, then 6 weeks to work with reviewers to get the
chapter done.  The chapter was written as a Google Doc, so that we could have
explicit control over who we shared the document with, and what kinds of
editing power they had over the document.  I think this approach worked well.</p>

<p>I had most of the content written by week 2.  This was surprising to me,
because I&rsquo;m a heavy procrastinator.  The only issue was that the number of
pages I wrote was double the allowed amount; way over page count.  I was
worried about the amount of content, but told myself to try not to be attached
to the content, just as you shouldn&rsquo;t stay attached with your code.</p>

<p>I took the additional 4 weeks I had left to finish the rough draft to invite
some of my friends and coworkers to provide feedback.  It&rsquo;s useful to have a
short list of people who have ever offered to help in this regard or owe you
one.  You&rsquo;ll also want a diverse team of reviewers that are either close to the
subject matter, or approaching it as new information.  This allows you to stay
technically correct, while not presuming your readers know everything that you
do.</p>

<p>The strategy worked out well; some of the content I had initially written about
how JavaScript VMs and JITs speculate types was straight up wrong.  While it
played nicely into the narrative I was weaving, someone more well versed in
JavaScript virtual machines would be able to call BS on my work.  The reviewers
who weren&rsquo;t as close to subject matter were able to point out when logical
progressions did not follow.</p>

<p>Fear of being publicly corrected prevents a lot of people from blogging or
contributing to open source.  It&rsquo;s important to not stay attached to your work,
especially when you need to make cuts.  When push came to shove, I did have
difficulty removing sections.</p>

<p>Lets say you have three sequential sections: A, B, &amp; C.  If section A and
section B both set up section C, and someone tells you section B has to go, it
can be difficult to cut section B because as the author you may think it&rsquo;s
really important to include B for the lead into C.  My recommendation is sum up
the most important idea from section B and add it to the end of section A.</p>

<p>For the last six weeks, the editor, some invited third parties, and other
authors reviewed my chapter.  It was great that others even followed along and
pointed out when I was making assumptions based on specific compiler or
browser.
<a href="http://erich.realtimerendering.com/">Eric Haines</a> even reviewed my chapter!
That was definitely a highlight for me.</p>

<p>We used a Google Sheet to keep track of the state of reviews.  Reviewers were
able to comment on sections of the chapter.  What was nice was that you were
able to keep using the comment as a thread, responding directly to a
criticism.  What didn&rsquo;t work so well was then once you edited that line, the
comment and thus the thread was lost.</p>

<p>Once everything was done, we zipped up the assets to be used as figures,
submitted bios, and wrote a tips and tricks section.  Now, it&rsquo;s just a long
waiting game until the book is published.</p>

<p>As far as dealing with the publisher, I didn&rsquo;t have much interaction.  Since
the book was assembled by a dedicated editor, Patrick did most of the leg work.
I only asked that what royalties I would receive be donated to Mozilla, which
the publisher said would be too small (est $250) to be worth the paperwork.  It
would be against my advice if you were thinking of writing a technical book for
the sole reason of monetary benefit.  I&rsquo;m excited to be receiving a hard cover
copy of the book when it&rsquo;s published.  I&rsquo;ll also have to see if I can find my
way to SIGGRAPH this year; I&rsquo;d love to meet my fellow authors in person and
potential readers.  Just seeing the list of authors was really a who&rsquo;s-who of
folks doing cool WebGL stuff.</p>

<p>If you&rsquo;re interested in learning more about working with Emscripten, asm.js,
and WebGL, I sugguest you pick up a copy of WebGL Insights in August when it&rsquo;s
published.  A big thank you to my reviewers: Eric Haines, Havi Hoffman,
Jukka Jylänki, Chris Mills, Traian Stanev, Luke Wagner, and Alon Zakai.</p>

<p>So that was a little bit about my first experience with authorship.  I&rsquo;d be
happy to follow up with any further questions you might have for me.  Let me
know in the comments below, on Twitter, HN, or wherever and I&rsquo;ll probably find
it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Commandments of a Mobile Web]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/02/28/commandments-of-a-mobile-web/"/>
    <updated>2013-02-28T22:43:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/02/28/commandments-of-a-mobile-web</id>
    <content type="html"><![CDATA[<p>Over the past few years, there&rsquo;s been certain
<a href="http://en.wikipedia.org/wiki/Paradigm_shift">paradigm shifts</a>
in web development. When you think of milestones that really changed how
development on the web was done, the two biggest were
<a href="https://www.ibm.com/developerworks/mydeveloperworks/blogs/BobZurek/entry/the_ajax_paradigm_shift?lang=en">Ajax</a>
and <a href="http://www.html5rocks.com/en/why">HTML5</a>.  Development was identifiably
different before and after such technological advancements.  There were
<a href="http://java.sys-con.com/node/315210">some</a> who initially
<a href="http://blog.tobie.me/post/31366970040/when-im-introspective-about-the-last-few-years-i">doubted</a>
the technologies, but I&rsquo;m sure such doubters eventually
<a href="http://www.sencha.com/blog/the-making-of-fastbook-an-html5-love-story/">saw the light</a>.
After spending time working on applications for Mozilla&rsquo;s upcoming mobile
operating system, Firefox OS, and talking with my fellow employees, I feel that
the mobile web is another one of those shifts in how we
approach web development that looking back will be an identifiable point in
time where we can say that we did things differently before and after.
So in that sense, I want to share some of the insights I&rsquo;ve found to
help other developers wrap their heads around how developing for the mobile web
isn&rsquo;t their traditional cup of tea.</p>

<h1>Internet connectivity is not guaranteed</h1>

<p>This is a fundamental divorce from the World Wide Web and the Internet. I feel
that a lot of people having trouble differentiating the Web from the Internet;
where you&rsquo;ve had one, you&rsquo;ve always had the other. Don&rsquo;t
assume your application will always have a valid connection.  When a user
is on a wifi connection, or hardwired, it&rsquo;s so obvious that if they&rsquo;re on your
website, then they must be connected to the Internet.  Right?  But what happens
now when one of your users loads up your site or app on a mobile device, then enters
a tunnel?  What does it do when offline?  Does it work?  Maybe it
doesn&rsquo;t make sense if you&rsquo;re offering a service that requires data from the
back end, but does that mean that the front end should totally look like crap
or break when the back end can&rsquo;t be reached?  Do your Ajax requests have error
callbacks?  Do you try and reconnect your WebSocket connections after they&rsquo;ve
failed?  Do you cache previous requests or use one of the many forms of offline
storage to show something to the user?  Developing on the loopback is literally
the best case for connectivity, but it gives the developer a false sense of
how latency and connectivity issues affect their application.  It&rsquo;s literally
shocking the first time you encounter your site/application offline if you
didn&rsquo;t think about the user experience up front.</p>

<h1>Bandwidth is not free</h1>

<p>The advent of broadband made it acceptable for sites to utilize massive amounts
of assets.  Seeing sites that load up so much stuff makes my heart sink when
I wonder about viewing such a site on my mobile device.  I only pay for so much
mobile data per month, then I&rsquo;m billed ridiculous amounts as a
<a href="http://forums.att.com/t5/Data-Messaging-Features-Internet/What-does-quot-Data-MB-Overage-quot-mean/td-p/2872883">&ldquo;Data Overage&rdquo;</a>.
Users in other countries frequently have a more pay as you go style plan, so
they&rsquo;re being billed for each bit across the wire.  In countries without the
infrastructure necessary to get broadband Internet to every household, mobile
is more prolific in getting users connected.</p>

<p>Things like minification and gzip certainly help, but deferred loading of
assets until they&rsquo;re necessary is frequently overlooked.
Massive libraries are nice for devs, but may end up giving mobile users more
problems than they are worth. There exist more advanced techniques such as
<a href="http://buildnewgames.com/optimizing-websockets-bandwidth/">WebSocket compression</a>.</p>

<p>How much does your site <a href="http://www.sitepoint.com/minimizing-page-weight-matters/">weigh</a>?</p>

<h1>An expensive website does not make an awesome app</h1>

<p><blockquote><p>Why doesn&rsquo;t my million dollar website make a kick ass web app?</p></blockquote></p>

<p>This point is brought to you by <a href="http://www.mattbasta.com/">Matt Basta</a>.  The
point is that there is something fundamentally different between a web &ldquo;site&rdquo;
and a web &ldquo;app&rdquo;.  In a web site the usual flow involves loading up a page
and maybe navigating between pages.  An app more often than not will be a
single page that loads data asynchronously and dynamically modifies the content
displayed to the user.  Some web sites make great use of things like Ajax, and
are great example of single page sites.  But not all are.  Some still haven&rsquo;t
come around to loading all data asynchronously on request.  And it&rsquo;s not that
they necessarily even have to, they can be a website and never have to be
anything more.  But you&rsquo;ll find that some sites make better apps than others.</p>

<h2>No chrome</h2>

<p>Not the browser made by Google, Google Chrome; the actual
<a href="https://developer.mozilla.org/en-US/docs/Chrome">controls</a> on the top
of your browser such as the back and reload buttons, and the url bar.  This
point comes from <a href="https://github.com/cvan">Chris Van Wiemeersch</a>.  One of
the things you&rsquo;ll find when evaluating whether a site makes a good app is
whether it relies on chrome to navigate.  If it does, then it&rsquo;s not really
going to cut it as an app.  If you&rsquo;re going to make a single page app, try
making it fullscreen in your browser and try navigating around. Are you
hindered without the chrome?  One thing I
found recently was an error condition where I notified the user that they had
to be online to check for an update.  But when I was developing, I would just
refresh the page to clear the error message and try again.  On a device, as an
app, where there was no chrome, this meant closing and restarting the app.
That sucked, so I made it so the user could click/touch, after figuring out
their connectivity issues, to retry the fetch.  Even better may have
been to listen for online events!</p>

<h2>Traditional forms of input are not fun</h2>

<p>Here&rsquo;s some tips from <a href="http://potch.me/">Matthew &ldquo;Potch&rdquo; Claypotch</a>.</p>

<h3>Fingers aren&rsquo;t as precise as cursors</h3>

<p>Having tiny click
targets is really frustrating.  How many times have you clicked the wrong
thing on a mobile device?  Tiny buttons are not the easiest thing for users
to specify, especially when groups of them are clustered nearby.  Custom
buttons enabled by <a href="http://www.cssbuttongenerator.com/">a little CSS</a> can go a
long way.</p>

<h3>Typing on little keyboards in tedious</h3>

<p>This is an effect of tiny buttons, but requiring the user to type in large
strings gets annoying fast.  Sometimes this can&rsquo;t be avoided, but it should be
when it can.  Just as typing in a long, complex url to a mobile browser is
not enjoyable, neither is doing so in an app.</p>

<h1>Detect features not browser engine (User agent sniffing is a sin)</h1>

<p>Print <a href="http://diveintohtml5.com/everything.html">this</a> and staple it to your
wall above your workspace.  This should be
<a href="http://www.nczonline.net/blog/2009/12/29/feature-detection-is-not-browser-detection/">old</a>
<a href="http://msdn.microsoft.com/en-us/magazine/hh475813.aspx">news</a> at this point.</p>

<h2>Vendor prefixes are meant for browser vendors to test, not production code</h2>

<p>I place a majority of the blame for this on vendors; prefixes should never see
the light of day in release builds.  It&rsquo;s ridiculous to have to write four
copies of the same rule, when you&rsquo;re trying to express one thing.  I should
rewrite this sentence four different ways to prove a point.  -o-Do you understand
what I&rsquo;m getting at?  -ms-It&rsquo;s almost like rambling. -moz-Repetitive department
of repetition. -webkit-This is ridiculous.</p>

<p>But developers need to recognize the habit as an addiction, and not feed it.
If you have, I forgive you.  Now stop doing it.</p>

<p>These two particular articles are just so good, it wouldn&rsquo;t do them justice to
try and summarize them.  Please go read them, I&rsquo;ll wait.
<a href="http://hsivonen.iki.fi/vendor-prefixes/">this</a>
and
<a href="http://www.quirksmode.org/blog/archives/2010/03/css_vendor_pref.html">this</a></p>

<h2>Developing towards WebKit and not HTML5 is a sin</h2>

<p>I understand that Google Chrome is your favorite browser, and I am so happy for
you; but it is not mine.  I&rsquo;ll be the first to admit that Google
caught all of the other browser vendors with their pants down, but when I see
pages that look flawless in Chrome and
not so hot in others, it reminds me of days when sites only worked in IE6.
Surely you remember <em>those</em> days.  I hate when content publishers try and
dictate which browser I should use to view their content.  I understand WebKit
based browsers dominant in mobile, but so did IE6 in desktop share at one point.
It&rsquo;s not unreasonable to expect users to use the most updated version of their
browser, but empower your users to choose their browser.  Don&rsquo;t take that
choice away from them.</p>

<p>A neat <a href="http://robertnyman.com/2013/02/14/webkit-an-objective-view/">point</a> by
<a href="http://robertnyman.com/">Robert Nyman</a> is that WebKit itself already has forks.
Can you imagine if there were eventually vendor prefixes for forks of WebKit?
Continuing with vendor prefixes means that we&rsquo;ll now have seven vendor prefixes:
unprefixed, -moz-, -o-, -ms-, -webkit-o-, -webkit-chrome-, -webkit-safari-.
Awesome!  Maybe I should rewrite this sentence seven different ways to make a
point!</p>

<p>I&rsquo;m also curious if Google, Apple, and the WebKit maintainers are turning a
blind eye to this, or what their opinions are? Being a vendor and wanting an
open web are almost conflicts of interest; you want your browser to &ldquo;win&rdquo; or
dominate in marketshare, but at the same time you don&rsquo;t want any one browser
having too much marketshare.</p>

<h1>Design Responsively</h1>

<p>What is
<a href="http://mashable.com/2012/12/11/responsive-web-design/">responsive design</a>?
<a href="http://www.smashingmagazine.com/responsive-web-design-guidelines-tutorials/">Responsive design</a>
is making a site look great on
any size screen, without duplicating assets or sniffing a user agent string.
Firefox has a neat web dev tool called
<a href="https://developer.mozilla.org/en-US/docs/Tools/Responsive_Design_View">&ldquo;Responsive Design View&rdquo;</a>.
It&rsquo;s great for testing out your site on various screen sizes.
<a href="http://twitter.github.com/bootstrap/index.html">Twitter Bootstrap</a> is an
excellent example of a framework for developing a single app that looks great
on any screen size.  Even if you don&rsquo;t want to use a whole big framework,
simple things like using CSS rules in terms of percentages instead of hard
coded pixels can go a long way.</p>

<p>Sites that are trying to become more app like have trouble with conforming to
responsive design.  Instead of starting with a site and trying to figure out
how to hide
or not display information as the screen gets smaller, you&rsquo;ll find it much
<a href="http://johnpolacek.github.com/scrolldeck.js/decks/responsive/">easier</a> to
start small, and dynamically add content as the screen gets bigger.</p>

<h1>High performance code respects battery life</h1>

<p>In the end of the day, all of the code you write that runs in the browser is
a set of instructions the processor can decode, not necessarily the high level
JavaScript you wrote.  While it&rsquo;s important to avoid premature optimizations,
having a few
<a href="http://christianheilmann.com/2013/01/25/five-things-you-can-do-to-make-html5-perform-better/">rules of thumb</a>
up front will help you write better, faster code.
If the same overall action can be expressed in one instruction or one hundred,
which do you think will use
<a href="http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/">less power</a>?
Keep in mind that transistors leak current while switching.</p>

<h2>Native methods over library methods, CSS over JS</h2>

<p>What do I mean by &ldquo;native methods?&rdquo; Like C++?  Well, yes.  You see under the
hood the DOM bindings that you&rsquo;re calling are probably written in C++.  Call
<code>toSource()</code> on <code>document.getElementById()</code>.  The <code>[native code]</code> statement
in the returned string refers to the implementation.  While type specialized
code emitted by the JIT can match or even beat native code, you can only count
on that for hot loops.  In the same vein, library code is going to be
<a href="http://jsperf.com/getelementbyid-vs-jquery-id/25">slower</a> than any code
written natively.  I&rsquo;m not saying that you shouldn&rsquo;t use libraries, just know
that the use of libraries can incur some overhead.  Things like animations will
also be faster
when handled by natively implemented CSS over JS.  You can use JS to
dynamically add classes to elements to get finer resolution over events, but
then get the performance of CSS.</p>

<h2>Avoid JIT bailout</h2>

<p>The Just In Time (JIT) interpreter is a
<a href="http://www.slideshare.net/amdgigabyte/know-your-javascript-engine">new breed</a>
of VM that most browser
vendors are now using.  The JIT can
<a href="http://s3.mrale.ph/nodecamp.eu/#1">analyze</a> running code, and
<a href="http://en.wikipedia.org/wiki/Code_generation_%28compiler%29#Runtime_code_generation">emit</a>
native code
that is faster than reinterpreting code again, and even higher-optimized code
for type stable JavaScript, as long as certain &ldquo;guard&rdquo; conditions are met.
When a guard fails, the JIT has to
<a href="http://mxr.mozilla.org/mozilla-central/source/js/src/ion/Bailouts.h#19">bailout</a>
the emitted native code and start reinterpreting code again.</p>

<h2>Keep up to date on new APIs</h2>

<p>HTML5 is a big
<a href="http://www.w3.org/html/wg/drafts/html/master/single-page.html">spec</a>, and is
getting bigger.  So big that some recommendations are
being <a href="http://www.websocket.org/aboutwebsocket.html">spun off</a> from the
original HTML5 spec.  As an engineer, I&rsquo;m painfully aware that you need to
<a href="http://bonsaiden.github.com/JavaScript-Garden/">keep up</a>
in whatever industry you work in in order to stay relevant.
The complacent are the most vulnerable.  There&rsquo;s
<a href="http://caniuse.com/">a lot to keep track of</a> with
HTML5 and CSS3, but many new features offer higher performance methods of
skinning the cat.</p>

<h3>requestAnimationFrame</h3>

<p>window.requestAnimation frame is a godsend for animation.  Not too long ago, I
wrote up a quick
<a href="https://github.com/nickdesaulniers/canvas2dcontext/blob/master/examples/sprite.html#L6">example</a>
of various ways of implementing animation loops and their issues; you should
check it out.</p>

<h3>indexedDB over localstorage</h3>

<p>The indexedDB api might not be as simple as localstorage&rsquo;s is, but localstorage
is synchronous and is noticeably slow on mobile.  If you can bite the bullet
and use indexedDB, you&rsquo;ll find you&rsquo;re JS isn&rsquo;t blocking on
serializing/deserializing objects for storage.
<a href="https://twitter.com/fabricedesre">Fabrice Desré</a> shared this with me.</p>

<h3>WebWorkers</h3>

<p>Webworkers can&rsquo;t modify the DOM, but they can do heavy lifting without blocking
the main thread.</p>

<h3>CSS translate over absolute top and left rules</h3>

<p><a href="http://digitarald.de/">Harald Kirschner</a> recommends CSS translates over top
and left rules for absolutely positioning some elements.</p>

<h3>Gradients are expensive</h3>

<p><a href="http://www.backalleycoder.com/">Dan Buchner</a> notes that without beefy graphics
processing units of their desktop counterparts to enable hardware acceleration,
things like gradients will give you noticeable performance hits.</p>

<h3>createDocumentFragment</h3>

<p>Dan also suggests queuing up DOM changes.
Whenever you manipulate items in the DOM, you&rsquo;re going to trigger a reflow,
which may consist of an update to the layout and/or a repaint.  Minimizing these
makes for a faster update to the DOM.  For example, it can be faster to use
document.createDocumentFragment and append child nodes to it, and then append
that to the DOM, instead of appending lots of child nodes in between timer calls.
Surprise, this isn&rsquo;t actually a
<a href="http://ejohn.org/blog/dom-documentfragments/">new</a> DOM binding from HTML5.</p>

<h1>Conclusion</h1>

<p>These are just some tips I have for application developers.  I am by no means
an expert; I&rsquo;m sure if you dig deep enough, you can find plenty of examples of
my past work that contradicts some of my recommendations from this article.  But
I&rsquo;m a little smarter today than I was yesterday, and now so are you!  What are some
tips that you have to share that you&rsquo;ve found helpful developing for the
mobile web?</p>
]]></content>
  </entry>
  
</feed>
