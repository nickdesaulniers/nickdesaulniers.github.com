<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nick Desaulniers]]></title>
  <link href="http://nickdesaulniers.github.io/atom.xml" rel="self"/>
  <link href="http://nickdesaulniers.github.io/"/>
  <updated>2020-04-06T08:08:18-07:00</updated>
  <id>http://nickdesaulniers.github.io/</id>
  <author>
    <name><![CDATA[Nick Desaulniers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Off by Two]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2020/04/06/off-by-two/"/>
    <updated>2020-04-06T07:32:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2020/04/06/off-by-two</id>
    <content type="html"><![CDATA[<p>&ldquo;War stories&rdquo; in programming are entertaining tales of truly evil bugs that
kept you up at night.  Inspired by posts like
<a href="https://www.gamasutra.com/blogs/DaveBaggett/20131031/203788/My_Hardest_Bug_Ever.php">My Hardest Bug Ever</a>,
<a href="https://marcan.st/2017/12/debugging-an-evil-go-runtime-bug/">Debugging an evil Go runtime bug</a>,
and others from
<a href="https://www.reddit.com/r/TalesFromDebugging">/r/TalesFromDebugging</a>, I wanted
to share with you one of my favorites from recent memory.
<a href="https://clangbuiltlinux.github.io/">Recent work</a>
has given me much fulfilment and a long list of truly awful bugs to recount.
My blog has been quieter than I would have liked; hopefully I can find more
time to document some of these, maybe in series form.  May I present to you
episode I; &ldquo;<em>Off by Two</em>.&rdquo;</p>

<hr />

<p>Distracted in a conference grand ballroom, above what might be the largest mall
in the world or at least Bangkok, a blank QEMU session has me seriously
questioning my life choices.  No output.  Fuck!  My freshly built Linux kernel,
built with a large new compiler feature that’s been in development for months
is finally now building but is not booting.  Usually a panic prints a nice
stack trace and we work backwards from there.  I don’t know how to debug a
panic during early boot, and I’ve never had to; with everything I’ve learned up
to this point, I’m afraid I won’t have it in me to debug this.</p>

<p><a href="https://nickdesaulniers.github.io/blog/2018/10/24/booting-a-custom-linux-kernel-in-qemu-and-debugging-it-with-gdb/">Attaching GDB</a>, the kernel’s sitting an infinite loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Restricted version used during very early boot */</span>
</span><span class='line'><span class="kt">void</span> <span class="n">__init</span> <span class="nf">early_fixup_exception</span><span class="p">(</span><span class="k">struct</span> <span class="n">pt_regs</span> <span class="o">*</span><span class="n">regs</span><span class="p">,</span> <span class="kt">int</span> <span class="n">trapnr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nl">halt_loop:</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span><span class='line'>      <span class="n">halt</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some sort of very early exception handler; better to sit busy in an infinite
loop than run off and destroy hardware or corrupt data, I suppose.  It seems
this is some sort of exception handler for before we’re ready to properly
panic; maybe the machinery is not in place to even collect a stack trace,
unwind, and print that over the serial driver.  How did things go so wrong and
how did we get here?  I decide to ask for help.</p>

<blockquote><p>Setting breakpoints and rerunning my boot, it looks like the fourth
call to __early_make_pgtable() is deterministically going awry.
Reading through callers, from the early_idt_handler_common subroutine
in arch/x86/kernel/head_64.S the address was stored in %cr2 (the
&ldquo;page fault linear address&rdquo;).  But it’s not clear to me who calculated
that address that created the fault.  My understanding is that
early_idt_handler_common is an exception vector setup in
early_idt_handler_array, which gets invoked upon access to &ldquo;unmapped
memory&rdquo; which gets saved into %cr2.</p></blockquote>

<p>Beyond that, GDB doesn’t want me to be able to read %cr2.</p>

<p><a href="https://thejh.net/">Jann Horn</a> gets back to me first:</p>

<blockquote><p>Can you use QEMU to look at the hardware frame (which contains values pushed
by the hardware in response to the page fault) in early_idt_handler_common?
RSP before the call to early_make_pgtable should basically point to a &ldquo;struct
pt_regs&rdquo;</p>

<p>When the CPU encounters an exception, it pushes an exception frame onto the
stack. That doesn&rsquo;t happen in kernel code; the CPU does that on its own. That
exception frame consists of the last six elements of struct pt_regs. This is
also documented in a comment at the start of early_idt_handler_common
(&ldquo;hardware frame&rdquo; and &ldquo;error code&rdquo; together are the exception frame):</p>

<pre><code>/*
 * The stack is the hardware frame, an error code or zero, and the
 * vector number.
 */
</code></pre>

<p>After the CPU has pushed that stuff, it picks one of the exception handlers
that have been set up in idt_setup_early_handler(); so it jumps to
&amp;early_idt_handler_array[i]. early_idt_handler_array pushes the number of the
interrupt vector, then calls into early_idt_handler_common;
early_idt_handler_common spills the rest of the register state (which is
still the way it was before the exception was triggered) onto the stack
(which among other things involves reading the vector number into a register
and overwriting the stack slot of the vector number with a register that
hasn&rsquo;t been spilled yet).</p>

<p>The combination of the registers that have been spilled by software and the
values that have been pushed onto the stack by the CPU before that forms a
struct pt_regs. (The normal syscall entry slowpath does the same thing, by
the way.)</p>

<p>you’ll want to break on the &ldquo;call early_make_pgtable&rdquo; or something like that,
to get the pt_regs to be fully populated and at RSP.</p></blockquote>

<p>This is documented further in
<a href="https://0xax.gitbooks.io/linux-insides/content/Initialization/linux-initialization-2.html">linux-insides</a>.</p>

<p>So as far as &ldquo;where does the address in %cr2 come from, it’s &#8220;the CPU.&rdquo; To get
%cr2, I can just break after an instruction that moves %cr2 into a general
purpose register (GPR).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">GET_CR2_INTO</span><span class="p">(</span><span class="o">%</span><span class="n">rdi</span><span class="p">)</span>   <span class="cm">/* can clobber %rax if pv */</span>
</span><span class='line'><span class="n">call</span> <span class="n">early_make_pgtable</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gdb -batch -ex <span class="s2">&quot;file vmlinux&quot;</span> -ex <span class="s2">&quot;disassemble</span>
</span><span class='line'><span class="s2">early_idt_handler_common&quot;</span> | grep early_make_pgtable
</span><span class='line'>   0xffffffff82965150 &lt;+48&gt;: callq  0xffffffff829653b9 &lt;early_make_pgtable&gt;
</span><span class='line'><span class="nv">$ </span>gdb vmlinux
</span><span class='line'>...
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> hbreak *0xffffffff82965150
</span><span class='line'>...
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> p/x *<span class="o">(</span>struct pt_regs*<span class="o">)</span>0xffffffff82403e28
</span><span class='line'><span class="nv">$1</span> <span class="o">=</span> <span class="o">{</span><span class="nv">r15</span> <span class="o">=</span> 0x0, <span class="nv">r14</span> <span class="o">=</span> 0xffffffff82aa3808, <span class="nv">r13</span> <span class="o">=</span> 0x0, <span class="nv">r12</span> <span class="o">=</span> 0x0, <span class="nv">bp</span> <span class="o">=</span> 0x0,
</span><span class='line'>  <span class="nv">bx</span> <span class="o">=</span> 0xfffffffc, <span class="nv">r11</span> <span class="o">=</span> 0x2794c5, <span class="nv">r10</span> <span class="o">=</span> 0x20, <span class="nv">r9</span> <span class="o">=</span> 0x13ca62, <span class="nv">r8</span> <span class="o">=</span>
</span><span class='line'>0x20, <span class="nv">ax</span> <span class="o">=</span> 0x0,
</span><span class='line'>  <span class="nv">cx</span> <span class="o">=</span> 0xffffffff82415700, <span class="nv">dx</span> <span class="o">=</span> 0xfffffffb6df881bb, <span class="nv">si</span> <span class="o">=</span> 0x0,
</span><span class='line'>  <span class="nv">di</span> <span class="o">=</span> 0xffffffff82aa3808, <span class="nv">orig_ax</span> <span class="o">=</span> 0x0, <span class="nv">ip</span> <span class="o">=</span> 0xffffffff81172b70, <span class="nv">cs</span> <span class="o">=</span> 0x10,
</span><span class='line'>  <span class="nv">flags</span> <span class="o">=</span> 0x10006, <span class="nv">sp</span> <span class="o">=</span> 0xffffffff82403ed8, <span class="nv">ss</span> <span class="o">=</span> 0x0<span class="o">}</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x 0xffffffff81172b70
</span><span class='line'>   0xffffffff81172b70 &lt;jump_label_update+64&gt;: mov    0x8<span class="o">(</span>%rbx<span class="o">)</span>,%rsi
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> q
</span><span class='line'><span class="nv">$ </span>objdump -dS vmlinux | grep -B 2 ffffffff81172b70
</span><span class='line'>ffffffff81172b69: 0f 1f 80 00 00 00 00 nopl   0x0<span class="o">(</span>%rax<span class="o">)</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span>!mod-&gt;entries<span class="o">)</span>
</span><span class='line'>ffffffff81172b70: 48 8b 73 08          mov    0x8<span class="o">(</span>%rbx<span class="o">)</span>,%rsi
</span></code></pre></td></tr></table></div></figure>


<p>Specifically <code>mod</code> in the above expression (ie. <code>rbx</code>) is not pointing to valid
memory in the page tables, triggering an unrecoverable early page fault.</p>

<p>My heart sinks further at the sight of <code>jump_lable_update</code>.  It’s <code>asm goto</code>,
the large compiler feature we’ve been working on for months, and it’s subtly
broken.  Welcome to hell, kids.</p>

<p><code>asm goto</code> is a GNU C extension that allows for assembly code to transfer
control flow to a limited, known set of labels in C code.  Typically, regular
<a href="https://gcc.gnu.org/onlinedocs/gcc/Basic-Asm.html#Basic-Asm"><code>asm</code> statements</a>
(the GNU C extension) are treated as a black box in the instruction stream by
the compiler; they’re called into (not in the sense of the C calling convention
and actual call/jmp/ret instructions) and control flow falls through to the
next instruction outside of the inline assembly.  Then there’s an
&ldquo;<a href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html#Extended-Asm">extended inline assembly</a>&rdquo;
dialect that allows for you to specify input and output constraints (in what
feels like a whole new regex-like language with characters that have
<a href="https://gcc.gnu.org/onlinedocs/gcc/Machine-Constraints.html#Machine-Constraints">architecture specific</a>
or
<a href="https://gcc.gnu.org/onlinedocs/gcc/Simple-Constraints.html#Simple-Constraints">generic</a>
meanings, and requires the reference manual to read or write) and whether to
treat all memory or specific registers otherwise unnamed as outputs as
clobbered.  In the final variant, you may also specify a list of labels that
the assembly may jump control flow to.  There&rsquo;s also <code>printf</code>-like modifiers
called
<a href="https://gcc.gnu.org/onlinedocs/gccint/Output-Template.html#Output-Template">Output Templates</a>,
and a few other tricks that require their own post.</p>

<p>Within the compiler, we can’t really treat <code>asm</code> statements like a black box
anymore.  With <code>asm goto</code>, we have something more akin to structured exception
handling in C++; we’re going to &ldquo;call&rdquo; something, and it may jump control flow
to an arbitrary location.  Well, not arbitrary.  Arbitrary would be an indirect
call through a pointer that could’ve been constructed from any number and may
or may not be a valid instruction (or meant to be interpreted as one, ie. a
&ldquo;gadget.&rdquo;)  <code>asm goto</code> is like virtual method calls or structured expection
handling in C++ in that they all can only transfer control flow to a short list
of possible destinations.</p>

<p>You might be wondering what you can build with this, and why does the Linux
kernel care?  Turns out the Linux kernel has multiple forms of self modifying
code that it uses in multiple different scenarios.  If you do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">asm</span> <span class="nf">goto</span><span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;.pushsection foo</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;.long %l0</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;.popsection</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="o">:::</span><span class="n">comefrom</span><span class="p">);</span>
</span><span class='line'><span class="nl">comefrom:</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can squirrel away the address of <code>comefrom</code> in an arbitrary non-standard
ELF section.  Then at runtime if you know how to find ELF sections, you can
lookup <code>foo</code> and find the address of <code>comefrom</code> and then either jump to it, or
modify the instructions it points to.  I’ve used this trick to turn indirect
calls into direct calls (which is super dangerous and has many gotchas).</p>

<p>Luckily, the Linux kernel itself is an ELF executable, with all the machinery
for finding sections (it needs to perform relocations on itself at runtime,
after all), though it does something even simpler with the help of some linker
script magic as we’ll see.</p>

<p><a href="https://lwn.net/Articles/412072/">This LWN article</a> sums up the Linux’s
kernel’s original use case perfectly.</p>

<p>The kernel uses this for replacing runtime evaluation of conditionals with
either unconditional jumps or nop sleds when tracing, which are relatively
&ldquo;expensive&rdquo; to change when enabling or disabling tracing (requires machine wide
synchronization), but has minimally low overhead otherwise at runtime; just
enough nops in a sled to fit a small unconditional relative jump instruction
otherwise.  We can further tell the compiler whether the condition was likely
taken or not, which further influences codegen.</p>

<p>For patching in and out unconditional jumps with nop sleds, the kernel stores
an array of <code>struct jump_entry</code> in a custom  ELF section <code>.jump_table</code>, which
are triplets of:</p>

<ol>
<li>The address of the start of the conditional or nop sled (you can initialize
the branch to be in or out).  The <code>code</code> member of <code>struct jump_entry</code>.</li>
<li>The address of the label to potentially jump to. The <code>target</code> member of
<code>struct jump_entry</code>.  For the case of whether a conditional evaluates to
true or false.</li>
<li>A combination of the address of a global value representing the condition,
and whether the branch is likely to be taken or not.  This is the <code>key</code>
member of <code>struct jump_entry</code>.</li>
</ol>


<p>The kernel uses pointer compression for 1 and 2 above, for architectures that
define <code>CONFIG_HAVE_ARCH_JUMP_LABEL_RELATIVE</code> as documented near the end of
<a href="https://www.kernel.org/doc/html/latest/x86/exception-tables.html">Documentation/x86/exception-tables.rst</a>.</p>

<p>The kernel uses pointer packing for 3 above, to pack whether the branch is
likely taken or not and the address of a <code>struct static_key</code> as documented in
an ascii art table near the end of include/linux/jump_label.h.  The pointed-to
<code>struct static_key</code> then uses pointer packing again to discriminate members of
an anonymous union, as documented in a comment within the definition of <code>struct
static_key</code> in include/linux/jump_label.h.</p>

<p>Naturally, helper functions exist and must be used for the above 3 cases to
reconstitute pointers from these values.</p>

<p>A custom linker script then defines two symbols that mark the beginning and end
of the section.  These symbols are forward declared in C as symbols with
<code>extern</code> linkage, then used to set boundaries when iterating the array of
<code>struct jump_entry</code> instances, when initializing the keys and when finding an
entry to patch.</p>

<p>Let’s take a quick peek at one architecture’s implementation of creating the
array of <code>struct jump_entry</code> in <code>.jump_table</code>, here’s
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/arm64/kernel/jump_label.c">arm64&rsquo;s implementation</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">always_inline</span><span class="p">))</span> <span class="n">bool</span> <span class="n">arch_static_branch</span><span class="p">(</span><span class="k">struct</span> <span class="n">static_key</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span>
</span><span class='line'>                                                                     <span class="n">bool</span> <span class="n">branch</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">asm</span> <span class="k">volatile</span> <span class="k">goto</span> <span class="p">(</span>
</span><span class='line'>      <span class="s">&quot;1:    nop                 </span><span class="se">\n\t</span><span class="s">&quot;</span>
</span><span class='line'>       <span class="s">&quot; .pushsection    __jump_table, </span><span class="se">\&quot;</span><span class="s">aw</span><span class="se">\&quot;</span><span class="s">    </span><span class="se">\n\t</span><span class="s">&quot;</span>
</span><span class='line'>       <span class="s">&quot; .align      3           </span><span class="se">\n\t</span><span class="s">&quot;</span>
</span><span class='line'>       <span class="s">&quot; .long       1b - ., %l[l_yes] - .   </span><span class="se">\n\t</span><span class="s">&quot;</span>
</span><span class='line'>       <span class="s">&quot; .quad       %c0 - .         </span><span class="se">\n\t</span><span class="s">&quot;</span>
</span><span class='line'>       <span class="s">&quot; .popsection             </span><span class="se">\n\t</span><span class="s">&quot;</span>
</span><span class='line'>       <span class="o">:</span>  <span class="o">:</span>  <span class="s">&quot;i&quot;</span><span class="p">(</span><span class="o">&amp;</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">key</span><span class="p">)[</span><span class="n">branch</span><span class="p">])</span> <span class="o">:</span>  <span class="o">:</span> <span class="n">l_yes</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="nl">l_yes:</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There’s a lot going on here, so let’s take a look.  <code>1:</code> is a local label for
references within the asm block; it will get a temporary symbol name when
emitted.  <code>1:</code> points to a literal nop sled, but after the nop sled is the C
code following the <code>asm goto</code> statement.  That’s because the inline asm uses
the <code>.pushsection</code> directive to store the following data in an ELF section
that’s not <code>.text</code>.  We set the alignment of elements, then store two 32b
values and one 64b.  The <code>.long</code> directive has a comma that’s easy to miss, so
there’s two, and they’re compressed (<code>- .</code>) or made relative offsets of the
current location.  The first is the address of the beginning of the nop sled.
<code>1b</code> means local label named <code>1</code> searching <code>b</code>ackwards.  Finally, we store a
pointer to the <code>struct static_key</code> using pointer packing to add whether we’re
likely to take the branch or not.  The accessor functions will reconstruct the
two separate values correctly.</p>

<p>All this documentation is scattered throughout:</p>

<ul>
<li><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/static-keys.txt">Documentation/static-keys.txt</a></li>
<li><a href="https://www.kernel.org/doc/html/latest/x86/exception-tables.html">Documentation/x86/exception-tables.rst</a></li>
<li><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/linux/jump_label.h">include/linux/jump_label.h</a></li>
<li><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/kernel/jump_label.c">kernel/jump_label.c</a></li>
<li>arch/{$ARCH}/include/asm/jump_label.h</li>
<li>arch/{$ARCH}/kernel/jump_label.c</li>
</ul>


<p>In fact, once you know this trick of using <code>.pushsection</code> in extended inline
assembly and storing addresses of data, then using linker defined symbols to
delineate section boundaries for quick searching and iteration, we start to see
this pattern occur all throughout the kernel (with or without <code>asm goto</code>).
<a href="https://lwn.net/Articles/531148/">This LWN article</a> discusses the trick and
the many custom ELF sections of a Linux image well.</p>

<p>Exception tables in the kernel in fact use very similar tricks of storing
addresses in custom ELF sections, <code>__ex_tables</code> and <code>.fixups</code> via inline
assembly.  The Linux kernel also sorts this data in the <code>__ex_table</code> section at
boot or even possibly post-link of the kernel image via BUILDTIME_TABLE_SORT,
so that at runtime the lookup of the exception handler can be done in log(N)
time via binary search! The .fixup also captures the address of the instruction
after the one that caused the exception, in order to possibly return control
flow to after successfully handling the exception.</p>

<p>&ldquo;Alternatives&rdquo; use this for patching in instructions that take advantage of ISA
extensions if we detect support for them at runtime.</p>

<p>A lot of kernel interfaces use function pointers that are written to once, then
either rarely or never modified.  It would be nice to replace these indirect
calls with direct calls.  In fact,
<a href="https://lwn.net/ml/linux-kernel/20200324135603.483964896@infradead.org/">patches have been proposed</a>
to lower the overhead of the Spectre &amp; Meltdown mitigations by doing just that.</p>

<p>Anyways, back to our story of debugging&hellip;</p>

<p>From here, I changed course and pursued another lead.  I had recently taught
LLVM’s inliner how to inline <code>asm goto</code> (or more so, when it was considered
safe to do so).  It seemed that LLVM’s inliner was not always respecting
<code>__attribute__((always_inline))</code> and could simply decide it wasn’t going to
perform an inline substitution.  (The inliner is a complex system; a large
analysis of multiple inputs distilled into a single yes/no signal, and all the
machinery necessary to perform such a code transformation).  The C standard (§
6.7.4
<a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2479.pdf">ISO/IEC 9899:202x</a>)
says compilers are allowed to make their own decisions in regards to inline
substitution, so it’s generally more conservative to just say &ldquo;no&rdquo; when
presented with a highly complex or unusual case.</p>

<p>When the &ldquo;always inline&rdquo; function wasn’t inlined, it was no longer semantically
valid, since it was passing its parameters as input to the inline asm using the
&ldquo;i&rdquo; machine agnostic constraint for integral literals, amongst other
questionable uses of <code>__attribute__((always_inline))</code> within the kernel.</p>

<p>I was working around this (before I fixed LLVM) by changing the
<code>__attribute__((always_inline)</code> functions into macros (because the preprocessor
doesn’t have the ability to silently fail to transform as the inliner does).
But everything was working when I did that; the kernel booted just fine.  Had I
regressed something when inlining?  Was there a corner case I wasn’t thinking
of, which happens all the time in compiler development?  Was the compiler
haunted?  Was my code bad? Probably. (Porque no los dos?)</p>

<p>I start bisecting object files used to link the kernel image, mixing code that
is either called a static always inline vs a macro, and I narrow it down to 4
object files.</p>

<ul>
<li>arch/x86/kernel/tsc.o</li>
<li>kernel/time/hrtimer.o</li>
<li>kernel/time/timer.o</li>
<li>kernel/sched/clock.o</li>
</ul>


<p>Reading the time stamp counter! No wonder the kernel is failing so early;
initializing the clocks is one of the earlier tasks the kernel cares about.  A
preemptive multitasking operating system is obsessed with keeping track of
time; you spend up your time slice and you’re scheduled out.</p>

<p>But why would a <code>static inline __attribute__((always_inline))</code> function fail,
but succeed when the function was converted to a macro?</p>

<p>I mentioned this to my colleague Bill Wendling, who spotted a subtle
distinction in LLVM’s IR between the <code>static inline
__attribute__((always_inline))</code> version of the functions (and their call sites)
vs the macro.  Via
<a href="https://lists.llvm.org/pipermail/llvm-dev/2019-April/131518.html">an email to the list</a>:</p>

<blockquote><p>The code below is triggering some weird behavior that&rsquo;s different from how
gcc treats this inline asm. Clang keeps the original type of &ldquo;loc&rdquo; as &ldquo;bool&rdquo;,
which generates an &ldquo;i1 true&rdquo; after inlining. So far so good.  However, during
ISEL, the &ldquo;true&rdquo; is converted to a signed integer. So when it&rsquo;s evaluated,
the result is this:</p>

<pre><code>.quad (42+(-1))-.Ltmp0
</code></pre>

<p>(notice the &ldquo;-1&rdquo;). GCC emits a positive one instead:</p>

<pre><code>.quad 42 + 1 - .Ltmp0
</code></pre>

<p>I&rsquo;m not sure where the problem lies. Should the inline asm promote the &ldquo;i1&rdquo;
to &ldquo;i32&rdquo; during ISEL? Should it be promoted during inlining? Is there a
situation where we require the value to be &ldquo;i1&rdquo;?</p>

<p>-bw</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="kt">_Bool</span> <span class="n">bool</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span>
</span><span class='line'><span class="nf">__attribute__</span><span class="p">((</span><span class="n">__always_inline__</span><span class="p">))</span>
</span><span class='line'><span class="n">bool</span> <span class="n">bar</span><span class="p">(</span><span class="n">bool</span> <span class="n">loc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">asm</span><span class="p">(</span><span class="s">&quot;.quad 42 + %c0 - .</span><span class="se">\n\t</span><span class="s">&quot;</span> <span class="o">:</span> <span class="o">:</span> <span class="s">&quot;i&quot;</span> <span class="p">(</span><span class="n">loc</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">bar</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Krzysztof Parzyszek <a href="https://lists.llvm.org/pipermail/llvm-dev/2019-April/131526.html">responded the next day</a>.</p>

<blockquote><p>This is a bug in X86&rsquo;s ISel lowering: it does not take &ldquo;getBooleanContents&rdquo;
into account when extending the immediate value to 64 bits.&#8221;</p></blockquote>

<p>Oh, shit!  LLVM’s IR has support for arbitrary width integers which is fine for
a high level language.  Because real machines typically don’t have support for
such integers of arbitrary width, the compiler typically has to find legal
widths for these integers (we say it &ldquo;legalizes the types&rdquo;) during lowering
from the high level abstract IR to low level concrete machine code.</p>

<p>To legalize a one bit integer into a 64 bit integer, we have to either zero
extend or sign extend it.  Generally, if we know the signedness of a number, we
sign extend signed integers to preserve the signedness of the uppermost bit, or
zero extend unsigned integers which don’t have a signedness bit to preserve.</p>

<p>But what happens when you have a boolean represented as a signed 1 bit number,
and you choose to sign extend it? <code>0x00</code> becomes <code>0x0000000000000000</code> which is
fine, but <code>0x01</code> becomes <code>0xFFFFFFFFFFFFFFFF</code>, ie. <code>-1</code>.  So when you expected
1, but instead got a -1, then you’re off by 2.  Preceding to use that in an
address calculation is going to result in some spooky bugs.</p>

<p>Recalling our inline <code>asm goto</code>, we we’re using this boolean to construct an
instance of a <code>struct jump_entry</code>’s <code>key</code> member, which was using pointer
packing to both refer to a global address and store whether the branch was
likely taken or not in the LSB.  When the value of <code>branch</code> was 0, we were
fine. But when <code>branch</code> was 1 and we sign extended it to -1, we kept the LSB as
1 but messed up the address of a global variable, resulting in the helper
function unpacking the pointer to a global <code>struct static_key</code> producing a bad
pointer.  Since the bottom two bits were dropped reconstituting the pointer, a
hypothetical value of 0x1001 would become 0xFFC (0x1001 &ndash; 2 &amp; ~3) which would
be wrong by 5 bytes. Thus we were interpreting garbage as a pointer, which led
to cascaded failure.</p>

<p>In this case, it looks like Bill spotted that during instruction selection
something unexpected was occuring, and Krystof narrowed it down from there.
<a href="https://reviews.llvm.org/D60208">Krystof had a fix available for x86</a>, which
<a href="https://reviews.llvm.org/D60224">Kees Cook later extended to all architectures</a>.
Since then,
<a href="https://reviews.llvm.org/D69876">Bill even extended LLVM’s implementation to allow for the mixed use of output constraints with <code>asm goto</code></a>,
something GCC doesn’t yet allow for, which is curious as Clang is now pushing a
GNU C extension further than GCC does.</p>

<p>(The true heroes of this story BTW are Alexander Ivchenko and Mikhail
Dvoretckii for
<a href="https://lists.llvm.org/pipermail/llvm-dev/2018-October/127239.html">providing the initial implementation</a>
of <code>asm goto</code> support in LLVM, and
<a href="https://reviews.llvm.org/D53765">Craig Topper</a> and
<a href="https://reviews.llvm.org/D56571">Jennifer Yu</a> (all Intel) for carrying the
implementation across the finish line.  Kudos to Chandler Carruth for <em>noting
the irony and uncanny coincidence</em> that it was both Intel that
<a href="https://lore.kernel.org/lkml/20180402095033.nfzcrmxvpm46dhbl@gmail.com/">regressed the x86 kernel build with Clang for over a year by requiring <code>asm goto</code> / CONFIG_JUMP_LABEL</a>,
and provided an implementation for it in Clang.)</p>

<p>0 based array indexing is the source of a common programmer error; off by one.
In this case, sign extending a boolean led to our <em>off by two</em>. (Or were we off
by one at being off by one?)</p>

<hr />

<p>I’m lucky to have virtual machines and debuggers, and the ability to introspect
my compiler, but I’m not sure if all of those were available back when Linux
was first written.  For fun, I asked Linus Torvalds what early debugging of the
Linux kernel was like (reprinted with permission):</p>

<p>Nick:</p>

<blockquote><p>What do you do for testing?  Quick boot tests in QEMU are my smoke tests, but
I&rsquo;m always interested in leveling up my workflow.</p></blockquote>

<p>Linus:</p>

<blockquote><p>I basically never do virtual machines. It happens &ndash; but mainly when chasing
kvm bugs. With half of the kernel being drivers, I find the whole &ldquo;run it in
emulation&rdquo; to be kind of pointless from an actual testing perspective.</p>

<p>Yeah, qemu is useful for quick smoke-tests, and for all the automated stuff
that gets run.</p>

<p>But the automation happens on the big farms, and I don&rsquo;t do the quick smoke
testing &ndash; if I get a pull requests from others, it had better be in good
enough shape that something like that is pointless, and when I do my own
development I prefer to think about the code and look at generated assembly
over trying to debug a mistake.</p>

<p>So if something doesn&rsquo;t work for me, that to me is a big red flag &ndash; I go and
really stare at the code and try to understand it even better.  I am not a
huge believer in debuggers, it&rsquo;s not how I&rsquo;ve ever coded.</p>

<p>I feel you get into a mindset where your code is determined by testing and
&ldquo;it works&rdquo;, rather than by actually thinking about it and knowing it and
believing it is correct.</p>

<p>But I probably just make excuses for &ldquo;this is how I started, because
emulation or debuggers just weren&rsquo;t an option originally, and now it&rsquo;s how I
work&rdquo;.</p></blockquote>

<p>Nick:</p>

<blockquote><p>One thing I am curious about is how the hell you ever debugged anything when
you were starting out developing Linux?  Was the first step get something
that could write out to the serial port?  (Do folks use serial debuggers on
x86? USB? We use them often on aarch64.  Not for attaching a debugger, more
so just for dmesg/printk).  Surely, it was some mix of &ldquo;just think really
hard about the code&rdquo; then at some point you had something a little nicer?
Graphics developers frequently have to contend with black screens and use
various colors like all-red/all-green/all-blue when debugging as a lone
signal of what&rsquo;s going wrong, which sucks, but is kind of funny.</p></blockquote>

<p>Linus:</p>

<blockquote><p>Hey, when you make a mistake early on in protected mode, the end result is
generally a triple fault &ndash; which results in an instant reboot.</p>

<p>So my early debugging &ndash; before I had console output and printk &ndash; was
literally &ldquo;let&rsquo;s put an endless loop here&rdquo;, and if the machine locked up you
were successful, and if it rebooted you knew you hadn&rsquo;t reached that point
because something went wrong earlier.</p>

<p>But it&rsquo;s not like doing VGA output was all <em>that</em> complicated, so &ldquo;write one
character to the upper corner of the screen&rdquo; came along pretty quickly. That
gives you a positive &ldquo;yeah, I <em>definitely</em> got this far&rdquo; marker, and not just
a &ldquo;hmm, maybe it locked up even before I got to my endless loop&rdquo;.</p>

<p>Fun days.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[f() vs f(void) in C vs C++]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2019/05/12/f-vs-f-void-in-c-vs-c-plus-plus/"/>
    <updated>2019-05-12T13:42:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2019/05/12/f-vs-f-void-in-c-vs-c-plus-plus</id>
    <content type="html"><![CDATA[<p>TL;DR</p>

<p>Prefer <code>f(void)</code> in C to <em>potentially</em> save a 2B instruction per function call
when targeting x86_64 as a micro-optimization. <code>-Wstrict-prototypes</code> can help.
Doesn’t matter for C++.</p>

<h2>The Problem</h2>

<p>While messing around with some C code in
<a href="http://godbolt.org">godbolt Compiler Explorer</a>,
I kept noticing a particular funny case.  It seemed with my small test cases
that sometimes function calls would zero out the return register before calling
a function that took no arguments, but other times not.  Upon closer
inspection, it seemed like a difference between function definitions,
particularly <code>f()</code> vs <code>f(void)</code>.  For example, the following C code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">foo</span><span class="p">();</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">bar</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">baz</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">foo</span><span class="p">();</span>
</span><span class='line'>  <span class="n">bar</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>would generate the following assembly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="nl">baz:</span>
</span><span class='line'>  <span class="nf">pushq</span> <span class="nv">%rax</span> <span class="c"># realign stack for callq</span>
</span><span class='line'>  <span class="nf">xorl</span> <span class="nv">%eax</span><span class="p">,</span> <span class="nv">%eax</span> <span class="c"># zero %al, non variadic</span>
</span><span class='line'>  <span class="nf">callq</span> <span class="no">foo</span>
</span><span class='line'>  <span class="nf">callq</span> <span class="no">bar</span> <span class="c"># why you no zero %al?</span>
</span><span class='line'>  <span class="nf">xorl</span> <span class="nv">%eax</span><span class="p">,</span> <span class="nv">%eax</span>
</span><span class='line'>  <span class="nf">popq</span> <span class="nv">%rcx</span>
</span><span class='line'>  <span class="nf">retq</span>
</span></code></pre></td></tr></table></div></figure>


<p>In particular, focus on the call the <code>foo</code> vs the call to <code>bar</code>.  <code>foo</code> is
preceded with <code>xorl %eax, %eax</code> (X ^ X == 0, and is the shortest encoding for
an instruction that zeroes a register on the variable length encoded x86_64,
which is why its used a lot such as in setting the return value).  (If you’re
curious about the pushq/popq, see
<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">point #1</a>.)
Now I’ve seen zeroing before (see
<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">point #3</a>
and remember that <code>%al</code> is the lowest byte of <code>%eax</code> and <code>%rax</code>), but if it was
done for the call to <code>foo</code>, then why was it not additionally done for the call
to <code>bar</code>? <code>%eax</code> being x86_64’s return register for the C ABI should be treated
as call clobbered.  So if you set it, then made a function call that may have
clobbered it (and you can’t deduce otherwise), then wouldn’t you have to reset
it to make an additional function call?</p>

<p>Let’s look at a few more cases and see if we can find the pattern.  Let’s take
a look at 2 sequential calls to <code>foo</code> vs 2 sequential calls to <code>bar</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">foo</span><span class="p">();</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">quux</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">foo</span><span class="p">();</span> <span class="c1">// notice %eax is always zeroed</span>
</span><span class='line'>  <span class="n">foo</span><span class="p">();</span> <span class="c1">// notice %eax is always zeroed</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="nl">quux:</span>
</span><span class='line'>  <span class="nf">pushq</span> <span class="nv">%rax</span>
</span><span class='line'>  <span class="nf">xorl</span> <span class="nv">%eax</span><span class="p">,</span> <span class="nv">%eax</span>
</span><span class='line'>  <span class="nf">callq</span> <span class="no">foo</span>
</span><span class='line'>  <span class="nf">xorl</span> <span class="nv">%eax</span><span class="p">,</span> <span class="nv">%eax</span>
</span><span class='line'>  <span class="nf">callq</span> <span class="no">foo</span>
</span><span class='line'>  <span class="nf">xorl</span> <span class="nv">%eax</span><span class="p">,</span> <span class="nv">%eax</span>
</span><span class='line'>  <span class="nf">popq</span> <span class="nv">%rcx</span>
</span><span class='line'>  <span class="nf">retq</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">bar</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">quuz</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">bar</span><span class="p">();</span> <span class="c1">// notice %eax is not zeroed</span>
</span><span class='line'>  <span class="n">bar</span><span class="p">();</span> <span class="c1">// notice %eax is not zeroed</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="nl">quuz:</span>
</span><span class='line'>  <span class="nf">pushq</span> <span class="nv">%rax</span>
</span><span class='line'>  <span class="nf">callq</span> <span class="no">bar</span>
</span><span class='line'>  <span class="nf">callq</span> <span class="no">bar</span>
</span><span class='line'>  <span class="nf">xorl</span> <span class="nv">%eax</span><span class="p">,</span> <span class="nv">%eax</span>
</span><span class='line'>  <span class="nf">popq</span> <span class="nv">%rcx</span>
</span><span class='line'>  <span class="nf">retq</span>
</span></code></pre></td></tr></table></div></figure>


<p>So it should be pretty clear now that the pattern is <code>f(void)</code> does not
generate the <code>xorl %eax, %eax</code>, while <code>f()</code> does.  What gives, aren’t they
declaring <code>f</code> the same; a function that takes no parameters?  Unfortunately, in
C the answer is no, and C and C++ differ here.</p>

<h2>An explanation</h2>

<p><code>f()</code> is not necessarily &ldquo;<code>f</code> takes no arguments&rdquo; but more of &ldquo;I’m not telling
you what arguments <code>f</code> takes (but it’s not variadic).&rdquo;  Consider this perfectly
legal C and C++ code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">foo</span><span class="p">();</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">42</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It seems that C++ inherited this from C, but only in C++ does <code>f()</code> seems to
have the semantics of &ldquo;<code>f</code> takes no arguments,&rdquo; as the previous examples all no
longer have the <code>xorl %eax, %eax</code>.  Same for <code>f(void)</code> in C or C++. That&rsquo;s
because <code>foo()</code> and <code>foo(int)</code> are two different function in C++ thanks to
function overloading (thanks reddit user /u/OldWolf2). Also, it seems that C
supported this difference for backwards compatibility w/ K &amp; R C.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">bar</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">bar</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">42</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Is an error in C, but in C++ thanks to function overloading these are two
separate functions! (<code>_Z3barv</code> vs <code>_Z3bari</code>). (Thanks HN user
<a href="https://news.ycombinator.com/item?id=19895079">pdpi</a>, for helping me
understand this. Cunningham&rsquo;s Law ftw.)</p>

<p>Needless to say, If you write code like that where your function declarations
and definitions do not match, you will be put in prison.
<a href="https://youtu.be/D2ydY5sBnIg?t=97">Do not pass go, do not collect $200</a>).
<a href="https://clang.llvm.org/docs/ControlFlowIntegrity.html">Control flow integrity</a>
analysis is particularly sensitive to these cases, manifesting in runtime
crashes.</p>

<h2>What could a sufficiently smart compiler do to help?</h2>

<p><code>-Wall</code> and <code>-Wextra</code> will just flag the <code>-Wunused-parameter</code>.  We need the
help of <code>-Wmissing-prototypes</code> to flag the mismatch between declaration and
definition. (An aside; I had a hard time remembering which was the declaration
and which was the definition when learning C++.  The mnemonic I came up with
and still use today is: think of definition as in muscle definition; where the
meat of the function is.  Declarations are just hot air.)  It’s not until we
get to <code>-Wstrict-prototypes</code> do we get a warning that we should use <code>f(void)</code>.
<code>-Wstrict-prototypes</code> is kind of a stylistic warning, so that’s why it’s not
part of <code>-Wall</code> or <code>-Wextra</code>.  Stylistic warnings are in bikeshed territory
(*cough* <code>-Wparentheses</code> *cough*).</p>

<p>One issue with C and C++’s style of code sharing and encapsulation via headers
is that declarations often aren’t enough for the powerful analysis techniques
of production optimizing compilers (whether or not a pointer
<a href="https://jonasdevlieghere.com/escape-analysis-capture-tracking-in-llvm/">&ldquo;escapes&rdquo;</a>
is a big one that comes to mind).  Let’s see if a &ldquo;sufficiently smart compiler&rdquo;
could notice when we’ve declared <code>f()</code>, but via observation of the definition
of <code>f()</code> noticed that we really only needed the semantics of <code>f(void)</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">puts</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="n">foo2</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">quacks</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">foo2</span><span class="p">();</span>
</span><span class='line'>  <span class="n">foo2</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="nl">quacks:</span>
</span><span class='line'>  <span class="nf">pushq</span> <span class="nv">%rax</span>
</span><span class='line'>  <span class="nf">callq</span> <span class="no">foo2</span>
</span><span class='line'>  <span class="nf">callq</span> <span class="no">foo2</span>
</span><span class='line'>  <span class="nf">xorl</span> <span class="nv">%eax</span><span class="p">,</span> <span class="nv">%eax</span>
</span><span class='line'>  <span class="nf">popq</span> <span class="nv">%rcx</span>
</span><span class='line'>  <span class="nf">retq</span>
</span></code></pre></td></tr></table></div></figure>


<p>A ha! So by having the full definition of <code>foo2</code> in this case in the same
translation unit, Clang was able to deduce that <code>foo2</code> didn’t actually need the
semantics of <code>f()</code>, so it could skip the <code>xorl %eax, %eax</code> we’d seen for <code>f()</code>
style definitions earlier.  If we change <code>foo2</code> to a declaration (such as would
be the case if it was defined in an <code>external</code> translation unit, and its
declaration included via header), then Clang can no longer observe whether
<code>foo2</code> definition differs or not from the declaration.</p>

<p>So Clang can potentially save you a single instruction (<code>xorl %eax, %eax</code>)
whose encoding is only 2B, per function call to functions declared in the style
<code>f()</code>, but only IF the definition is in the same translation unit and doesn’t
differ from the declaration, and you happen to be targeting x86_64. *deflated
whew* But usually it can’t because it’s only been provided the declaration via
header.</p>

<h2>Conclusion</h2>

<p>I certainly think <code>f()</code> is <em>prettier</em> than <code>f(void)</code> (so C++ got this right),
but pretty code may not always be the fastest and it’s not always
straightforward when to prefer one over the other.</p>

<p>So it seems that <code>f()</code> is ok for strictly C++ code.  For C or mixed C and C++,
<code>f(void)</code> might be better.</p>

<h2>References</h2>

<ul>
<li><a href="https://stackoverflow.com/q/6212665/1027966">https://stackoverflow.com/q/6212665/1027966</a></li>
<li><a href="https://stackoverflow.com/q/693788/1027966">https://stackoverflow.com/q/693788/1027966</a></li>
<li><a href="https://stackoverflow.com/q/12643202/1027966">https://stackoverflow.com/q/12643202/1027966</a></li>
<li><a href="https://stackoverflow.com/q/51032/1027966">https://stackoverflow.com/q/51032/1027966</a></li>
<li><a href="https://stackoverflow.com/q/416345/1027966">https://stackoverflow.com/q/416345/1027966</a></li>
<li><a href="https://stackoverflow.com/q/41803937/1027966">https://stackoverflow.com/q/41803937/1027966</a></li>
<li><a href="http://david.tribble.com/text/cdiffs.htm#C99-empty-parm">http://david.tribble.com/text/cdiffs.htm#C99-empty-parm</a></li>
<li><a href="https://godbolt.org/z/nsgGpt">https://godbolt.org/z/nsgGpt</a></li>
<li><a href="https://godbolt.org/z/IORbBb">https://godbolt.org/z/IORbBb</a></li>
<li><a href="https://godbolt.org/z/51s7K0">https://godbolt.org/z/51s7K0</a></li>
<li><a href="https://bugs.llvm.org/show_bug.cgi?id=41851">https://bugs.llvm.org/show_bug.cgi?id=41851</a> (the maintainer of Clang cites
the relevant part of the C11 spec for this)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding compiler bugs with C-Reduce]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2019/01/18/finding-compiler-bugs-with-c-reduce/"/>
    <updated>2019-01-18T00:26:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2019/01/18/finding-compiler-bugs-with-c-reduce</id>
    <content type="html"><![CDATA[<p>Support for a long awaited GNU C extension,
<a href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html">asm goto</a>,
is in the midst of landing in
<a href="https://reviews.llvm.org/D56571">Clang</a> and
<a href="https://reviews.llvm.org/D53765">LLVM</a>.  We want to make sure that
we release a high quality implementation, so it&rsquo;s important to test the new
patches on real code and not just small test cases.  When we hit compiler bugs
in large source files, it can be tricky to find exactly what part of
potentially large translation units are problematic.  In this post, we&rsquo;ll take
a look at using
<a href="https://embed.cs.utah.edu/creduce/">C-Reduce</a>,
a multithreaded code bisection utility for C/C++, to help narrow done a
reproducer for
<a href="https://github.com/ClangBuiltLinux/linux/issues/320">a real compiler bug</a>
(potentially; in a patch that was posted, and will be fixed before it can ship
in production) from a real code base (the Linux kernel).  It&rsquo;s mostly a post to
myself in the future, so that I can remind myself how to run C-reduce on the
Linux kernel again, since this is now the third real compiler bug it&rsquo;s helped
me track down.</p>

<p>So the bug I&rsquo;m focusing on when trying to compile the Linux kernel with Clang
is a linkage error, all the way at the end of the build.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>drivers/spi/spidev.o:(__jump_table+0x74): undefined reference to `.Ltmp4'</span></code></pre></td></tr></table></div></figure>


<p>Hmm&hellip;looks like the object file (<code>drivers/spi/spidev.o</code>), has a
section (<code>__jump_table</code>), that references a non-existent
symbol (<code>.Ltmp</code>), which looks like a temporary label that should have been
cleaned up by the compiler.  Maybe it was accidentally left behind by an
optimization pass?</p>

<p>To run C-reduce, we need a shell script that returns 0 when it should keep
reducing, and an input file.  For an input file, it&rsquo;s just way simpler to
preprocess it; this helps cut down on the compiler flags that typically
requires paths (<code>-I</code>, <code>-L</code>).</p>

<h2>Preprocess</h2>

<p>First, let&rsquo;s preprocess the source.  For the kernel, if the file compiles
correctly, the kernel&rsquo;s KBuild build process will create a file named in the
form path/to/.file.o.cmd, in our case drivers/spi/.spidev.o.cmd.  (If the file
doesn&rsquo;t compile, then
<a href="https://nickdesaulniers.github.io/blog/2017/05/31/running-clang-tidy-on-the-linux-kernel/">I&rsquo;ve had success</a>
hooking <code>make path/to/file.o</code> with
<a href="https://github.com/rizsotto/Bear">bear</a>
then getting the <code>compile_commands.json</code> for the file.)  I find it easiest to
copy this file to a new shell script, then strip out everything but the first
line.  I then replace the <code>-c -o &lt;output&gt;.o</code> with <code>-E</code>.  <code>chmod +x</code> that new
shell script, then run it (outputting to stdout) to eyeball that it looks
preprocessed, then redirect the output to a <code>.i</code> file.  Now that we have our
preprocessed input, let&rsquo;s create the C-reduce shell script.</p>

<h2>Reproducer</h2>

<p>I find it helpful to have a shell script in the form:</p>

<ol>
<li>remove previous object files</li>
<li>rebuild object files</li>
<li>disassemble object files and pipe to grep</li>
</ol>


<p>For you, it might be some different steps.
<a href="https://embed.cs.utah.edu/creduce/using/">As the docs show</a>,
you just need the shell script to return 0 when it should keep reducing.  From
our previous shell script that pre-processed the source and dumped a <code>.i</code> file,
let&rsquo;s change it back to stop before linking rather that preprocessing
(<code>s/-E/-c/</code>), and change the input to our new <code>.i</code> file.  Finally, let&rsquo;s add
the test for what we want.  Since I want C-Reduce to keep reducing until the
disassmbled object file no longer references anything <code>Ltmp</code> related, I write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>objdump -Dr -j __jump_table spidev.o | grep Ltmp &gt; /dev/null
</span></code></pre></td></tr></table></div></figure>


<p>Now I can run the reproducer to check that it at least returns 0, which
C-Reduce needs to get started:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./spidev_asm_goto.sh
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'>0
</span></code></pre></td></tr></table></div></figure>


<h2>Running C-Reduce</h2>

<p>Now that we have a reproducer script and input file, let&rsquo;s run C-Reduce.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">time </span>creduce --n 40 spidev_asm_goto.sh spidev.i
</span><span class='line'><span class="o">===</span>&lt; 144926 &gt;<span class="o">===</span>
</span><span class='line'>running 40 interestingness tests in <span class="nv">parallel</span>
</span><span class='line'><span class="o">===</span>&lt; pass_includes :: 0 &gt;<span class="o">===</span>
</span><span class='line'><span class="o">===</span>&lt; pass_unifdef :: 0 &gt;<span class="o">===</span>
</span><span class='line'><span class="o">===</span>&lt; pass_comments :: 0 &gt;<span class="o">===</span>
</span><span class='line'><span class="o">===</span>&lt; pass_blank :: 0 &gt;<span class="o">===</span>
</span><span class='line'><span class="o">(</span>0.7 %, 2393679 bytes<span class="o">)</span>
</span><span class='line'><span class="o">(</span>5.3 %, 2282207 bytes<span class="o">)</span>
</span><span class='line'><span class="o">===</span>&lt; pass_clang_binsrch :: replace-function-def-with-decl &gt;<span class="o">===</span>
</span><span class='line'><span class="o">(</span>12.6 %, 2107372 bytes<span class="o">)</span>
</span><span class='line'>...
</span><span class='line'><span class="o">===</span>&lt; pass_indent :: final &gt;<span class="o">===</span>
</span><span class='line'><span class="o">(</span>100.0 %, 156 bytes<span class="o">)</span>
</span><span class='line'><span class="o">=====================</span> <span class="k">done</span> <span class="o">====================</span>
</span><span class='line'>
</span><span class='line'>pass statistics:
</span><span class='line'>  method pass_clang_binsrch :: remove-unused-function worked 1 <span class="nb">times </span>and failed 0 <span class="nb">times</span>
</span><span class='line'>...
</span><span class='line'>  method pass_lines :: 0 worked 427 <span class="nb">times </span>and failed 998 <span class="nb">times</span>
</span><span class='line'>            ******** /android0/kernel-all/spidev.i ********
</span><span class='line'>
</span><span class='line'>a<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  int b;
</span><span class='line'>  c<span class="o">()</span>;
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>c &lt; 2<span class="o">)</span>
</span><span class='line'>    <span class="nv">b</span> <span class="o">=</span> d<span class="o">()</span>;
</span><span class='line'>  <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    asm goto<span class="o">(</span><span class="s2">&quot;1:.long b - ., %l[l_yes] - . \n\t&quot;</span> : : : : l_yes<span class="o">)</span>;
</span><span class='line'>  l_yes:;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>b<span class="o">)</span>
</span><span class='line'>    e<span class="o">()</span>;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>creduce --n 40 spidev_asm_goto.sh spidev.i  1892.35s user 1186.10s system 817% cpu 6:16.76 total
</span><span class='line'><span class="nv">$ </span>wc -l spidev.i.orig
</span><span class='line'>56160 spidev.i.orig
</span><span class='line'><span class="nv">$ </span>wc -l spidev.i
</span><span class='line'>12 spidev.i
</span></code></pre></td></tr></table></div></figure>


<p>So it took C-reduce just over 6 minutes to turn >56k lines of mostly irrelevant
code into 12 when running 40 threads on my 48 core workstation.</p>

<p>It&rsquo;s also highly entertaining to watch C-Reduce work its magic. In another
terminal, I highly recommend running <code>watch -n1 cat &lt;input_file_to_creduce.i&gt;</code>
to see it pared down before your eyes.</p>

<p>Jump to 4:24 to see where things really pick up.
<a href="https://asciinema.org/a/XtD0QdiIUGhvc1G2BqTJ9gti2"><img src="https://asciinema.org/a/XtD0QdiIUGhvc1G2BqTJ9gti2.svg" alt="asciicast" /></a>
<a href="https://asciinema.org/a/zdkbvUqDsilSa5QjGJr3ANP6y"><img src="https://asciinema.org/a/zdkbvUqDsilSa5QjGJr3ANP6y.svg" alt="asciicast" /></a></p>

<p>Finally, we still want to bisect our compiler flags (the kernel uses a lot).  I
still do this process manually, and it&rsquo;s not too bad.  Having proper and
minimal steps to reproduce compiler bugs is critical.</p>

<p>That&rsquo;s enough for a great bug report for now.  In a future episode, we&rsquo;ll see
how to start pulling apart llvm to see where compilation is going amiss.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Booting a Custom Linux Kernel in QEMU and Debugging it with GDB]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2018/10/24/booting-a-custom-linux-kernel-in-qemu-and-debugging-it-with-gdb/"/>
    <updated>2018-10-24T21:08:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2018/10/24/booting-a-custom-linux-kernel-in-qemu-and-debugging-it-with-gdb</id>
    <content type="html"><![CDATA[<p>Typically, when we modify a program, we’d like to run it to verify our changes.
Before booting a compiled Linux kernel image on actual hardware, it can save us
time and potential headache to do a quick boot in a virtual machine like
<a href="https://www.qemu.org/">QEMU</a>
as a sanity check.  If your kernel boots in QEMU, it’s not a guarantee it will
boot on metal, but it is a quick assurance that the kernel image is not
completely busted.  Since I finally got this working, I figured I’d post the
built up command line arguments (and error messages observed) for future
travelers.  Also, QEMU has more flags than virtually any other binary I’ve ever
seen (other than a google3 binary; shots fired), and simply getting it to print
to the terminal is &frac34; the battle.  If I don’t write it down now, or lose my
shell history, I’ll probably forget how to do this.</p>

<p>TL;DR:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># one time setup</span>
</span><span class='line'><span class="nv">$ </span>mkinitramfs -o ramdisk.img
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;add-auto-load-safe-path path/to/linux/scripts/gdb/vmlinux-gdb.py&quot;</span> &gt;&gt; ~/.gdbinit
</span><span class='line'>
</span><span class='line'><span class="c"># one time kernel setup</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>linux
</span><span class='line'><span class="nv">$ </span>./scripts/config -e DEBUG_INFO -e GDB_SCRIPTS
</span><span class='line'><span class="nv">$ </span>&lt;make kernel image&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># each debug session run</span>
</span><span class='line'><span class="nv">$ </span>qemu-system-x86_64 <span class="se">\</span>
</span><span class='line'>  -kernel arch/x86_64/boot/bzImage <span class="se">\</span>
</span><span class='line'>  -nographic <span class="se">\</span>
</span><span class='line'>  -append <span class="s2">&quot;console=ttyS0 nokaslr&quot;</span> <span class="se">\</span>
</span><span class='line'>  -initrd ramdisk.img <span class="se">\</span>
</span><span class='line'>  -m 512 <span class="se">\</span>
</span><span class='line'>  --enable-kvm <span class="se">\</span>
</span><span class='line'>  -cpu host <span class="se">\</span>
</span><span class='line'>  -s -S &amp;
</span><span class='line'><span class="nv">$ </span>gdb vmlinux
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> target remote :1234
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> hbreak start_kernel
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> c
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> lx-dmesg
</span></code></pre></td></tr></table></div></figure>


<h2>Booting in QEMU</h2>

<p>We’ll play stupid and see what errors we hit, and how to fix them.  First,
let’s try just our new kernel:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>qemu-system-x86_64 -kernel arch/x86_64/boot/bzImage
</span></code></pre></td></tr></table></div></figure>


<p>A new window should open, and we should observe some dmesg output, a panic, and
your fans might spin up.  I find this window relatively hard to see, so let’s
get the output (and input) to a terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>qemu-system-x86_64 -kernel arch/x86_64/boot/bzImage -nographic
</span></code></pre></td></tr></table></div></figure>


<p>This is missing an important flag, but it’s important to see what happens when
we forget it.  It will seem that there’s no output, and QEMU isn’t responding
to <code>ctrl+c</code>.  And my fans are spinning again.  Try <code>ctrl+a</code>, then <code>c</code>, to get a
<code>(qemu)</code> prompt.  A simple <code>q</code> will exit.</p>

<p>Next, We’re going to pass a kernel command line argument.  The kernel accepts
command line args just like userspace binaries, though usually the bootloader
sets these up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>qemu-system-x86_64 -kernel arch/x86_64/boot/bzImage -nographic -append <span class="s2">&quot;console=ttyS0&quot;</span>
</span><span class='line'>...
</span><span class='line'><span class="o">[</span>    1.144348<span class="o">]</span> Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block<span class="o">(</span>0,0<span class="o">)</span>
</span><span class='line'><span class="o">[</span>    1.144759<span class="o">]</span> CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.18.0-rc6 <span class="c">#10</span>
</span><span class='line'><span class="o">[</span>    1.144949<span class="o">]</span> Hardware name: QEMU Standard PC <span class="o">(</span>i440FX + PIIX, 1996<span class="o">)</span>, BIOS 1.10.2-1ubuntu1 04/01/2014
</span><span class='line'><span class="o">[</span>    1.145269<span class="o">]</span> Call Trace:
</span><span class='line'><span class="o">[</span>    1.146027<span class="o">]</span>  dump_stack+0x5c/0x7b
</span><span class='line'><span class="o">[</span>    1.146162<span class="o">]</span>  panic+0xe4/0x252
</span><span class='line'><span class="o">[</span>    1.146286<span class="o">]</span>  mount_block_root+0x1f1/0x2d6
</span><span class='line'><span class="o">[</span>    1.146445<span class="o">]</span>  prepare_namespace+0x13b/0x171
</span><span class='line'><span class="o">[</span>    1.146579<span class="o">]</span>  kernel_init_freeable+0x227/0x254
</span><span class='line'><span class="o">[</span>    1.146721<span class="o">]</span>  ? rest_init+0xb0/0xb0
</span><span class='line'><span class="o">[</span>    1.146826<span class="o">]</span>  kernel_init+0xa/0x110
</span><span class='line'><span class="o">[</span>    1.146931<span class="o">]</span>  ret_from_fork+0x35/0x40
</span><span class='line'><span class="o">[</span>    1.147412<span class="o">]</span> Kernel Offset: 0x1c200000 from 0xffffffff81000000 <span class="o">(</span>relocation range: 0xffffffff80000000-0xffffffffbfffffff<span class="o">)</span>
</span><span class='line'><span class="o">[</span>    1.147901<span class="o">]</span> ---<span class="o">[</span> end Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block<span class="o">(</span>0,0<span class="o">)</span> <span class="o">]</span>---
</span><span class='line'><span class="o">(</span>qemu<span class="o">)</span> q
</span></code></pre></td></tr></table></div></figure>


<p>Well at least we’re no longer in the dark (remember, <code>ctrl+a</code>, <code>c</code>, <code>q</code> to
exit).  Now we’re panicking because there’s no root filesystem, so there’s no
<code>init</code> binary to run.  Now we could create a custom filesystem image with the
bare bones (definitely a post for another day), but creating a ramdisk is the
most straightforward way, IMO.  Ok, let’s create the ramdisk,
then add it to QEMU’s parameters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mkinitramfs -o ramdisk.img
</span><span class='line'><span class="nv">$ </span>qemu-system-x86_64 -kernel arch/x86_64/boot/bzImage -nographic -append <span class="s2">&quot;console=ttyS0&quot;</span> -initrd ramdisk.img
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, we’ll (likely) hit the same panic and the panic doesn’t provide
enough information, but the default maximum memory QEMU will use is too
limited.  <code>-m 512</code> will give our virtual machine enough memory to boot and get
a busybox based shell prompt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>qemu-system-x86_64 -kernel arch/x86_64/boot/bzImage -nographic -append <span class="s2">&quot;console=ttyS0&quot;</span> -initrd ramdisk.img -m 512
</span><span class='line'>...
</span><span class='line'><span class="o">(</span>initramfs<span class="o">)</span> cat /proc/version
</span><span class='line'>Linux version 4.19.0-rc7+ <span class="o">(</span>nick@nick-Blade-Stealth<span class="o">)</span> <span class="o">(</span>clang version 8.0.0 <span class="o">(</span>https://git.llvm.org/git/clang.git/ 60c8c0cc0786c7f6b8dc5c1e3acd7ec98f0a7b6d<span class="o">)</span> <span class="o">(</span>https://git.llvm.org/git/llvm.git/ 64c3a57bec9dbe3762fa1d80055ba850d6658f5b<span class="o">))</span> <span class="c">#18 SMP Wed Oct 24 19:29:53 PDT 2018</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enabling kvm seems to help with those fans spinning up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>qemu-system-x86_64 -kernel arch/x86_64/boot/bzImage -nographic -append <span class="s2">&quot;console=ttyS0&quot;</span> -initrd ramdisk.img -m 512 --enable-kvm
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we might be seeing a warning when we start QEMU:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>qemu-system-x86_64: warning: host doesn<span class="err">&#39;</span>t support requested feature: CPUID.80000001H:ECX.svm <span class="o">[</span>bit 2<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just need to add <code>-cpu host</code> to our invocation of QEMU.  It can be helpful when
debugging to disable
<a href="https://lwn.net/Articles/569635/">KASLR</a>
via <code>nokaslr</code> in the appended kernel command line parameters, or via
CONFIG_RANDOMIZE_BASE not being set in our kernel configs.</p>

<p>We can add <code>-s</code> to start a gdbserver on port 1234, and <code>-S</code> to pause the kernel
until we continue in gdb.</p>

<h2>Attaching GDB to QEMU</h2>

<p>Now that we can boot this kernel image in QEMU, let’s attach gdb to it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gdb vmlinux
</span></code></pre></td></tr></table></div></figure>


<p>If you see this on your first run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>warning: File <span class="s2">&quot;/home/nick/linux/scripts/gdb/vmlinux-gdb.py&quot;</span> auto-loading has been declined by your <span class="sb">`</span>auto-load safe-path<span class="err">&#39;</span> <span class="nb">set </span>to <span class="s2">&quot;$debugdir:$datadir/auto-load&quot;</span>.
</span><span class='line'>To <span class="nb">enable </span>execution of this file add
</span><span class='line'>  add-auto-load-safe-path /path/to/linux/scripts/gdb/vmlinux-gdb.py
</span><span class='line'>line to your configuration file <span class="s2">&quot;/home/&lt;username&gt;/.gdbinit&quot;</span>.
</span></code></pre></td></tr></table></div></figure>


<p>Then you can do this one time fix in order to load the gdb scripts each run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>linux
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;add-auto-load-safe-path `pwd`/scripts/gdb/vmlinux-gdb.py&quot;</span> &gt;&gt; ~/.gdbinit
</span></code></pre></td></tr></table></div></figure>


<p>Now that QEMU is listening on port 1234 (via <code>-s</code>), let’s connect to it, and
set a break point early on in the kernel’s initialization.  Note the the use of
<code>hbreak</code> (I lost a lot of time just using <code>b start_kernel</code>, only for the
kernel to continue booting past that function).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>gdb<span class="o">)</span> target remote :1234
</span><span class='line'>Remote debugging using :1234
</span><span class='line'>0x000000000000fff0 in cpu_hw_events <span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> hbreak start_kernel
</span><span class='line'>Hardware assisted breakpoint 2 at 0xffffffff82904a1d: file init/main.c, line 536.
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> c
</span><span class='line'>Continuing.
</span><span class='line'>
</span><span class='line'>Breakpoint 2, start_kernel <span class="o">()</span> at init/main.c:536
</span><span class='line'>536       set_task_stack_end_magic<span class="o">(</span>&amp;init_task<span class="o">)</span>;
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> bt
</span><span class='line'><span class="c">#0  start_kernel () at init/main.c:536</span>
</span><span class='line'><span class="c">#1  0xffffffff810000d4 in secondary_startup_64 () at arch/x86/kernel/head_64.S:243</span>
</span><span class='line'><span class="c">#2  0x0000000000000000 in ?? ()</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can start/resume the kernel with <code>c</code>, and pause it with <code>ctrl+c</code>.  The gdb
scripts provided by the kernel via CONFIG_GDB_SCRIPTS can be viewed with
<code>apropos lx</code>. <code>lx-dmesg</code> is incredibly handy for viewing the kernel dmesg
buffer, particularly in the case of a kernel panic before the serial driver has
been brought up (in which case there’s output from QEMU to stdout, which is
just as much fun as debugging graphics code (ie. black screen)).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>gdb<span class="o">)</span> apropos lx
</span><span class='line'><span class="k">function </span>lx_current -- Return current task
</span><span class='line'><span class="k">function </span>lx_module -- Find module by name and <span class="k">return </span>the module variable
</span><span class='line'><span class="k">function </span>lx_per_cpu -- Return per-cpu variable
</span><span class='line'><span class="k">function </span>lx_task_by_pid -- Find Linux task by PID and <span class="k">return </span>the task_struct variable
</span><span class='line'><span class="k">function </span>lx_thread_info -- Calculate Linux thread_info from task variable
</span><span class='line'><span class="k">function </span>lx_thread_info_by_pid -- Calculate Linux thread_info from task variable found by pid
</span><span class='line'>lx-cmdline --  Report the Linux Commandline used in the current kernel
</span><span class='line'>lx-cpus -- List CPU status arrays
</span><span class='line'>lx-dmesg -- Print Linux kernel log buffer
</span><span class='line'>lx-fdtdump -- Output Flattened Device Tree header and dump FDT blob to the filename
</span><span class='line'>lx-iomem -- Identify the IO memory resource locations defined by the kernel
</span><span class='line'>lx-ioports -- Identify the IO port resource locations defined by the kernel
</span><span class='line'>lx-list-check -- Verify a list consistency
</span><span class='line'>lx-lsmod -- List currently loaded modules
</span><span class='line'>lx-mounts -- Report the VFS mounts of the current process namespace
</span><span class='line'>lx-ps -- Dump Linux tasks
</span><span class='line'>lx-symbols -- <span class="o">(</span>Re-<span class="o">)</span>load symbols of Linux kernel and currently loaded modules
</span><span class='line'>lx-version --  Report the Linux Version of the current kernel
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> lx-version
</span><span class='line'>Linux version 4.19.0-rc7+ <span class="o">(</span>nick@nick-Blade-Stealth<span class="o">)</span> <span class="o">(</span>clang version 8.0.0
</span><span class='line'><span class="o">(</span>https://git.llvm.org/git/clang.git/ 60c8c0cc0786c7f6b8dc5c1e3acd7ec98f0a7b6d<span class="o">)</span>
</span><span class='line'><span class="o">(</span>https://git.llvm.org/git/llvm.git/ 64c3a57bec9dbe3762fa1d80055ba850d6658f5b<span class="o">))</span>
</span><span class='line'><span class="c">#18 SMP Wed Oct 24 19:29:53 PDT 2018</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Where to Go From Here</h2>

<p>Maybe try cross compiling a kernel (you&rsquo;ll need a cross
compiler/assembler/linker/debugger and likely a different <code>console=ttyXXX</code>
kernel command line parameter), building your own root filesystem with
<a href="https://buildroot.org/">buildroot</a>,
or exploring the rest of QEMU&rsquo;s command line options.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speeding up Linux kernel builds with ccache]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2018/06/02/speeding-up-linux-kernel-builds-with-ccache/"/>
    <updated>2018-06-02T16:39:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2018/06/02/speeding-up-linux-kernel-builds-with-ccache</id>
    <content type="html"><![CDATA[<p><a href="https://ccache.samba.org/">ccache</a>, the compiler cache, is a fantastic way to
speed up build times for C and C++ code that
<a href="https://nickdesaulniers.github.io/blog/2015/07/23/additional-c-slash-c-plus-plus-tooling/">I previously recommended</a>.
Recently, I was playing around with trying to get it to speed up my Linux
kernel builds, but wasn&rsquo;t seeing any benefit. Usually when this happens with
ccache, there&rsquo;s something non-deterministic about the builds that prevents
cache hits.</p>

<p>Turns out
<a href="https://lists.samba.org/archive/ccache/2014q1/001172.html">someone asked this exact question on the ccache mailing list back in 2014</a>,
and a teammate from my Android days supposed a timestamp was the culprit. That,
and
<a href="https://lwn.net/Articles/437864/">this LKML post from the KBUILD maintainer in 2011 about determinism</a>
helped me find
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=87c94bfb8ad354fb43d2caf870d7ca0b3f98dab3">commit 87c94bfb8ad35 (&ldquo;kbuild: override build timestamp &amp; version&rdquo;)</a> that introduced manually overriding part of the version string that
contains the build timestamp that can be seen from:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat /proc/version
</span><span class='line'>Linux version 4.15.0-13-generic <span class="o">(</span>buildd@lgw01-amd64-028<span class="o">)</span>
</span><span class='line'><span class="o">(</span>gcc version 5.4.0 20160609 <span class="o">(</span>Ubuntu 5.4.0-6ubuntu1~16.04.9<span class="o">))</span>
</span><span class='line'><span class="c">#14~16.04.1-Ubuntu SMP</span>
</span><span class='line'>Sat Mar 17 03:04:59 UTC 2018
</span></code></pre></td></tr></table></div></figure>


<p>With ccache, we can check the cache hit/miss stats with <code>-s</code>, clear the cache
with <code>-C</code>, and clear the stats with <code>-z</code>. We can tell ccache explicitly which
compiler to fall back to as its first argument (not strictly necessary). For
KBUILD, we can swap our compiler by using <code>CC=</code> arg.</p>

<p>Let&rsquo;s see what happens to
our build time for subsequent builds with a hot cache:</p>

<h3>No Cache</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>make clean
</span><span class='line'><span class="nv">$ </span><span class="nb">time </span>make -j4
</span><span class='line'>...
</span><span class='line'>make -j4  2008.93s user 231.69s system 346% cpu 10:47.07 total
</span></code></pre></td></tr></table></div></figure>


<h3>Cold Cache</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ccache -Cz
</span><span class='line'>Cleared cache
</span><span class='line'>Statistics cleared
</span><span class='line'><span class="nv">$ </span>ccache -s
</span><span class='line'>cache directory                     /home/nick/.ccache
</span><span class='line'>primary config                      /home/nick/.ccache/ccache.conf
</span><span class='line'>secondary config      <span class="o">(</span><span class="nb">readonly</span><span class="o">)</span>    /etc/ccache.conf
</span><span class='line'>cache hit <span class="o">(</span>direct<span class="o">)</span>                     0
</span><span class='line'>cache hit <span class="o">(</span>preprocessed<span class="o">)</span>               0
</span><span class='line'>cache miss                             0
</span><span class='line'>cache hit rate                      0.00 %
</span><span class='line'>cleanups performed                     0
</span><span class='line'>files in cache                         0
</span><span class='line'>cache size                           0.0 kB
</span><span class='line'>max cache size                       5.0 GB
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>make clean
</span><span class='line'><span class="nv">$ </span><span class="nb">time </span><span class="nv">KBUILD_BUILD_TIMESTAMP</span><span class="o">=</span><span class="s1">&#39;&#39;</span> make <span class="nv">CC</span><span class="o">=</span><span class="s2">&quot;ccache gcc&quot;</span> -j4
</span><span class='line'>...
</span><span class='line'><span class="nv">KBUILD_BUILD_TIMESTAMP</span><span class="o">=</span><span class="s1">&#39;&#39;</span> make <span class="nv">CC</span><span class="o">=</span><span class="s2">&quot;ccache gcc&quot;</span> -j4  2426.79s user 312.08s system 372% cpu 12:15.22 total
</span><span class='line'><span class="nv">$ </span>ccache -s
</span><span class='line'>cache directory                     /home/nick/.ccache
</span><span class='line'>primary config                      /home/nick/.ccache/ccache.conf
</span><span class='line'>secondary config      <span class="o">(</span><span class="nb">readonly</span><span class="o">)</span>    /etc/ccache.conf
</span><span class='line'>cache hit <span class="o">(</span>direct<span class="o">)</span>                     0
</span><span class='line'>cache hit <span class="o">(</span>preprocessed<span class="o">)</span>               0
</span><span class='line'>cache miss                          3242
</span><span class='line'>called <span class="k">for </span>link                        6
</span><span class='line'>called <span class="k">for </span>preprocessing             538
</span><span class='line'>unsupported <span class="nb">source </span>language           66
</span><span class='line'>no input file                        108
</span><span class='line'>files in cache                      9720
</span><span class='line'>cache size                         432.6 MB
</span><span class='line'>max cache size                       5.0 GB
</span></code></pre></td></tr></table></div></figure>


<h3>Hot Cache</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ccache -z
</span><span class='line'>Statistics cleared
</span><span class='line'><span class="nv">$ </span>make clean
</span><span class='line'><span class="nv">$ </span><span class="nb">time </span><span class="nv">KBUILD_BUILD_TIMESTAMP</span><span class="o">=</span><span class="s1">&#39;&#39;</span> make <span class="nv">CC</span><span class="o">=</span><span class="s2">&quot;ccache gcc&quot;</span> -j4
</span><span class='line'>...
</span><span class='line'><span class="nv">KBUILD_BUILD_TIMESTAMP</span><span class="o">=</span><span class="s1">&#39;&#39;</span> make <span class="nv">CC</span><span class="o">=</span><span class="s2">&quot;ccache gcc&quot;</span> -j4  151.85s user 132.98s system 288% cpu 1:38.90 total
</span><span class='line'><span class="nv">$ </span>ccache -s
</span><span class='line'>cache directory                     /home/nick/.ccache
</span><span class='line'>primary config                      /home/nick/.ccache/ccache.conf
</span><span class='line'>secondary config      <span class="o">(</span><span class="nb">readonly</span><span class="o">)</span>    /etc/ccache.conf
</span><span class='line'>cache hit <span class="o">(</span>direct<span class="o">)</span>                  3232
</span><span class='line'>cache hit <span class="o">(</span>preprocessed<span class="o">)</span>               7
</span><span class='line'>cache miss                             3
</span><span class='line'>called <span class="k">for </span>link                        6
</span><span class='line'>called <span class="k">for </span>preprocessing             538
</span><span class='line'>unsupported <span class="nb">source </span>language           66
</span><span class='line'>no input file                        108
</span><span class='line'>files in cache                      9734
</span><span class='line'>cache size                         432.8 MB
</span><span class='line'>max cache size                       5.0 GB
</span></code></pre></td></tr></table></div></figure>


<p>The initial cold cache build will be slower than not using ccache at all, but
it&rsquo;s a one time cost that&rsquo;s not significant relative to the savings.  No
caching took 647.07s, initial cold cache build took 735.22s (13.62% slower),
and subsequent hot cache builds took 98.9s (6.54x faster). YMMV based on CPU
and disk performance. Also, it&rsquo;s not the most common workflow to do clean
builds, but we do this for Linux kernel builds for Android/Pixel at work, and
this helps me significantly for local development.</p>

<p>Now, if you really need that date string in there, you <em>theoretically</em> could
put some garbage value in there (for the cache) long enough to save enough
space for a date string, then patch your vmlinux binary after the fact.  I
<em>don&rsquo;t</em> recommend that, but I would imagine that might look something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ KBUILD_BUILD_TIMESTAMP</span><span class="o">=</span><span class="k">$(</span><span class="nb">printf</span> <span class="s2">&quot;y%0.s&quot;</span> <span class="k">$(</span>seq 1 <span class="k">$(</span>date | wc -c<span class="k">)))</span>
</span><span class='line'><span class="nv">$ </span>make <span class="nv">CC</span><span class="o">=</span><span class="s2">&quot;ccache gcc&quot;</span> vmlinux
</span><span class='line'><span class="nv">$ </span>sed -i <span class="s2">&quot;s/$(KBUILD_BUILD_TIMESTAMP)/$(date)/g&quot;</span> vmlinux
</span></code></pre></td></tr></table></div></figure>


<p>Deterministic builds make build caching easier, but I&rsquo;m not sure that build
timestamp strings and build determinism are reconcileable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCC vs LLVM Q3 2017: Active Developer Counts]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2017/09/05/gcc-vs-llvm-q3-2017-commit-rates-and-active-developer-counts/"/>
    <updated>2017-09-05T00:20:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2017/09/05/gcc-vs-llvm-q3-2017-commit-rates-and-active-developer-counts</id>
    <content type="html"><![CDATA[<p>A blog post from a few years ago that really stuck with me was Martin Olsson’s
<a href="https://mo.github.io/2015/11/04/browser-engines-active-developers-and-commit-rates.html">Browser Engines 2015: Commit Rates and Active Developer Counts</a>,
where he shows information about the number of authors and commits to popular
web browsers.  The graphs and analysis had interesting takeaways like showing
the obvious split in blink and webkit, and relative number of contributors of
the projects.  Martin had data comparing gcc to llvm from Q4 2015, but I wanted
to see what the data looked like now in Q3 2017 and wanted to share my
findings; simply rerunning the numbers.  Luckily Martin
<a href="https://github.com/mo/git-source-metrics">open sourced</a>
the scripts he used for measurements so they could be rerun.</p>

<p>Commit count and active authors in the previous 60 days is a rough estimate for
project health; the scripts don’t/can’t account for unique authors (same author
using different git commit info) and commit frequency is meaningless for
comparing developers that commit early and commit often, but let’s take a look.
Active contributors over 60 days cuts out folks who do commit to either code
bases, just not as often.  Lies, damn lies, and statistics, right? Or torture
the data enough, and it will confess anything&hellip;</p>

<p>Note that LLVM is split into a few repositories (llvm the common base, clang
the C/C++ frontend, libc++ the C++ runtime, compiler-rt the
sanitizers/built-ins/profiler lib, lld the linker, clang-tools-extra the
utility belt, lldb the debugger (there are more, these are the most active LLVM
projects)).  Later, I refer to LLVM as the grouping of these repos.</p>

<p>There’s a lot of caveats with this data.  I suspect that the separate LLVM
repo’s have a lot of overlap and have fewer active contributors when looked at
in aggregate.  That is to say you can’t simply add them else you’d be double
counting a bunch.  Also, the comparison is not quite fair since the overlap in
front-end-language and back-end-target support in these two massive projects
does not overlap in a lot of places.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/gcc_clang_authors.jpg"></p>

<p>LLVM’s 60 day active contributors are ~3x-5x times GCC’s and growing, while
GCC’s 100-count hasn’t changed much since ‘04.  It’s safe to say GCC is not
dying; it’s going steady and chugging away as it has been, but it seems LLVM
has been very strong in attracting active contributors.  Either way, I’m
thankful to have not one, but two high quality open source C/C++ compilers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Clang-Tidy on the Linux Kernel]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2017/05/31/running-clang-tidy-on-the-linux-kernel/"/>
    <updated>2017-05-31T20:25:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2017/05/31/running-clang-tidy-on-the-linux-kernel</id>
    <content type="html"><![CDATA[<p><a href="http://clang.llvm.org/extra/clang-tidy/">Clang-Tidy</a> is a linter from the LLVM
ecosystem.  I wanted to try to run it on the Linux kernel to see what kind of
bugs it would find.  The false positive rate seems pretty high (a persistent
bane to static analysis), but some patching in both the tooling and the source
can likely help bring this rate down.</p>

<p>The most straightforward way to invoke Clang-Tidy is with a compilation
database, which is a json based file that for each translation unit records</p>

<ol>
<li>The source file of the translation unit.</li>
<li>The top level directory of the source.</li>
<li>The exact arguments passed to the compiler.</li>
</ol>


<p>The exact arguments are required because <code>-D</code> and <code>-I</code> flags are necessary to
reproduce the exact Abstract Syntax Tree (AST) used to compile your code. Given
a compilation database, it&rsquo;s trivial to parse and recreate a build.  For the
kernel&rsquo;s KBuild, it&rsquo;s a lot like encoding the output of <code>make V=1</code>.</p>

<p>In order to generate a compilation database, we can use an awesome tool called
<a href="https://github.com/rizsotto/Bear">BEAR</a>. BEAR will
<a href="https://github.com/rizsotto/Bear/blob/6b07f5044f30a3070d1dc39801bcdd94395d673e/libear/ear.c#L21">hook</a>
calls to
<a href="https://linux.die.net/man/3/exec">exec</a>
and family, then write out the compilation database (compile_commands.json).</p>

<p>With BEAR installed, we can invoke the kernel&rsquo;s build with <code>bear make -j</code>. When
we&rsquo;re done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  linux git:<span class="o">(</span>nick<span class="o">)</span> ✗ du -h compile_commands.json
</span><span class='line'>11M compile_commands.json
</span><span class='line'>➜  linux git:<span class="o">(</span>nick<span class="o">)</span> ✗ wc -l compile_commands.json
</span><span class='line'>330296 compile_commands.json
</span><span class='line'>➜  linux git:<span class="o">(</span>nick<span class="o">)</span> ✗ head -n 26 compile_commands.json
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;arguments&quot;</span>: <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;cc&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-c&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-Wp,-MD,arch/x86/boot/tools/.build.d&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-Wall&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-Wmissing-prototypes&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-Wstrict-prototypes&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-O2&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-fomit-frame-pointer&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-std=gnu89&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-Wno-unused-value&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-Wno-unused-parameter&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-Wno-missing-field-initializers&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-I./tools/include&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-include&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;include/generated/autoconf.h&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-D__EXPORTED_HEADERS__&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-o&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;arch/x86/boot/tools/build&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;arch/x86/boot/tools/build.c&quot;</span>
</span><span class='line'>        <span class="o">]</span>,
</span><span class='line'>        <span class="s2">&quot;directory&quot;</span>: <span class="s2">&quot;/home/nick/linux&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;file&quot;</span>: <span class="s2">&quot;arch/x86/boot/tools/build.c&quot;</span>
</span><span class='line'>    <span class="o">}</span>,
</span></code></pre></td></tr></table></div></figure>


<p>Now with Clang-Tidy (probably worthwhile to build from source, but it&rsquo;s also
available off <code>apt</code>), we want to grab
<a href="https://github.com/llvm-mirror/clang-tools-extra/blob/master/clang-tidy/tool/run-clang-tidy.py">this helper script, run-clang-tidy.py</a>
to help analyze all this code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -O https://raw.githubusercontent.com/llvm-mirror/clang-tools-extra/master/clang-tidy/tool/run-clang-tidy.py
</span></code></pre></td></tr></table></div></figure>


<p>Then we can run it from the same directory as compile_commands.json:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>python run-clang-tidy.py <span class="se">\</span>
</span><span class='line'>  -clang-tidy-binary /usr/bin/clang-tidy-4.0 <span class="se">\</span>
</span><span class='line'>  &gt; clang_tidy_output.txt
</span></code></pre></td></tr></table></div></figure>


<p>This took about 1hr12min on my box. Let&rsquo;s see what the damage is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  linux git:<span class="o">(</span>nick<span class="o">)</span> ✗ cat clang_tidy_output.txt <span class="se">\</span>
</span><span class='line'>  | grep warning: | grep -oE <span class="s1">&#39;[^ ]+$&#39;</span> | sort | uniq -c
</span><span class='line'>
</span><span class='line'>     76 <span class="o">[</span>clang-analyzer-core.CallAndMessage<span class="o">]</span>
</span><span class='line'>     15 <span class="o">[</span>clang-analyzer-core.DivideZero<span class="o">]</span>
</span><span class='line'>      1 <span class="o">[</span>clang-analyzer-core.NonNullParamChecker<span class="o">]</span>
</span><span class='line'>    316 <span class="o">[</span>clang-analyzer-core.NullDereference<span class="o">]</span>
</span><span class='line'>     90 <span class="o">[</span>clang-analyzer-core.UndefinedBinaryOperatorResult<span class="o">]</span>
</span><span class='line'>      1 <span class="o">[</span>clang-analyzer-core.uninitialized.ArraySubscript<span class="o">]</span>
</span><span class='line'>   1410 <span class="o">[</span>clang-analyzer-core.uninitialized.Assign<span class="o">]</span>
</span><span class='line'>     10 <span class="o">[</span>clang-analyzer-core.uninitialized.Branch<span class="o">]</span>
</span><span class='line'>      5 <span class="o">[</span>clang-analyzer-core.uninitialized.UndefReturn<span class="o">]</span>
</span><span class='line'>     11 <span class="o">[</span>clang-analyzer-cplusplus.NewDeleteLeaks<span class="o">]</span>
</span><span class='line'>    694 <span class="o">[</span>clang-analyzer-deadcode.DeadStores<span class="o">]</span>
</span><span class='line'>    342 <span class="o">[</span>clang-analyzer-security.insecureAPI.strcpy<span class="o">]</span>
</span><span class='line'>      2 <span class="o">[</span>clang-analyzer-unix.API<span class="o">]</span>
</span><span class='line'>     11 <span class="o">[</span>clang-analyzer-unix.Malloc<span class="o">]</span>
</span><span class='line'>      4 <span class="o">[</span>clang-diagnostic-address-of-packed-member<span class="o">]</span>
</span><span class='line'>      2 <span class="o">[</span>clang-diagnostic-duplicate-decl-specifier<span class="o">]</span>
</span><span class='line'>     98 <span class="o">[</span>clang-diagnostic-implicit-int<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking through the output, there&rsquo;s seems to be almost nothing but false
positives, but who knows, maybe there&rsquo;s an actual bug or two in there.  Likely
possible patches to LLVM, its checkers, or the Linux kernel could lower the
false positive ratio.</p>

<p>If you&rsquo;re interested in seeing the kinds of warnings/outputs, I&rsquo;ve uploaded my
results run on a 4.12-rc3 based kernel that may or may not have been compiled
with Clang to
<a href="https://github.com/nickdesaulniers/linux/blob/clang_tidy/clang_tidy_output.txt.v2">my clang_tidy branch of the kernel on GitHub</a>.
As in my sorted output, I find it handy to <code>grep</code> for <code>warning:</code>. Maybe you can
find yourself a good first bug to
<a href="blog/2017/05/16/submitting-your-first-patch-to-the-linux-kernel-and-responding-to-feedback/">contribute a fix to the kernel</a>?</p>

<p>There&rsquo;s likely also
<a href="http://clang.llvm.org/extra/clang-tidy/checks/list.html">some checks that make sense to disable or enable</a>.
Clang-Tidy also allows you to
<a href="http://clang.llvm.org/extra/clang-tidy/#writing-a-clang-tidy-check">write and use your own checkers</a>.
Who knows, someone may just end up writing static
analyses tailored to the Linux kernel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Submitting Your First Patch to the Linux kernel and Responding to Feedback]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2017/05/16/submitting-your-first-patch-to-the-linux-kernel-and-responding-to-feedback/"/>
    <updated>2017-05-16T01:02:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2017/05/16/submitting-your-first-patch-to-the-linux-kernel-and-responding-to-feedback</id>
    <content type="html"><![CDATA[<p>After working on the Linux kernel for Nexus and Pixel phones for nearly a year,
and messing around with the
excellent <a href="http://eudyptula-challenge.org/">Eudyptula challenge</a>, I finally
wanted to take a crack at submitting patches upstream to the Linux kernel.</p>

<p>This post is woefully inadequate compared to the existing documentation, which
should be preferred.</p>

<ul>
<li><a href="http://elixir.free-electrons.com/linux/latest/source/Documentation/process">http://elixir.free-electrons.com/linux/latest/source/Documentation/process</a></li>
<li><a href="https://kernelnewbies.org/FirstKernelPatch">https://kernelnewbies.org/FirstKernelPatch</a></li>
</ul>


<p>I figure I’d document my workflow, now that I’ve gotten a few patches accepted
(and so I can refer to this post rather than my shell history&hellip;).  Feedback
welcome
(<a href="https://github.com/nickdesaulniers/nickdesaulniers.github.com/issues">open an issue</a>
or email me).</p>

<h2>Step 1: Setting up an email client</h2>

<p>I mostly use <code>git send-email</code> for sending patch files.  In my <code>~/.gitconfig</code> I
have added:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[sendemail]</span>
</span><span class='line'>  <span class="c1">; setup for using git send-email; prompts for password</span>
</span><span class='line'>  <span class="na">smtpuser</span> <span class="o">=</span> <span class="s">myemailaddr@gmail.com</span>
</span><span class='line'><span class="s">  smtpserver = smtp.googlemail.com</span>
</span><span class='line'><span class="s">  smtpencryption = tls</span>
</span><span class='line'><span class="s">  smtpserverport = 587</span>
</span></code></pre></td></tr></table></div></figure>


<p>To send patches through my gmail account.  I don’t add my password so that I
don’t have to worry about it when I publish my dotfiles.  I simply get prompted
every time I want to send an email.</p>

<p>I use
<a href="https://nickdesaulniers.github.io/blog/2016/06/18/mutt-gmail-ubuntu/">mutt</a>
to respond to threads when I <em>don&rsquo;t</em> have a patch to send.</p>

<h2>Step 2: Make fixes</h2>

<p>How do you find a bug to fix?  My general approach to finding bugs in open
source C/C++ code bases has been using static analysis, a different compiler,
and/or more compiler warnings turned on.  The kernel also has an instance of
<a href="https://bugzilla.kernel.org/describecomponents.cgi">bugzilla</a>
running as an issue tracker.  Work out of a new branch, in case you choose to
abandon it later.  Rebase your branch before submitting (pull early, pull
often).</p>

<h2>Step 3: Thoughtful commit messages</h2>

<p>I always run <code>git log &lt;file I modified&gt;</code> to see some of the previous commit
messages on the file I modified.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git log arch/x86/Makefile
</span><span class='line'>
</span><span class='line'>commit a5859c6d7b6114fc0e52be40f7b0f5451c4aba93
</span><span class='line'>...
</span><span class='line'>    x86/build: convert <span class="k">function </span>graph <span class="s1">&#39;-Os&#39;</span> error to warning
</span><span class='line'>commit 3f135e57a4f76d24ae8d8a490314331f0ced40c5
</span><span class='line'>...
</span><span class='line'>    x86/build: Mostly disable <span class="s1">&#39;-maccumulate-outgoing-args&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first words of commit messages in Linux are usually
<code>&lt;subsystem&gt;/&lt;sub-subsystem&gt;: &lt;descriptive comment&gt;</code>.</p>

<p>Let’s commit, <code>git commit &lt;files&gt; -s</code>.  We use the <code>-s</code> flag to <code>git commit</code> to
add our signoff.  Signing your patches is standard and notes your agreement to
the
<a href="https://ltsi.linuxfoundation.org/developers/signed-process">Linux Kernel Certificate of Origin</a>.</p>

<h2>Step 4: Generate Patch file</h2>

<p><code>git format-patch HEAD~</code>.  You can use <code>git format-patch HEAD~&lt;number of
commits to convert to patches&gt;</code> to turn multiple commits into patch files.
These patch files will be emailed to the
<a href="https://lkml.org/">Linux Kernel Mailing List (lkml)</a>.
They can be applied with <code>git am &lt;patchfile&gt;</code>.  I like to back these files up
in another directory for future reference, and cause I still make a lot of
mistakes with git.</p>

<h2>Step 5: checkpatch</h2>

<p>You’re going to want to run the kernel’s linter before submitting.  It will
catch style issues and other potential issues.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./scripts/checkpatch.pl 0001-x86-build-don-t-add-maccumulate-outgoing-args-w-o-co.patch
</span><span class='line'>total: 0 errors, 0 warnings, 9 lines checked
</span><span class='line'>
</span><span class='line'>0001-x86-build-don-t-add-maccumulate-outgoing-args-w-o-co.patch has no obvious style problems and is ready <span class="k">for </span>submission.
</span></code></pre></td></tr></table></div></figure>


<p>If you hit issues here, fix up your changes, update your commit with <code>git
commit --amend &lt;files updated&gt;</code>, rerun format-patch, then rerun checkpatch
until you’re good to go.</p>

<h2>Step 6: email the patch to yourself</h2>

<p>This is good to do when you’re starting off.  While I use
<a href="https://nickdesaulniers.github.io/blog/2016/06/18/mutt-gmail-ubuntu/">mutt</a>
for responding to email, I use <code>git send-email</code> for sending patches.  Once
you’ve gotten a hang of the workflow, this step is optional, more of a sanity
check.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git send-email <span class="se">\</span>
</span><span class='line'>0001-x86-build-require-only-gcc-use-maccumulate-outgoing-.patch
</span></code></pre></td></tr></table></div></figure>


<p>You don’t need to use command line arguments to cc yourself, assuming you set
up git correctly, git send-email should add you to the cc line as the author of
the patch.  Send the patch just to yourself and make sure everything looks ok.</p>

<h2>Step 7: fire off the patch</h2>

<p>Linux is huge, and has a trusted set of maintainers for various subsystems.
The
<a href="http://elixir.free-electrons.com/linux/latest/source/MAINTAINERS">MAINTAINERS file</a>
keeps track of these, but Linux has a tool to help you figure out where to send
your patch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./scripts/get_maintainer.pl 0001-x86-build-don-t-add-maccumulate-outgoing-args-w-o-co.patch
</span><span class='line'>Person A &lt;person@a.com&gt; <span class="o">(</span>maintainer:X86 ARCHITECTURE <span class="o">(</span>32-BIT AND 64-BIT<span class="o">))</span>
</span><span class='line'>Person B &lt;person@b.com&gt; <span class="o">(</span>maintainer:X86 ARCHITECTURE <span class="o">(</span>32-BIT AND 64-BIT<span class="o">))</span>
</span><span class='line'>Person C &lt;person@c.com&gt; <span class="o">(</span>maintainer:X86 ARCHITECTURE <span class="o">(</span>32-BIT AND 64-BIT<span class="o">))</span>
</span><span class='line'>x86@kernel.org <span class="o">(</span>maintainer:X86 ARCHITECTURE <span class="o">(</span>32-BIT AND 64-BIT<span class="o">))</span>
</span><span class='line'>linux-kernel@vger.kernel.org <span class="o">(</span>open list:X86 ARCHITECTURE <span class="o">(</span>32-BIT AND 64-BIT<span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>With some additional flags, we can feed this output directly into
<code>git send-email</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git send-email <span class="se">\</span>
</span><span class='line'>--cc-cmd<span class="o">=</span><span class="s1">&#39;./scripts/get_maintainer.pl --norolestats 0001-my.patch&#39;</span> <span class="se">\</span>
</span><span class='line'>--cc person@a.com <span class="se">\</span>
</span><span class='line'>0001-my.patch
</span></code></pre></td></tr></table></div></figure>


<p>Make sure to cc yourself when prompted.  Otherwise if you don’t subscribe to
LKML, then it will be difficult to reply to feedback.  It’s also a good idea to
cc any other author that has touched this functionality recently.</p>

<h2>Step 8: monitor feedback</h2>

<p><a href="https://patchwork.kernel.org/project/LKML/list/">Patchwork</a>
for the LKML is a great tool for tracking the progress of patches.  You should
register an account there.   I highly recommend bookmarking your submitter
link.  In Patchwork, click any submitter, then Filters (hidden in the top
left), change submitter to your name, click apply, then bookmark it.
<a href="https://patchwork.kernel.org/project/LKML/list/?submitter=Nick+Desaulniers">Here’s what mine looks like</a>.
Not much today, and mostly trivial patches, but hopefully this post won’t age
well in that regard.</p>

<p>Feedback may or may not be swift.  I think my first patch I had to ping a
couple of times, but eventually got a response.</p>

<h2>Step 9: responding to feedback</h2>

<p>Update your file, <code>git commit &lt;changed files&gt; --amend</code> to update your latest
commit, <code>git format-patch -v2 HEAD~</code>, edit the patch
file to put the changes below the dash below the signed off lines
(<a href="https://patchwork.kernel.org/patch/9720097/">example</a>), rerun checkpatch,
rerun get_maintainer if the files you modified changed since V1.  Next, you
need to find the messageID to respond to the thread properly.</p>

<p>In gmail, when viewing the message I want to respond to, you can click “Show
Original” from the dropdown near the reply button.  From there, copy the
MessageID from the top (everything in the angle brackets, but not the brackets
themselves).  Finally, we send the patch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git send-email <span class="se">\</span>
</span><span class='line'>--cc-cmd<span class="o">=</span><span class="s1">&#39;./scripts/get_maintainer.pl --norolestats 0001-my.patch&#39;</span> <span class="se">\</span>
</span><span class='line'>--cc person@a.com <span class="se">\</span>
</span><span class='line'>--in-reply-to 2017datesandletters@somehostname <span class="se">\</span>
</span><span class='line'>0001-my.patch
</span></code></pre></td></tr></table></div></figure>


<p>We make sure to add anyone who may have commented on the patch from the mailing
list to keep them in the loop.  Rinse and repeat 2 through 9 as desired until
patch is signed off/acked or rejected.</p>

<p>I&rsquo;ve added this handy shell function to my <code>~/.zshrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">function </span>kpatch <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">patch</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>  <span class="nb">shift</span>
</span><span class='line'><span class="nb">  </span>git send-email <span class="se">\</span>
</span><span class='line'>    --cc-cmd<span class="o">=</span><span class="s2">&quot;./scripts/get_maintainer.pl --norolestats $patch&quot;</span> <span class="se">\</span>
</span><span class='line'>    <span class="nv">$@</span> <span class="nv">$patch</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That I can then invoke like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>kpatch 0001-Input-mousedev-fix-implicit-conversion-warning.patch --cc anyone@else.com
</span></code></pre></td></tr></table></div></figure>


<p>where <code>anyone@else.com</code> is anyone I want to add in additon to what
<code>get_maintainer</code> sugguests.</p>

<p>Finding out when your patch gets merged is a little tricky; each subsystem
maintainer seems to do things differently.  My first patch, I didn’t know it
went in until a bot at Google notified me.  The maintainers for the second and
third patches had bots notify me that it got merged into their trees, but when
they send Linus a PR and when that gets merged isn’t immediately obvious.</p>

<p>It’s not like Github where everyone involved gets an email that a PR got merged
and the UI changes.  While there’s pros and cons to having this fairly
decentralized process, and while it is kind of is git’s original designed-for
use case, I’d be remiss not to mention that I really miss Github.  Getting your
first patch acknowledged and even merged is
<a href="https://github.com/nickdesaulniers/What-Open-Source-Means-To-Me#what-open-source-means-to-me">intoxicating and makes you want to contribute more</a>;
radio silence has the opposite effect.</p>

<p>Happy hacking!</p>

<p>(Thanks to Reddit user /u/EliteTK for pointing out that <code>-v2</code> was more concise
than <code>--subject-prefix="Patch vX"</code>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Static and Dynamic Libraries]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/11/20/static-and-dynamic-libraries/"/>
    <updated>2016-11-20T23:55:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/11/20/static-and-dynamic-libraries</id>
    <content type="html"><![CDATA[<p>This is the second post in a series on memory segmentation.  It covers working
with static and dynamic libraries in Linux and OSX.  Make sure to check out the
<a href="http://nickdesaulniers.github.io/blog/2016/08/13/object-files-and-symbols/">first on object files and symbols</a>.</p>

<p>Let’s say we wanted to reuse some of the code from our previous project in our
next one.  We could continue to copy around object files, but let’s say we have
a bunch and it’s hard to keep track of all of them.  Let’s combine multiple
object files into an archive or static library.  Similar to a more conventional
zip file or &ldquo;compressed archive,&rdquo; our static library will be an uncompressed
archive.</p>

<p>We can use the <code>ar</code> command to create and manipulate a static archive.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang -c x.c y.c
</span><span class='line'><span class="nv">$ </span>ar -rv libhello.a x.o y.o
</span></code></pre></td></tr></table></div></figure>


<p>The <code>-r</code> flag will create the archive named <code>libhello.a</code> and add the files
<code>x.o</code> and <code>y.o</code> to its index.  I like to add the <code>-v</code> flag for verbose output.
Then we can use the familiar <code>nm</code> tool I introduced in the
<a href="http://nickdesaulniers.github.io/blog/2016/08/13/object-files-and-symbols/">previous post</a>
to examine the content of the archives and their symbols.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file libhello.a
</span><span class='line'>libhello.a: current ar archive random library
</span><span class='line'><span class="nv">$ </span>nm libhello.a
</span><span class='line'>libhello.a<span class="o">(</span>x.o<span class="o">)</span>:
</span><span class='line'>                 U _puts
</span><span class='line'>0000000000000000 T _x
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>libhello.a<span class="o">(</span>y.o<span class="o">)</span>:
</span><span class='line'>                 U _puts
</span><span class='line'>0000000000000000 T _y
</span></code></pre></td></tr></table></div></figure>


<p>Some other useful flags for <code>ar</code> are <code>-d</code> to delete an object file, ex. <code>ar -d
libhello.a y.o</code> and <code>-u</code> to update existing members of the archive when their
source and object files are updated.  Not only can we run <code>nm</code> on our archive,
<code>otool</code> and <code>objdump</code> both work.</p>

<p>Now that we have our static library, we can statically link it to our program
and see the resulting symbols.  The <code>.a</code> suffix is typical on both OSX and
Linux for archive files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang main.o libhello.a
</span><span class='line'><span class="nv">$ </span>nm a.out
</span><span class='line'>0000000100000f30 T _main
</span><span class='line'>                 U _puts
</span><span class='line'>0000000100000f50 T _x
</span><span class='line'>0000000100000f70 T _y
</span></code></pre></td></tr></table></div></figure>


<p>Our compiler understands how to index into archive files and pull out the
functions it needs to combine into the final executable.  If we use a static
library to statically link all functions required, we can have one binary with
no dependencies.  This can make deployment of binaries simple, but also greatly
increase their size.  Upgrading large binaries incrementally becomes more
costly in terms of space.</p>

<p>While static libraries allowed us to reuse source code, static linkage does not
allow us to reuse memory for executable code between different processes.  I
really want to put off talking about memory benefits until the next post, but
know that the solution to this problem lies in &ldquo;dynamic libraries.&rdquo;</p>

<p>While having a single binary file keeps things simple, it can really hamper
memory sharing and incremental relinking.  For example, if you have multiple
executables that are all built with the same static library, unless your OS is
really smart about copy-on-write page sharing, then you’re likely loading
multiple copies of the same exact code into memory! What a waste!  Also, when
you want to rebuild or update your binary, you spend time performing relocation
again and again with static libraries.  What if we could set aside object files
that we could share amongst multiple instances of the same or even different
processes, and perform relocation at runtime?</p>

<p>The solution is known as dynamic libraries.  If static libraries and static
linkage were Atari controllers, dynamic libraries and dynamic linkage are Steel
Battalion controllers.  We’ll show how to work with them in the rest of this
post, but I’ll prove how memory is saved in a later post.</p>

<p>Let’s say we want to created a shared version of libhello.  Dynamic libraries
typically have different suffixes per OS since each OS has it’s preferred
object file format.  On Linux the .so suffix is common, .dylib on OSX, and .dll
on Windows.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang -shared -fpic x.c y.c -o libhello.dylib
</span><span class='line'><span class="nv">$ </span>file libhello.dylib
</span><span class='line'>libhello.dylib: Mach-O 64-bit dynamically linked shared library x86_64
</span><span class='line'><span class="nv">$ </span>nm libhello.dylib
</span><span class='line'>                 U _puts
</span><span class='line'>0000000000000f50 T _x
</span><span class='line'>0000000000000f70 T _y
</span></code></pre></td></tr></table></div></figure>


<p>The <code>-shared</code> flag tells the linker to create a special file called a shared
library.  The <code>-fpic</code> option converts absolute addresses to relative addresses,
which allows for different processes to load the library at different virtual
addresses and share memory.</p>

<p>Now that we have our shared library, let’s dynamically link it into our
executable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang main.c libhello.dylib
</span><span class='line'><span class="nv">$ </span>./a.out
</span><span class='line'>x
</span><span class='line'>y
</span></code></pre></td></tr></table></div></figure>


<p>The dynamic linker essential produces an incomplete binary.  You can verify
with <code>nm</code>.  At runtime, we’ll delay start up to perform some memory mapping
early on in the process start (performed by the dynamic linker) and pay slight
costs for trampolining into position independent code.</p>

<p>Let’s say we want to know what dynamic libraries a binary is using.  You can
either query the executable (most executable object file formats contain a
header the dynamic linker will parse and pull in libs) or observe the
executable while running it.  Because each major OS has its own object file
format, they each have their own tools for these two checks.  Note that
statically linked libraries won’t show up here, since their object code has
already been linked in and thus we’re not able to differentiate between object
code that came from our first party code vs third party static libraries.</p>

<p>On OSX, we can use <code>otool -L &lt;bin&gt;</code> to check which .dylibs will get pulled in.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>otool -L a.out
</span><span class='line'>a.out:
</span><span class='line'>           libhello.dylib <span class="o">(</span>compatibility version 0.0.0, current version 0.0.0<span class="o">)</span>
</span><span class='line'>           /usr/lib/libSystem.B.dylib <span class="o">(</span>compatibility version 1.0.0, current version 1226.10.1<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we can see that <code>a.out</code> depends on <code>libhello.dylib</code> (and expects to find it
in the same directory as <code>a.out</code>).  It also depends on shared library called
libSystem.B.dylib.  If you run <code>otool -L</code> on libSystem itself, you’ll see it
depends on a bunch of other libraries including a C runtime, malloc
implementation, pthreads implementation, and more.  Let’s say you want to find
the final resting place of where a symbol is defined, without digging with <code>nm</code>
and <code>otool</code>, you can fire up your trusty debugger and ask it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lldb a.out
</span><span class='line'>...
</span><span class='line'><span class="o">(</span>lldb<span class="o">)</span> image lookup -r -s puts
</span><span class='line'>...
</span><span class='line'>        Summary: libsystem_c.dylib<span class="sb">`</span>puts        Address: libsystem_c.dylib<span class="o">[</span>0x0000000000085c30<span class="o">]</span> <span class="o">(</span>libsystem_c.dylib.__TEXT.__stubs + 3216<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You’ll see a lot of output since <code>puts</code> is treated as a regex.  You’re looking
for the Summary line that has an address and is <strong>not</strong> a symbol stub.  You can
then check your work with <code>otool</code> and <code>nm</code>.</p>

<p>If we want to observe the dynamic linker in action on OSX, we can use <code>dtruss</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo dtruss ./a.out
</span><span class='line'>...
</span><span class='line'>stat64<span class="o">(</span><span class="s2">&quot;libhello.dylib\0&quot;</span>, 0x7FFF50CEAC68, 0x1<span class="o">)</span>         <span class="o">=</span> 0 0
</span><span class='line'>open<span class="o">(</span><span class="s2">&quot;libhello.dylib\0&quot;</span>, 0x0, 0x0<span class="o">)</span>              <span class="o">=</span> 3 0
</span><span class='line'>...
</span><span class='line'>mmap<span class="o">(</span>0x10EF27000, 0x1000, 0x5, 0x12, 0x3, 0x0<span class="o">)</span>          <span class="o">=</span> 0x10EF27000 0
</span><span class='line'>mmap<span class="o">(</span>0x10EF28000, 0x1000, 0x3, 0x12, 0x3, 0x1000<span class="o">)</span>               <span class="o">=</span> 0x10EF28000 0
</span><span class='line'>mmap<span class="o">(</span>0x10EF29000, 0xC0, 0x1, 0x12, 0x3, 0x2000<span class="o">)</span>         <span class="o">=</span> 0x10EF29000 0
</span><span class='line'>...
</span><span class='line'>close<span class="o">(</span>0x3<span class="o">)</span>              <span class="o">=</span> 0 0
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>On Linux, we can simply use <code>ldd</code> or <code>readelf -d</code> to query an executable for a
list of its dynamic libraries.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang -shared -fpic x.c y.c -o libhello.so
</span><span class='line'><span class="nv">$ </span>clang main.c libhello.so
</span><span class='line'><span class="nv">$ </span>ldd a.out
</span><span class='line'>           linux-vdso.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0x00007fff95d43000<span class="o">)</span>
</span><span class='line'>           libhello.so <span class="o">=</span>&gt; not found
</span><span class='line'>           libc.so.6 <span class="o">=</span>&gt; /lib/x86_64-linux-gnu/libc.so.6 <span class="o">(</span>0x00007fcc98c5f000<span class="o">)</span>
</span><span class='line'>           /lib64/ld-linux-x86-64.so.2 <span class="o">(</span>0x0000555993852000<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>readelf -d a.out
</span><span class='line'>Dynamic section at offset 0xe18 contains 25 entries:
</span><span class='line'>  Tag        Type                         Name/Value
</span><span class='line'> 0x0000000000000001 <span class="o">(</span>NEEDED<span class="o">)</span>             Shared library: <span class="o">[</span>libhello.so<span class="o">]</span>
</span><span class='line'> 0x0000000000000001 <span class="o">(</span>NEEDED<span class="o">)</span>             Shared library: <span class="o">[</span>libc.so.6<span class="o">]</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>We can then use <code>strace</code> to observe the dynamic linker in action on Linux:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ LD_LIBRARY_PATH</span><span class="o">=</span>. strace ./a.out
</span><span class='line'>...
</span><span class='line'>open<span class="o">(</span><span class="s2">&quot;./libhello.so&quot;</span>, O_RDONLY|O_CLOEXEC<span class="o">)</span> <span class="o">=</span> 3
</span><span class='line'>...
</span><span class='line'><span class="nb">read</span><span class="o">(</span>3, <span class="s2">&quot;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\260\5\0\0\0\0\0\0&quot;</span>..., 832<span class="o">)</span> <span class="o">=</span> 832
</span><span class='line'>fstat<span class="o">(</span>3, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG|0755, <span class="nv">st_size</span><span class="o">=</span>8216, ...<span class="o">})</span> <span class="o">=</span> 0
</span><span class='line'>close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> 0
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>What’s this <code>LD_LIBRARY_PATH</code> thing?  That’s shell syntax for setting an
environmental variable just for the duration of that command (as opposed to
exporting it so it stays set for multiple commands).  As opposed to OSX’s
dynamic linker, which was happy to look in the cwd for libhello.dylib, on Linux
we must supply the cwd if the dynamic library we want to link in is not in the
standard search path.</p>

<p>But what is the standard search path?  Well, there’s another environmental
variable we can set to see this, <code>LD_DEBUG</code>.  For example, on OSX:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ LD_DEBUG</span><span class="o">=</span>libs <span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>. ./a.out
</span><span class='line'>     15828:        find <span class="nv">library</span><span class="o">=</span>libhello.so <span class="o">[</span>0<span class="o">]</span>; searching
</span><span class='line'>     15828:         search <span class="nv">path</span><span class="o">=</span>./tls/x86_64:./tls:./x86_64:.             <span class="o">(</span>LD_LIBRARY_PATH<span class="o">)</span>
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>./tls/x86_64/libhello.so
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>./tls/libhello.so
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>./x86_64/libhello.so
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>./libhello.so
</span><span class='line'>     15828:
</span><span class='line'>     15828:        find <span class="nv">library</span><span class="o">=</span>libc.so.6 <span class="o">[</span>0<span class="o">]</span>; searching
</span><span class='line'>     15828:         search <span class="nv">path</span><span class="o">=</span>./tls/x86_64:./tls:./x86_64:.             <span class="o">(</span>LD_LIBRARY_PATH<span class="o">)</span>
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>./tls/x86_64/libc.so.6
</span><span class='line'>     1earc:          trying <span class="nv">file</span><span class="o">=</span>./tls/libc.so.6
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>./x86_64/libc.so.6
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>./libc.so.6
</span><span class='line'>     15828:         search <span class="nv">cache</span><span class="o">=</span>/etc/ld.so.cache
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>/lib/x86_64-linux-gnu/libc.so.6
</span><span class='line'>     15828:        calling init: /lib/x86_64-linux-gnu/libc.so.6
</span><span class='line'>     15828:        calling init: ./libhello.so
</span><span class='line'>     15828:        initialize program: ./a.out
</span><span class='line'>     15828:        transferring control: ./a.out
</span><span class='line'>x
</span><span class='line'>y
</span><span class='line'>     15828:        calling fini: ./a.out <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>     15828:        calling fini: ./libhello.so <span class="o">[</span>0<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>LD_DEBUG</code> is pretty useful.  Try:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ LD_DEBUG</span><span class="o">=</span><span class="nb">help</span> ./a.out
</span><span class='line'>Valid options <span class="k">for </span>the LD_DEBUG environment variable are:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  libs        display library search paths
</span><span class='line'>  reloc       display relocation processing
</span><span class='line'>  files       display progress <span class="k">for </span>input file
</span><span class='line'>  symbols     display symbol table processing
</span><span class='line'>  bindings    display information about symbol binding
</span><span class='line'>  versions    display version dependencies
</span><span class='line'>  scopes      display scope information
</span><span class='line'>  all         all previous options combined
</span><span class='line'>  statistics  display relocation statistics
</span><span class='line'>  unused      determined unused DSOs
</span><span class='line'>  <span class="nb">help        </span>display this <span class="nb">help </span>message and <span class="nb">exit</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>To direct the debugging output into a file instead of standard output
</span><span class='line'>a filename can be specified using the LD_DEBUG_OUTPUT environment variable.
</span></code></pre></td></tr></table></div></figure>


<p>For some cool stuff, I recommend checking out <code>LD_DEBUG=symbols</code> and
<code>LD_DEBUG=statistics</code>.</p>

<p>Going back to <code>LD_LIBRARY_PATH</code>, usually libraries you create and want to reuse
between projects go into /usr/local/lib and the headers into
/usr/local/include.  I think of the convention as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>tree -L 2 /usr/
</span><span class='line'>/usr
</span><span class='line'>├── bin <span class="c"># system installed binaries like nm, gcc</span>
</span><span class='line'>├── include <span class="c"># system installed headers like stdio.h</span>
</span><span class='line'>├── lib <span class="c"># system installed libraries, both static and dynamic</span>
</span><span class='line'>└── <span class="nb">local</span>
</span><span class='line'>    ├── bin <span class="c"># user installed binaries like rustc</span>
</span><span class='line'>    ├── include <span class="c"># user installed headers</span>
</span><span class='line'>    └── lib <span class="c"># user installed</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, it’s a loose convention that’s broken down over the years and
things are scattered all over the place.  You can also run into dependency and
versioning issues, that I don’t want to get into here, by placing libraries
here instead of keeping them in-tree or out-of-tree of the source code of a
project.  Just know when you see a library like <code>libc.so.6</code> that the numeric
suffix is a major version number that follows semantic versioning.  For more
information, you should read Michael Kerrisk’s excellent book <em>The Linux
Programming Interface</em>.  This post is based on his chapter’s 41 &amp; 42 (but with
more info on tooling and OSX).</p>

<p>If we were to place our libhello.so into /usr/local/lib (on Linux you need to
then run <code>sudo ldconfig</code>) and move x.h and y.h to /usr/local/include, then we
could then compile with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang main.c -lhello
</span></code></pre></td></tr></table></div></figure>


<p>Note that rather than give a full path to our library, we can use the <code>-l</code> flag
followed by the name of our library with the lib prefix and .so suffix removed.</p>

<p>When working with shared libraries and external code, three flags I use pretty
often:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>* -l&lt;libname to link, no lib prefix or file extension; ex: -lnanomsg to link libnanomsg.so&gt;
</span><span class='line'>* -L &lt;path to search <span class="k">for </span>lib <span class="k">if </span>in non standard directory&gt;
</span><span class='line'>* -I &lt;path to headers <span class="k">for </span>that library, <span class="k">if </span>in non standard directory&gt;
</span></code></pre></td></tr></table></div></figure>


<p>For finding specific flags needed for compilation where dynamic linkage is
required, a tool called <code>pkg-config</code> can be used for finding appropriate flags.
I’ve had less than stellar experiences with the tool as it puts the onus on the
library author to maintain the .pc files, and the user to have them installed
in the right place that <code>pkg-config</code> looks.  When they do exist and are
installed properly, the tool works well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-get install libpng12-dev
</span><span class='line'><span class="nv">$ </span>pkg-config --libs --cflags libpng12
</span><span class='line'>-I/usr/include/libpng12  -lpng12
</span><span class='line'><span class="nv">$ </span>clang program.c <span class="sb">`</span>!!<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using another neat environmental variable, we can hook into the dynamic linkage
process and inject our own shared libraries to be linked instead of the
expected libraries.  Let’s say libgood.so and libmalicous.so both define a
symbol for a function (the same symbol name and function signature).  We can
get a binary that links in libgood.so’s function to instead call
libmalicous.so’s version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./a.out
</span><span class='line'>hello from libgood
</span><span class='line'><span class="nv">$ LD_PRELOAD</span><span class="o">=</span>./libmalicious.so ./a.out
</span><span class='line'>hello from libmalicious
</span></code></pre></td></tr></table></div></figure>


<p>LD_PRELOAD is not available on OSX, instead you can use
<code>DYLD_INSERT_LIBRARIES</code>, <code>DYLD_LIBRARY_PATH</code>, and recompile the original
executable with <code>-flat_namespace</code>. Having to recompile the original executable
is less than ideal for hooking an existing binary, but I could not hook libc
as in the previous libmalicious example.  I would be interested to know if you
can though!</p>

<p>Manually invoking the dynamic linker from our code,
<a href="https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/">we can even man in the middle library calls (call our hooked function first, then invoke the original target)</a>.
We’ll see more of this in the next post on using the dynamic linker.</p>

<p>As you can guess, readjusting the search paths for dynamic libraries is a
security concern as it let’s good and bad folks change the expected execution
paths.  Guarding against the use of these env vars becomes a rabbit hole that
gets pretty tricky to solve without the heavy handed use of statically linking
dependencies.</p>

<p>In the the previous post, I alluded to undefined symbols like <code>puts</code>.  <code>puts</code>
is part of libc, which is probably the most shared dynamic library on most
computing devices since most every program makes use of the C runtime.  (I
think of a “runtime” as implicit code that runs in your program that you didn’t
necessarily write yourself.  Usually a runtime is provided as a library that
gets implicitly linked into your executable when you compile.)  You can
statically link against libc with the <code>-static</code> flag, on Linux at least (OSX
makes this difficult,
<a href="https://developer.apple.com/library/content/qa/qa1118/_index.html">&ldquo;Apple does not support statically linked binaries on Mac OS X&rdquo;</a>).</p>

<p>I’m not sure what the benefit would be to mixing static and dynamic linking,
but after searching the search paths from LD_DEBUG=libs for shared versions of
a library, if any static ones are found, they will get linked in.</p>

<p>There’s also an interesting form of library called a &ldquo;virtual dynamic shared
object&rdquo; on Linux.  I haven’t covered memory mapping yet, but know it exists, is
usually hidden for libc, and that you can read more about it via <code>man 7 vdso</code>.</p>

<p>One thing I find interesting and don’t quite understand how to recreate is that
somehow glibc on Linux is also executable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>/lib/x86_64-linux-gnu/libc.so.6
</span><span class='line'>GNU C Library <span class="o">(</span>Ubuntu GLIBC 2.24-3ubuntu1<span class="o">)</span> stable release version 2.24, by Roland McGrath et al.
</span><span class='line'>Copyright <span class="o">(</span>C<span class="o">)</span> 2016 Free Software Foundation, Inc.
</span><span class='line'>This is free software; see the <span class="nb">source </span><span class="k">for </span>copying conditions.
</span><span class='line'>There is NO warranty; not even <span class="k">for </span>MERCHANTABILITY or FITNESS FOR A
</span><span class='line'>PARTICULAR PURPOSE.
</span><span class='line'>Compiled by GNU CC version 6.2.0 20161005.
</span><span class='line'>Available extensions:
</span><span class='line'>    crypt add-on version 2.1 by Michael Glad and others
</span><span class='line'>    GNU Libidn by Simon Josefsson
</span><span class='line'>    Native POSIX Threads Library by Ulrich Drepper et al
</span><span class='line'>    BIND-8.2.3-T5B
</span><span class='line'>libc ABIs: UNIQUE IFUNC
</span><span class='line'>For bug reporting instructions, please see:
</span><span class='line'>&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.
</span></code></pre></td></tr></table></div></figure>


<p>Also, note that linking against third party code has licensing implications (of
course) of particular interest when it’s GPL or LGPL.
<a href="http://stackoverflow.com/a/10179181/1027966">Here is a good overview</a>
which I’d summarize as: code that <em>statically</em> links against LGPL code must
also be LGPL, while any form of linkage against GPL code must be GPL’d.</p>

<p>Ok, that was a lot. In the previous post, we covered
<a href="http://nickdesaulniers.github.io/blog/2016/08/13/object-files-and-symbols/">Object Files and Symbols</a>.
In this post we covered hacking around with static and dynamic linkage.  In the
next post, I hope to talk about manually invoking the dynamic linker at
runtime.</p>

<ul>
<li><a href="http://nickdesaulniers.github.io/blog/2016/08/13/object-files-and-symbols/">Part 1 &ndash; Object Files and Symbols</a></li>
<li><a href="http://nickdesaulniers.github.io/blog/2016/11/20/static-and-dynamic-libraries/">Part 2 &ndash; Static and Dynamic Libraries</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Files and Symbols]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/08/13/object-files-and-symbols/"/>
    <updated>2016-08-13T20:46:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/08/13/object-files-and-symbols</id>
    <content type="html"><![CDATA[<p>What was supposed to be one blog post about memory segmentation turned into
what will be a series of posts.  As the first in the series, we cover the
extreme basics of object files and symbols.  In follow up posts, I
plan to talk about
<a href="http://nickdesaulniers.github.io/blog/2016/11/20/static-and-dynamic-libraries/">static libraries, dynamic libraries,</a>
dynamic linkage, memory segments, and finally memory usage accounting.  I also
cover command line tools for working with these notions, both in Linux and OSX.</p>

<p>A quick review of the compilation+execution pipeline (for terminology):</p>

<ol>
<li>Lexing produces tokens</li>
<li>Parsing produces an abstract syntax tree</li>
<li>Analysis produces a code flow graph</li>
<li>Optimization produces a reduced code flow graph</li>
<li>Code gen produces object code</li>
<li>Linkage produces a complete executable</li>
<li>Loader instructs the OS how to start running the executable</li>
</ol>


<p>This series will focus on part #6.</p>

<p>Let&rsquo;s say you have some amazing C/C++ code,  but for separations of concerns,
you want to start moving it out into separate source files.  Whereas previously
in one file you had:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// main.c</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">helper</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;helper&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">helper</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You now have two source files and maybe a header:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// main.c</span>
</span><span class='line'><span class="cp">#include &quot;helper.h&quot;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">helper</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// helper.h</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">helper</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//helper.c</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;helper.h&quot;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">helper</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;helper&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the single source version, we would have compiled and linked that with
<code>clang main.c</code> and had an executable file.  In the multiple source version, we
first compile our source files to object files, then link them altogether.
That can be done separately:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang -c helper.c     <span class="c"># produces helper.o</span>
</span><span class='line'><span class="nv">$ </span>clang -c main.c       <span class="c"># produces main.o</span>
</span><span class='line'><span class="nv">$ </span>clang main.o helper.o <span class="c"># produces a.out</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also do the compilation and linkage in one step:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang helper.c main.c <span class="c"># produces a.out</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing special thus far; C/C++ 101.  In the first case of separate compilation
and linkage steps, we were left with intermediate object files (.o).  What
exactly are these?</p>

<p><a href="https://en.wikipedia.org/wiki/Object_file">Object files</a>
are almost full executables.  They contain machine code, but that code still
requires a relocation step.  It also contains metadata about the addresses of
its variables and functions (called symbols) in an associative data structure
called a
<a href="https://en.wikipedia.org/wiki/Symbol_table">symbol table</a>.
The addresses may not be the final address of the symbol in the final
executable. They also contain some information for the loader and probably some
other stuff.</p>

<p>Remember that if we fail to specify the helper object file, we&rsquo;ll get an
undefined symbol error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang main.c
</span><span class='line'>Undefined symbols <span class="k">for </span>architecture x86_64:
</span><span class='line'>  <span class="s2">&quot;_helper&quot;</span>, referenced from:
</span><span class='line'>      _main in main-459dde.o
</span><span class='line'>ld: symbol<span class="o">(</span>s<span class="o">)</span> not found <span class="k">for </span>architecture x86_64
</span><span class='line'>clang: error: linker <span class="nb">command </span>failed with <span class="nb">exit </span>code 1 <span class="o">(</span>use -v to see invocation<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is main.o refers to some symbol called <code>helper</code>, but on it&rsquo;s own
doesn&rsquo;t contain any more information about it.  Let&rsquo;s say we want to know what
symbols an object file contains, or expects to find elsewhere.  Let&rsquo;s introduce
our first tool, <code>nm</code>.  <code>nm</code> will print the name list or symbol table for a
given object or executable file.  On OSX, these are prefixed with an
underscore.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nm helper.o
</span><span class='line'>0000000000000000 T _helper
</span><span class='line'>                 U _puts
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>nm main.o
</span><span class='line'>                 U _helper
</span><span class='line'>0000000000000000 T _main
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>nm a.out
</span><span class='line'>...
</span><span class='line'>0000000100000f50 T _helper
</span><span class='line'>0000000100000f70 T _main
</span><span class='line'>                 U _puts
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s dissect what&rsquo;s going on here.  The output (as understood by <code>man 1 nm</code>)
is a space separated list of address, type, and symbol name.  We can see that
the addresses are placeholders in object files, and final in executables.  The
name should make sense; it&rsquo;s the name of the function or variable.  While I&rsquo;d
love to get in depth on the various symbol types and talk about sections, I
don&rsquo;t think I could do as great a job as Peter Van Der Linden in his book
&ldquo;Expert C Programming: Deep C Secrets.&rdquo;</p>

<p>For our case, we just care about whether the symbol in a given object file is
defined or not.  The type U (undefined) means that this symbol is referenced or
used in this object code/executable, but it&rsquo;s value wasn&rsquo;t defined here.
When we compiled main.c alone and got the undefined symbol error, it should now
make sense why we got the undefined symbol error for helper.  main.o contains
a symbol for main, and references helper.  helper.o contains a symbol for
helper, and references to puts.  The final executable contains symbols for main
and helper and references to puts.</p>

<p>You might be wondering where puts comes from then, and why didn&rsquo;t we get an
undefined symbol error for puts like we did earlier for helper.  The answer is
the C runtime.  libc is implicitly dynamically linked to all executables
created by the C compiler.  We&rsquo;ll cover dynamic linkage in a later post in
this series.</p>

<p>When the linker performs relocation on the object files, combining them into a
final executable, it goes through placeholders of addresses and fills them in.
We did this manually in our post on
<a href="http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit/">JIT compilers</a>.</p>

<p>While <code>nm</code> gave us a look into our symbol table, two other tools I use
frequently are <code>objdump</code> on Linux and <code>otool</code> on OSX.  Both of these provide
disassembled assembly instructions and their addresses.  Note how the symbols
for functions get translated into labels of the disassembled functions, and
that their address points to the first instruction in that label.  Since I&rsquo;ve
shown <code>objdump</code>
<a href="http://nickdesaulniers.github.io/blog/2013/04/03/basic-jit/">numerous times</a>
in
<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">previous posts</a>,
here&rsquo;s <code>otool</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>otool -tV helper.o
</span><span class='line'>helper.o:
</span><span class='line'><span class="o">(</span>__TEXT,__text<span class="o">)</span> section
</span><span class='line'>_helper:
</span><span class='line'>0000000000000000    pushq    %rbp
</span><span class='line'>0000000000000001    movq    %rsp, %rbp
</span><span class='line'>0000000000000004    subq    <span class="nv">$0x10</span>, %rsp
</span><span class='line'>0000000000000008    leaq    0xe<span class="o">(</span>%rip<span class="o">)</span>, %rdi         <span class="c">## literal pool for: &quot;helper&quot;</span>
</span><span class='line'>000000000000000f    callq    _puts
</span><span class='line'>0000000000000014    movl    %eax, -0x4<span class="o">(</span>%rbp<span class="o">)</span>
</span><span class='line'>0000000000000017    addq    <span class="nv">$0x10</span>, %rsp
</span><span class='line'>000000000000001b    popq    %rbp
</span><span class='line'>000000000000001c    retq
</span><span class='line'><span class="nv">$ </span>otool -tV main.o
</span><span class='line'>main.o:
</span><span class='line'><span class="o">(</span>__TEXT,__text<span class="o">)</span> section
</span><span class='line'>_main:
</span><span class='line'>0000000000000000    pushq    %rbp
</span><span class='line'>0000000000000001    movq    %rsp, %rbp
</span><span class='line'>0000000000000004    movb    <span class="nv">$0x0</span>, %al
</span><span class='line'>0000000000000006    callq    _helper
</span><span class='line'>000000000000000b    xorl    %eax, %eax
</span><span class='line'>000000000000000d    popq    %rbp
</span><span class='line'>000000000000000e    retq
</span><span class='line'><span class="nv">$ </span>otool -tV a.out
</span><span class='line'>a.out:
</span><span class='line'><span class="o">(</span>__TEXT,__text<span class="o">)</span> section
</span><span class='line'>_helper:
</span><span class='line'>0000000100000f50    pushq    %rbp
</span><span class='line'>0000000100000f51    movq    %rsp, %rbp
</span><span class='line'>0000000100000f54    subq    <span class="nv">$0x10</span>, %rsp
</span><span class='line'>0000000100000f58    leaq    0x43<span class="o">(</span>%rip<span class="o">)</span>, %rdi        <span class="c">## literal pool for: &quot;helper&quot;</span>
</span><span class='line'>0000000100000f5f    callq    0x100000f80             <span class="c">## symbol stub for: _puts</span>
</span><span class='line'>0000000100000f64    movl    %eax, -0x4<span class="o">(</span>%rbp<span class="o">)</span>
</span><span class='line'>0000000100000f67    addq    <span class="nv">$0x10</span>, %rsp
</span><span class='line'>0000000100000f6b    popq    %rbp
</span><span class='line'>0000000100000f6c    retq
</span><span class='line'>0000000100000f6d    nop
</span><span class='line'>0000000100000f6e    nop
</span><span class='line'>0000000100000f6f    nop
</span><span class='line'>_main:
</span><span class='line'>0000000100000f70    pushq    %rbp
</span><span class='line'>0000000100000f71    movq    %rsp, %rbp
</span><span class='line'>0000000100000f74    movb    <span class="nv">$0x0</span>, %al
</span><span class='line'>0000000100000f76    callq    _helper
</span><span class='line'>0000000100000f7b    xorl    %eax, %eax
</span><span class='line'>0000000100000f7d    popq    %rbp
</span><span class='line'>0000000100000f7e    retq
</span></code></pre></td></tr></table></div></figure>


<p><code>readelf -s &lt;object file&gt;</code> will give us a list of symbols on Linux.
<a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">ELF</a>
is the file format used by the loader on Linux, while OSX uses
<a href="https://en.wikipedia.org/wiki/Mach-O">Mach-O</a>.
Thus <code>readelf</code> and <code>otool</code>, respectively.</p>

<p>Also note that for static linkage, symbols need to be unique*, as they refer to
memory locations to either read/write to in the case of variables or locations
to jump to in the case of functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat double_define.c
</span><span class='line'>void a <span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>void a <span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>int main <span class="o">()</span> <span class="o">{}</span>
</span><span class='line'><span class="nv">$ </span>clang double_define.c
</span><span class='line'>double_define.c:2:6: error: redefinition of <span class="s1">&#39;a&#39;</span>
</span><span class='line'>void a <span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>     ^
</span><span class='line'>double_define.c:1:6: note: previous definition is here
</span><span class='line'>void a <span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>     ^
</span><span class='line'>1 error generated.
</span></code></pre></td></tr></table></div></figure>


<p>*: there&rsquo;s a notion of weak symbols, and some special things for dynamic
libraries we&rsquo;ll see in a follow up post.</p>

<p>Languages like C++ that support function overloading (functions with the same
name but different arguments, return types, namespaces, or class) must mangle
their function names to make them unique.</p>

<p>Code like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">namespace</span> <span class="n">util</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Widget</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>      <span class="kt">void</span> <span class="n">doSomething</span> <span class="p">(</span><span class="kt">bool</span> <span class="n">save</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">void</span> <span class="n">doSomething</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will produce symbols like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang class.cpp -std<span class="o">=</span>c++11
</span><span class='line'><span class="nv">$ </span>nm a.out
</span><span class='line'>0000000100000f70 T __ZN4util6Widget11doSomethingEb
</span><span class='line'>0000000100000f60 T __ZN4util6Widget11doSomethingEi
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Note: GNU <code>nm</code> on Linux distros will have a <code>--demangle</code> option:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nm --demangle a.out
</span><span class='line'>...
</span><span class='line'>00000000004006d0 T util::Widget::doSomething<span class="o">(</span>bool<span class="o">)</span>
</span><span class='line'>00000000004006a0 T util::Widget::doSomething<span class="o">(</span>int<span class="o">)</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>On OSX, we can pipe <code>nm</code> into <code>c++filt</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nm a.out | c++filt
</span><span class='line'>0000000100000f70 T util::Widget::doSomething<span class="o">(</span>bool<span class="o">)</span>
</span><span class='line'>0000000100000f60 T util::Widget::doSomething<span class="o">(</span>int<span class="o">)</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Finally, if you don&rsquo;t have an object file, but instead a backtrace that needs
demangling, you can either invoke <code>c++filt</code> manually or use
<a href="http://demangler.com/">demangler.com</a>.</p>

<p>Rust also mangles its function names.  For FFI or interface with C functions,
other languages usually have to look for or expose symbols in a manner suited
to C, the lowest common denominator.
<a href="http://en.cppreference.com/w/cpp/language/language_linkage">C++</a>
has <code>extern "C"</code> blocks and
<a href="https://doc.rust-lang.org/book/ffi.html">Rust</a>
has <code>extern</code> blocks.</p>

<p>We can use <code>strip</code> to remove symbols from a binary.  This can slim down a
binary at the cost of making stack traces unreadable.  If you&rsquo;re following
along at home, try comparing the output from your disassembler and <code>nm</code> before
and after running <code>strip</code> on the executable.  Luckily, you can&rsquo;t strip the
symbols out of object files, otherwise they&rsquo;d be useless as you&rsquo;d no longer be
able to link them.</p>

<p>If we compile with the <code>-g</code> flag, we can create a different kind of symbol;
<a href="https://en.wikipedia.org/wiki/Debug_symbol">debug symbols</a>.
Depending on your compiler+host OS, you&rsquo;ll get another file you can run through
<code>nm</code> to see an entry per symbol.  You&rsquo;ll get more info by using <code>dwarfdump</code> on
this file.  Debug symbols will retain source information such as filename and
line number for all symbols.</p>

<p>This post should have been a simple refresher of some of the basics of working
with C code. Finding symbols to be placed into a final executable and
relocating addresses are the main job of the linker, and will be the main theme
of the posts in this series. Keep your eyes out for more in this series on
memory segmentation.</p>

<ul>
<li><a href="http://nickdesaulniers.github.io/blog/2016/08/13/object-files-and-symbols/">Part 1 &ndash; Object Files and Symbols</a></li>
<li><a href="http://nickdesaulniers.github.io/blog/2016/11/20/static-and-dynamic-libraries/">Part 2 &ndash; Static and Dynamic Libraries</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cross Compiling C/C++ for Android]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/07/01/android-cli/"/>
    <updated>2016-07-01T22:42:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/07/01/android-cli</id>
    <content type="html"><![CDATA[<p>Let’s say you want to build a hello world command line application in C or C++
and run it on your Android phone.  How would you go about it?  It’s not super
practical; apps visible and distributable to end users must use the framework
(AFAIK), but for folks looking to get into developing on ARM it’s likely they
have an ARM device in their pocket.</p>

<p>This post is for folks who typically invoke their compiler from the command
line, either explicitly, from build scripts, or other forms of automation.</p>

<p>At
<a href="https://twitter.com/LostOracle/status/697859368226697218">work</a>,
when working on Android, we typically checkout the entire Android source code
(<a href="https://twitter.com/LostOracle/status/702569487531249664">which is huge</a>),
use <code>lunch</code> to configure a ton of environmental variables, then use Makefiles
with lots of includes and special vars.  We don’t want to spend the time and
disk space checking out the Android source code just to have a working cross
compiler.  Luckily, the Android tools team has an excellent utility to grab a
prebuilt cross compiler.</p>

<p>This assumes you’re building from a Linux host.  Android is a distribution of
Linux, which is much easier to target from a Linux host.  At home, I’ll usually
develop on my OSX machine, ssh’d into my headless Linux box. (iTerm2 and tmux
both have exclusive features, but I currently prefer iTerm2.)</p>

<p>The first thing we want to do is fetch the
<a href="https://developer.android.com/ndk/downloads/index.html">Android NDK</a>.
Not the SDK, the NDK.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  ~ curl -O <span class="se">\</span>
</span><span class='line'>  http://dl.google.com/android/repository/android-ndk-r12b-linux-x86_64.zip
</span><span class='line'>➜  ~ unzip android-ndk-r12b-linux-x86_64.zip
</span></code></pre></td></tr></table></div></figure>


<p>It would be helpful to install adb and fastboot, too.  This might be different
for your distro’s package manager.  Better yet may be to just build from
source.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  ~ sudo apt-get install android-tools-adb android-tools-fastboot
</span></code></pre></td></tr></table></div></figure>


<p>Now for you Android device that you want to target, you’ll want to know the
ISA.  Let’s say I want to target my Nexus 6P, which has an ARMv8-A ISA (the
first 64b ARM ISA).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  ~ ./android-ndk-r12b/build/tools/make_standalone_toolchain.py --arch arm64 <span class="se">\</span>
</span><span class='line'>  --install-dir ~/arm
</span></code></pre></td></tr></table></div></figure>


<p>This will create a nice standalone bundle in <code>~/arm</code>.  It will contain our
cross compiler, linker, headers, libs, and
<a href="https://twitter.com/LostOracle/status/749297676223598592">sysroot (crt.o and friends)</a>.
Most Android devices are ARMv7-A, so you’d use <code>--arch arm</code>.  See the other
supported architectures for cross compiling under
<a href="https://developer.android.com/ndk/guides/standalone_toolchain.html#itc">table 4</a>.</p>

<p>You might also want to change your install-dir and possible add it to your
<code>$PATH</code>, or set <code>$CC</code> and <code>$CXX</code>.</p>

<p>Now we can compile <code>hello_world.c</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  ~ cat hello_world.c
</span><span class='line'><span class="c">#include &lt;stdio.h&gt;</span>
</span><span class='line'>int main <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  puts<span class="o">(</span><span class="s2">&quot;hello world&quot;</span><span class="o">)</span>;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>➜  ~ ~/arm/bin/clang -pie hello_world.c
</span><span class='line'>➜  ~ file a.out
</span><span class='line'>a.out: ELF 64-bit LSB shared object, ARM aarch64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, dynamically
</span><span class='line'>linked, interpreter /system/bin/linker64,
</span><span class='line'>BuildID<span class="o">[</span>sha1<span class="o">]=</span>ecc46648cf2c873253b3b522c0d14b91cf17c70f, not stripped
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/a/30547603">Since Android Lollipop</a>,
Android has required that executables be linked as
position independent (<code>-pie</code>) to help provide
<a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization#Android">ASLR</a>.</p>

<p><code>&lt;install-dir&gt;/bin/</code> also has shell scripts with more full featured names like
<code>aarch64-linux-android-clang</code> if you prefer to have clearer named executables
in your $PATH.</p>

<p>Connect your phone, enable remote debugging, and accept the prompt for remote
debugging.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  ~ adb push a.out /data/local/tmp/.
</span><span class='line'>➜  ~ adb shell <span class="s2">&quot;./data/local/tmp/a.out&quot;</span>
</span><span class='line'>hello world
</span></code></pre></td></tr></table></div></figure>


<p>We’ll use this toolchain in a follow post to start writing some ARMv8-A
assembly.  Stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up mutt with gmail on Ubuntu]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/06/18/mutt-gmail-ubuntu/"/>
    <updated>2016-06-18T16:26:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/06/18/mutt-gmail-ubuntu</id>
    <content type="html"><![CDATA[<p>I was looking to set up the
<a href="http://www.mutt.org/">mutt</a>
email client on my Ubuntu box to go through my gmail account.  Since it took me
a couple of hours to figure out, and I’ll probably forget by the time I need to
know again, I figure I’d post my steps here.</p>

<p>I’m on Ubuntu 16.04 LTS (<code>lsb_release -a</code>)</p>

<p>Install mutt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-get install mutt
</span></code></pre></td></tr></table></div></figure>


<p>In gmail, allow other apps to access gmail:</p>

<p><a href="https://support.google.com/accounts/answer/6010255?hl=en">Allowing less secure apps to access your account</a>
<a href="https://www.google.com/settings/security/lesssecureapps">Less Secure Apps</a></p>

<p>Create the folder</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo touch <span class="nv">$MAIL</span>
</span><span class='line'><span class="nv">$ </span>sudo chmod 660 <span class="nv">$MAIL</span>
</span><span class='line'><span class="nv">$ </span>sudo chown <span class="sb">`</span>whoami<span class="sb">`</span>:mail <span class="nv">$MAIL</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <code>$MAIL</code> for me was <code>/var/mail/nick</code>.</p>

<p>Create the ~/.muttrc file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">set </span><span class="nv">realname</span> <span class="o">=</span> <span class="s2">&quot;&lt;first and last name&gt;&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">from</span> <span class="o">=</span> <span class="s2">&quot;&lt;gmail username&gt;@gmail.com&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">use_from</span> <span class="o">=</span> yes
</span><span class='line'><span class="nb">set </span><span class="nv">envelope_from</span> <span class="o">=</span> yes
</span><span class='line'>
</span><span class='line'><span class="nb">set </span><span class="nv">smtp_url</span> <span class="o">=</span> <span class="s2">&quot;smtps://&lt;gmail username&gt;@gmail.com@smtp.gmail.com:465/&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">smtp_pass</span> <span class="o">=</span> <span class="s2">&quot;&lt;gmail password&gt;&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">imap_user</span> <span class="o">=</span> <span class="s2">&quot;&lt;gmail username&gt;@gmail.com&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">imap_pass</span> <span class="o">=</span> <span class="s2">&quot;&lt;gmail password&gt;&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">folder</span> <span class="o">=</span> <span class="s2">&quot;imaps://imap.gmail.com:993&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">spoolfile</span> <span class="o">=</span> <span class="s2">&quot;+INBOX&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">ssl_force_tls</span> <span class="o">=</span> yes
</span><span class='line'>
</span><span class='line'><span class="c"># G to get mail</span>
</span><span class='line'><span class="nb">bind </span>index G imap-fetch-mail
</span><span class='line'><span class="nb">set </span><span class="nv">editor</span> <span class="o">=</span> <span class="s2">&quot;vim&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">charset</span> <span class="o">=</span> <span class="s2">&quot;utf-8&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">record</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I’m sure there’s better/more config options.  Feel free to go wild, this is by
no means a comprehensive setup.</p>

<p>Run mutt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mutt
</span></code></pre></td></tr></table></div></figure>


<p>We should see it connect and download our messages.  <code>m</code> to start sending new
messages. <code>G</code> to fetch new messages.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/mutt.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Models and Word Size]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/05/30/data-models-and-word-size/"/>
    <updated>2016-05-30T12:54:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/05/30/data-models-and-word-size</id>
    <content type="html"><![CDATA[<p><em>This post is a follow up to
<a href="http://nickdesaulniers.github.io/blog/2016/05/15/whats-in-a-word/">my previous blog post about word size</a>.</em></p>

<p>Three C/C++ programmers walk into a bar.  One argues that sizeof(void*) is
equivalent to sizeof(long), one argues that sizeof(void*) is equivalent to
sizeof(int), and the third argues it’s sizeof(long long).  Simultaneously,
they’re all right, but they’re also all wrong (and need a lesson about portable
C code).  What the hell is going on?</p>

<p>One of the first few programs a programmer might write after hello world is
something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;sizeof(int): %zu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;sizeof(long): %zu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">));</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;sizeof(long long): %zu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">));</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;sizeof(void*): %zu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note the use of the %zu format specifier, a C99 addition that isn’t portable to
older compilers!  (This post is more about considerations when porting older
code to newer machines, not about porting newer code to run on older machines.
Not having a standards compliant C compiler makes writing more portable C code
even trickier, and is a subject for another blog post).</em></p>

<p>When I run that code on my x86-64 OSX machine, I get the following output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sizeof<span class="o">(</span>int<span class="o">)</span>: 4
</span><span class='line'>sizeof<span class="o">(</span>long<span class="o">)</span>: 8
</span><span class='line'>sizeof<span class="o">(</span>long long<span class="o">)</span>: 8
</span><span class='line'>sizeof<span class="o">(</span>void*<span class="o">)</span>: 8
</span></code></pre></td></tr></table></div></figure>


<p>So it looks like I would be the first programmer in the story in the first
paragraph, since on my machine, it looks like sizeof(long) == sizeof(void*).
Also note how sizeof(long long) is equivalent as well.</p>

<p>But what would happen if I compiled my code on a 32 bit machine?  Luckily, my
processor has backwards compatibility with 32b binaries, so I can cross compile
it locally and still run it. Ex:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  clang sizeof.c -Wall -Wextra -Wpedantic
</span><span class='line'>➜  file a.out
</span><span class='line'>a.out: Mach-O 64-bit executable x86_64
</span><span class='line'>➜  clang sizeof.c -Wall -Wextra -Wpedantic -m32
</span><span class='line'>➜  file a.out
</span><span class='line'>a.out: Mach-O executable i386
</span><span class='line'>➜  ./a.out
</span><span class='line'>sizeof<span class="o">(</span>int<span class="o">)</span>: 4
</span><span class='line'>sizeof<span class="o">(</span>long<span class="o">)</span>: 4
</span><span class='line'>sizeof<span class="o">(</span>long long<span class="o">)</span>: 8
</span><span class='line'>sizeof<span class="o">(</span>void*<span class="o">)</span>: 4
</span></code></pre></td></tr></table></div></figure>


<p>Huh, suddenly sizeof(void*) == sizeof(int) == sizeof(long)!  This seems
to be the case of the second programmer from the story.</p>

<p>Both programmer 1 and programmer 2 might agree that the size of a pointer is
equivalent to their machine’s respective
<a href="http://nickdesaulniers.github.io/blog/2016/05/15/whats-in-a-word/">word size</a>,
but that too would be an incorrect assumption for portable C/C++ code!</p>

<p>Programmer 3 goes through the hellscape that is installing a working compiler
for Windows and building a 64b command line application (to be fair, installing
command line tools for OSX is worse; installing a compiler for most OS’ leaves
much to be desired).  When they run that program, they see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sizeof<span class="o">(</span>int<span class="o">)</span>: 4
</span><span class='line'>sizeof<span class="o">(</span>long<span class="o">)</span>: 4
</span><span class='line'>sizeof<span class="o">(</span>long long<span class="o">)</span>: 8
</span><span class='line'>sizeof<span class="o">(</span>void*<span class="o">)</span>: 8
</span></code></pre></td></tr></table></div></figure>


<p>This is yet a third case (the third programmer from the story).  In this case,
only sizeof(long long) is equivalent to sizeof(void*).</p>

<h3>Data Models</h3>

<p>What these programmers are seeing is known as data models.  Programmer 1 one on
a 64b x86-64 OSX machine had an LP64 data model where longs (L), (larger long
longs,) and pointers (P) are 64b, but ints were 32b.  Programmer 2 on a 32b x86
OSX machine had an ILP32 data model where ints (I), longs (L), and pointers (P)
were 32b, but long longs were 64b.  Programmer 3 on a 64b x86-64 Windows
machine had a LLP64 data model, where only long longs (LL) and pointers (P)
were 64b, ints and longs being 32b.</p>

<table>
<thead>
<tr>
<th><strong>Data model</strong> </th>
<th> <strong>sizeof(int)</strong> </th>
<th> <strong>sizeof(long)</strong> </th>
<th> <strong>sizeof(long long)</strong> </th>
<th> <strong>sizeof(void*)</strong> </th>
<th> <strong>example</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>ILP32 </td>
<td> 32b </td>
<td> 32b </td>
<td> 64b </td>
<td> 32b </td>
<td> Win32, i386 OSX &amp; Linux</td>
</tr>
<tr>
<td>LP64 </td>
<td> 32b </td>
<td> 64b </td>
<td> 64b </td>
<td> 64b </td>
<td> x86-64 OSX &amp; Linux</td>
</tr>
<tr>
<td>LLP64 </td>
<td> 32b </td>
<td> 32b </td>
<td> 64b </td>
<td> 64b </td>
<td> Win64</td>
</tr>
</tbody>
</table>


<p>There are older data models such as LP32 (Windows 3.1, Macintosh, where ints
are 16b), and more exotic ones like ILP64, and SILP64.  Knowing the data model
thus is important for portable C/C++ code.</p>

<h3>Historical Perspective</h3>

<p>Running out of address space is and will continue to be tradition in computing.
Applications become bigger as computer power and memory gets cheaper.
Companies want to sell chips that have larger word sizes to address more
memory, but early adopters don’t want to buy a computer where there favorite
application hasn’t been compiled and thus doesn’t exist on yet.  <strong>Someone from
the back shouts <em>virtual machines</em> then ducks as a chair is thrown.</strong></p>

<p><a href="http://www.unix.org/version2/whatsnew/lp64_wp.html">This document</a>
highlights some reasons why LP64 is preferred to ILP64: ILP64
made portable C code that only needed 32b of precision harder to maintain (on
ILP64 an int was 64b, but a short was 16b!).  It mentions how for data
structures that did not contain pointers, their size would be the same on LLP64
as ILP32, which is the direction Microsoft went.  LLP64 was essentially the
ILP32 model with 64b pointers.</p>

<p><em>Linux also supports an ABI called
<a href="https://en.wikipedia.org/wiki/X32_ABI">x32</a>
which can use x86-64 ISA improvements but uses 32b pointers to reduce the size
of data structures that would otherwise have 64b pointers.</em></p>

<p>For a great historical perspective on the evolution of word size and data
models, as well as the &ldquo;toil and trouble&rdquo; caused,
<a href="https://queue.acm.org/detail.cfm?id=1165766">this paper</a>
was an excellent reference.  It describes Microsoft finally abandoning support
for 16b data models in Windows XP 64.  It mentions that the industry was pretty
split between LP64, LLP64, and ILP64 as porting code from the good old days of
ILP32 would break in different ways.  That the use of long was more prevalent
in Windows applications vs the use of int in unix applications.  It also makes
the key point that a lot of programmers from the ILP32 era made assumptions
that sizeof(int) == sizeof(long) == sizeof(void*) which would not hold true
for the LP64/LLP64 era.</p>

<p>One important point the paper makes makes that’s easily missed is that typedef
wasn’t added to C until 1977 when hardware manufactures still couldn’t agree on
how many bits were in a char (CHAR_BITS) and some machines were using 24b
addressing schemes.  stdint.h and inttypes.h did not exist yet.</p>

<p><a href="http://nickdesaulniers.github.io/blog/2016/05/15/whats-in-a-word/">This article</a>
talks about two main categories of effects of switching from ILP32 to LP64 and
has excellent examples of problematic code.  That section near the end is worth
the read alone and makes excellent points to look for during code review.</p>

<h3>Conclusion</h3>

<p>Word size or ISA doesn’t tell you anything about sizeof(int), sizeof(long), or
sizeof(long long).  We also saw that one machine can support multiple different
data models (when I compiled and ran the same code with the -m32 flag).</p>

<p>The C standard tells you minimum guaranteed sizes for these types, but the data
model (part of the ABI, external to but abiding by the C standard) is what
tells you about the specifics sizes of standard integers and pointers.</p>

<h3>Further Reading</h3>

<ul>
<li><a href="http://www.unix.org/version2/whatsnew/lp64_wp.html">64-Bit Programming Models: Why LP64?</a></li>
<li><a href="https://queue.acm.org/detail.cfm?id=1165766">The Long Road to 64 Bits</a></li>
<li><a href="http://www.unix.org/whitepapers/64bit.html">The UNIX System &mdash; 64bit and Data Size Neutrality</a></li>
<li><a href="https://en.wikipedia.org/wiki/64-bit_computing#64-bit_data_models">64-bit data models</a></li>
<li><a href="https://docs.oracle.com/cd/E19620-01/805-3024/lp64-1/index.html">C Language Data Type Models: LP64 and ILP32</a></li>
<li><a href="https://blogs.oracle.com/nike/entry/ilp64_lp64_llp64">ILP64, LP64, LLP64</a></li>
<li><a href="https://en.wikipedia.org/wiki/X32_ABI">x32 ABI</a></li>
<li><a href="http://stackoverflow.com/a/9162072">difference between stdint.h and inttypes.h</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa384083%28v=vs.85%29.aspx">Abstract Data Models</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa384264%28v=vs.85%29.aspx">The New Data Types</a></li>
<li><a href="http://stackoverflow.com/a/13413892">Is there any reason not to use fixed width integer types (e.g. uint8_t)?</a></li>
<li><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050131-00/?p=36563/">Why did the Win64 team choose the LLP64 model?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's in a Word?]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/05/15/whats-in-a-word/"/>
    <updated>2016-05-15T17:58:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/05/15/whats-in-a-word</id>
    <content type="html"><![CDATA[<p>Recently, there some was some confusion between myself and a coworker over the
definition of a &ldquo;word.&rdquo;  I&rsquo;m currently working on a blog post about data
alignment and figured it would be good to clarify some things now, that we can
refer to later.</p>

<p>Having studied computer engineering and being quite fond of processor design,
when I think of a &ldquo;word,&rdquo; I think of the number of bits wide a processor&rsquo;s
general purpose registers are
(aka <a href="https://en.wikipedia.org/wiki/Word_%28computer_architecture%29#Size_families">word size</a>).
This places hard requirements on the largest representable number and address
space.  A 64 bit processor can represent 2<sup>64</sup>-1 (1.8x10<sup>19</sup>) as the largest
unsigned long integer, and address up to 2<sup>64</sup>-1 (16 EiB) different addresses in
memory.</p>

<p>Further, word size limits the possible combinations of operations the processor
can perform, length of immediate values used, inflates the size of binary files
and memory needed to store pointers, and puts pressure on instruction caches.</p>

<p>Word size also has implications on loads and stores based on alignment, as
we&rsquo;ll see in a follow up post.</p>

<p>When I think of 8 bit computers, I think of my first microcontroller: an
Arduino with an Atmel AVR processor.  When I think of 16 bit computers, I think
of my first game console, a Super Nintendo with a Ricoh 5A22.  When I think of
32 bit computers, I think of my first desktop with Intel&rsquo;s Pentium III.  And
when I think of 64 bit computers, I think modern smartphones with ARMv8
instruction sets.  When someone mentions a particular word size, what are the
machines that come to mind for you?</p>

<p>So to me, when someone&rsquo;s talking about a 64b processor, to that machine (and
me) a word is 64b.  When we&rsquo;re referring to a 8b processor, a word is 8b.</p>

<p>Now, some confusion.</p>

<p>Back in my previous blog posts about
<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">x86-64 assembly</a>,
<a href="http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit/">JITs</a>, or
<a href="http://nickdesaulniers.github.io/blog/2016/01/20/debugging-x86-64-assembly-with-lldb-and-dtrace/">debugging</a>,
you might have seen me use instructions that have suffixes of b for byte (8b),
w for word (16b), dw for double word (32b), and qw for quad word (64b) (since
SSE2 there&rsquo;s also double quadwords of 128b).</p>

<p>Wait a minute!  How suddenly does a &ldquo;word&rdquo; refer to 16b on a 64b processor, as
opposed to a 64b &ldquo;word?&rdquo;</p>

<p>In short, historical baggage.  Intel&rsquo;s first hit processor was the
<a href="https://en.wikipedia.org/wiki/Intel_4004">4004</a>,
a 4b processor released in 1971.  It wasn&rsquo;t until 1979 that Intel created the
16b
<a href="https://en.wikipedia.org/wiki/Intel_8086">8086 processor</a>.</p>

<p>The 8086 was created to compete with other 16b processors that beat it to the
market, like the
<a href="https://en.wikipedia.org/wiki/Zilog_Z80">Zilog Z80</a>
(any Gameboy emulator fans out there?  Yes, I know about the Sharp LR35902).
The 8086 was the first design in the
<a href="https://en.wikipedia.org/wiki/X86">x86 family</a>,
and it allowed for the same assembly syntax from the earlier 8008, 8080, and
8085 to be reassembled for it.  The 8086&rsquo;s little brother (8088) would be used
in
<a href="https://en.wikipedia.org/wiki/IBM_Personal_Computer#Open_standards">IBM&rsquo;s PC</a>,
and the rest is history.  x86 would become one of the most successful
ISAs in history.</p>

<p>For backwards compatibility, it seems that both Microsoft&rsquo;s (whose success has
tracked that of x86 since MS-DOS and IBM&rsquo;s PC) and Intel&rsquo;s documentation refers
to words still as being 16b. This allowed 16b PE32+ executables to be run on
32b or even 64b newer versions of Windows, without requiring recompilation of
source or source code modification.</p>

<p>This isn&rsquo;t necessarily wrong to refer to a word based on backwards
compatibility, it&rsquo;s just important to understand the context in which the term
&ldquo;word&rdquo; is being used, and that there might be some confusion if you have a
background with x86 assembly, Windows API programming, or processor design.</p>

<p>So the next time someone asks: why does Intel&rsquo;s documentation commonly refer to
a &ldquo;word&rdquo; as 16b, you can tell them that the x86 and x86-64 ISAs have maintained
the notion of a word being 16b since the first x86 processor, the 8086, which
was a 16b processor.</p>

<p><em>Side Note: for an excellent historical perspective programming early x86
chips, I recommend Michael Abrash&rsquo;s</em>
<a href="http://www.gamedev.net/page/resources/_/technical/graphics-programming-and-theory/graphics-programming-black-book-r1698">Graphics Programming Black Book</a>.
<em>For instance he talks about 8086&rsquo;s little brother, the 8088, being a 16b chip
but only having an 8b bus with which to access memory. This caused a mysterious</em>
<a href="http://downloads.gamedev.net/pdf/gpbb/gpbb4.pdf">&ldquo;cycle eater&rdquo;</a>
<em>to prevent fast access to 16b variables, though they were the processor&rsquo;s
natural size.  Michael also alludes to alignment issues we&rsquo;ll see in a follow
up post.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to Debugging x86-64 Assembly]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/01/20/debugging-x86-64-assembly-with-lldb-and-dtrace/"/>
    <updated>2016-01-20T20:04:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/01/20/debugging-x86-64-assembly-with-lldb-and-dtrace</id>
    <content type="html"><![CDATA[<p>I&rsquo;m hacking on an assembly project, and wanted to document some of the tricks I
was using for figuring out what was going on.  This post might seem a little
basic for folks who spend all day heads down in gdb or who do this stuff
professionally, but I just wanted to share a quick intro to some tools that
others may find useful.
(<a href="https://pchiusano.github.io/2014-10-11/defensive-writing.html">oh god, I&rsquo;m doing it</a>)</p>

<p>If your coming from gdb to lldb, there&rsquo;s a few differences in commands.  LLDB
has
<a href="http://lldb.llvm.org/lldb-gdb.html">great documentation</a>
on some of the differences. Everything in this post about LLDB is pretty much
there.</p>

<p>The bread and butter commands when working with gdb or lldb are:</p>

<ul>
<li>r (run the program)</li>
<li>s (step in)</li>
<li>n (step over)</li>
<li>finish (step out)</li>
<li>c (continue)</li>
<li>q (quit the program)</li>
</ul>


<p>You can hit enter if you want to run the last command again, which is really
useful if you want to keep stepping over statements repeatedly.</p>

<p>I&rsquo;ve been using LLDB on OSX.  Let&rsquo;s say I want to debug a program I can build,
but is crashing or something:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo lldb ./asmttpd web_root
</span></code></pre></td></tr></table></div></figure>


<p>Setting a breakpoint on jump to label:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> b sys_write
</span><span class='line'>Breakpoint 3: <span class="nv">where</span> <span class="o">=</span> asmttpd<span class="sb">`</span>sys_write, <span class="nv">address</span> <span class="o">=</span> 0x00000000000029ae
</span></code></pre></td></tr></table></div></figure>


<p>Running the program until breakpoint hit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> r
</span><span class='line'>Process 32236 launched: <span class="s1">&#39;./asmttpd&#39;</span> <span class="o">(</span>x86_64<span class="o">)</span>
</span><span class='line'>Process 32236 stopped
</span><span class='line'>* thread <span class="c">#1: tid = 0xe69b9, 0x00000000000029ae asmttpd`sys_write, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1</span>
</span><span class='line'>    frame <span class="c">#0: 0x00000000000029ae asmttpd`sys_write</span>
</span><span class='line'>asmttpd<span class="sb">`</span>sys_write:
</span><span class='line'>-&gt;  0x29ae &lt;+0&gt;: pushq  %rdi
</span><span class='line'>    0x29af &lt;+1&gt;: pushq  %rsi
</span><span class='line'>    0x29b0 &lt;+2&gt;: pushq  %rdx
</span><span class='line'>    0x29b1 &lt;+3&gt;: pushq  %r10
</span></code></pre></td></tr></table></div></figure>


<p>Seeing more of the current stack frame:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> d
</span><span class='line'>asmttpd<span class="sb">`</span>sys_write:
</span><span class='line'>-&gt;  0x29ae &lt;+0&gt;:  pushq  %rdi
</span><span class='line'>    0x29af &lt;+1&gt;:  pushq  %rsi
</span><span class='line'>    0x29b0 &lt;+2&gt;:  pushq  %rdx
</span><span class='line'>    0x29b1 &lt;+3&gt;:  pushq  %r10
</span><span class='line'>    0x29b3 &lt;+5&gt;:  pushq  %r8
</span><span class='line'>    0x29b5 &lt;+7&gt;:  pushq  %r9
</span><span class='line'>    0x29b7 &lt;+9&gt;:  pushq  %rbx
</span><span class='line'>    0x29b8 &lt;+10&gt;: pushq  %rcx
</span><span class='line'>    0x29b9 &lt;+11&gt;: movq   %rsi, %rdx
</span><span class='line'>    0x29bc &lt;+14&gt;: movq   %rdi, %rsi
</span><span class='line'>    0x29bf &lt;+17&gt;: movq   <span class="nv">$0x1</span>, %rdi
</span><span class='line'>    0x29c6 &lt;+24&gt;: movq   <span class="nv">$0x2000004</span>, %rax
</span><span class='line'>    0x29cd &lt;+31&gt;: syscall
</span><span class='line'>    0x29cf &lt;+33&gt;: popq   %rcx
</span><span class='line'>    0x29d0 &lt;+34&gt;: popq   %rbx
</span><span class='line'>    0x29d1 &lt;+35&gt;: popq   %r9
</span><span class='line'>    0x29d3 &lt;+37&gt;: popq   %r8
</span><span class='line'>    0x29 &lt;+39&gt;: popq   %r10
</span><span class='line'>    0x29d7 &lt;+41&gt;: popq   %rdx
</span><span class='line'>    0x29d8 &lt;+42&gt;: popq   %rsi
</span><span class='line'>    0x29d9 &lt;+43&gt;: popq   %rdi
</span><span class='line'>    0x29da &lt;+44&gt;: retq
</span></code></pre></td></tr></table></div></figure>


<p>Getting a back trace (call stack):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> bt
</span><span class='line'>* thread <span class="c">#1: tid = 0xe69b9, 0x00000000000029ae asmttpd`sys_write, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1</span>
</span><span class='line'>  * frame <span class="c">#0: 0x00000000000029ae asmttpd`sys_write</span>
</span><span class='line'>    frame <span class="c">#1: 0x00000000000021b6 asmttpd`print_line + 16</span>
</span><span class='line'>    frame <span class="c">#2: 0x0000000000002ab3 asmttpd`start + 35</span>
</span><span class='line'>    frame <span class="c">#3: 0x00007fff9900c5ad libdyld.dylib`start + 1</span>
</span><span class='line'>    frame <span class="c">#4: 0x00007fff9900c5ad libdyld.dylib`start + 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>peeking at the upper stack frame:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> up
</span><span class='line'>frame <span class="c">#1: 0x00000000000021b6 asmttpd`print_line + 16</span>
</span><span class='line'>asmttpd<span class="sb">`</span>print_line:
</span><span class='line'>    0x21b6 &lt;+16&gt;: movabsq <span class="nv">$0x30cb</span>, %rdi
</span><span class='line'>    0x21c0 &lt;+26&gt;: movq   <span class="nv">$0x1</span>, %rsi
</span><span class='line'>    0x21c7 &lt;+33&gt;: callq  0x29ae                    ; sys_write
</span><span class='line'>    0x21cc &lt;+38&gt;: popq   %rcx
</span></code></pre></td></tr></table></div></figure>


<p>back down to the breakpoint-halted stack frame:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> down
</span><span class='line'>frame <span class="c">#0: 0x00000000000029ae asmttpd`sys_write</span>
</span><span class='line'>asmttpd<span class="sb">`</span>sys_write:
</span><span class='line'>-&gt;  0x29ae &lt;+0&gt;: pushq  %rdi
</span><span class='line'>    0x29af &lt;+1&gt;: pushq  %rsi
</span><span class='line'>    0x29b0 &lt;+2&gt;: pushq  %rdx
</span><span class='line'>    0x29b1 &lt;+3&gt;: pushq  %r10
</span></code></pre></td></tr></table></div></figure>


<p>dumping the values of registers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> register <span class="nb">read</span>
</span><span class='line'>General Purpose Registers:
</span><span class='line'>       <span class="nv">rax</span> <span class="o">=</span> 0x0000000000002a90  asmttpd<span class="sb">`</span>start
</span><span class='line'>       <span class="nv">rbx</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>       <span class="nv">rcx</span> <span class="o">=</span> 0x00007fff5fbffaf8
</span><span class='line'>       <span class="nv">rdx</span> <span class="o">=</span> 0x00007fff5fbffa40
</span><span class='line'>       <span class="nv">rdi</span> <span class="o">=</span> 0x00000000000030cc  start_text
</span><span class='line'>       <span class="nv">rsi</span> <span class="o">=</span> 0x000000000000000f
</span><span class='line'>       <span class="nv">rbp</span> <span class="o">=</span> 0x00007fff5fbffa18
</span><span class='line'>       <span class="nv">rsp</span> <span class="o">=</span> 0x00007fff5fbff9b8
</span><span class='line'>        <span class="nv">r8</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>        <span class="nv">r9</span> <span class="o">=</span> 0x00007fff7b1670c8  atexit_mutex + 24
</span><span class='line'>       <span class="nv">r10</span> <span class="o">=</span> 0x00000000ffffffff
</span><span class='line'>       <span class="nv">r11</span> <span class="o">=</span> 0xffffffff00000000
</span><span class='line'>       <span class="nv">r12</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>       <span class="nv">r13</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>       <span class="nv">r14</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>       <span class="nv">r15</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>       <span class="nv">rip</span> <span class="o">=</span> 0x00000000000029ae  asmttpd<span class="sb">`</span>sys_write
</span><span class='line'>    <span class="nv">rflags</span> <span class="o">=</span> 0x0000000000000246
</span><span class='line'>        <span class="nv">cs</span> <span class="o">=</span> 0x000000000000002b
</span><span class='line'>        <span class="nv">fs</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>        <span class="nv">gs</span> <span class="o">=</span> 0x0000000000000000
</span></code></pre></td></tr></table></div></figure>


<p>read just one register:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> register <span class="nb">read </span>rdi
</span><span class='line'>     <span class="nv">rdi</span> <span class="o">=</span> 0x00000000000030cc  start_text
</span></code></pre></td></tr></table></div></figure>


<p>When you&rsquo;re trying to figure out what system calls are made by some C code,
using dtruss is very helpful.  dtruss is available on OSX and seems to be some
kind of wrapper around DTrace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat sleep.c
</span><span class='line'><span class="c">#include &lt;time.h&gt;</span>
</span><span class='line'>int main <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  struct timespec <span class="nv">rqtp</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    2,
</span><span class='line'>    0
</span><span class='line'>  <span class="o">}</span>;
</span><span class='line'>
</span><span class='line'>  nanosleep<span class="o">(</span>&amp;rqtp, NULL<span class="o">)</span>;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>clang sleep.c
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo dtruss ./a.out
</span><span class='line'>...all kinds of fun stuff
</span><span class='line'>__semwait_signal<span class="o">(</span>0xB03, 0x0, 0x1<span class="o">)</span>    <span class="o">=</span> -1 Err#60
</span></code></pre></td></tr></table></div></figure>


<p>If you compile with <code>-g</code> to emit debug symbols, you can use lldb&rsquo;s disassemble
command to get the equivalent assembly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang sleep.c -g
</span><span class='line'><span class="nv">$ </span>lldb a.out
</span><span class='line'><span class="o">(</span>lldb<span class="o">)</span> target create <span class="s2">&quot;a.out&quot;</span>
</span><span class='line'>Current executable <span class="nb">set </span>to <span class="s1">&#39;a.out&#39;</span> <span class="o">(</span>x86_64<span class="o">)</span>.
</span><span class='line'><span class="o">(</span>lldb<span class="o">)</span> b main
</span><span class='line'>Breakpoint 1: <span class="nv">where</span> <span class="o">=</span> a.out<span class="sb">`</span>main + 16 at sleep.c:3, <span class="nv">address</span> <span class="o">=</span> 0x0000000100000f40
</span><span class='line'><span class="o">(</span>lldb<span class="o">)</span> r
</span><span class='line'>Process 33213 launched: <span class="s1">&#39;/Users/Nicholas/code/assembly/asmttpd/a.out&#39;</span> <span class="o">(</span>x86_64<span class="o">)</span>
</span><span class='line'>Process 33213 stopped
</span><span class='line'>* thread <span class="c">#1: tid = 0xeca04, 0x0000000100000f40 a.out`main + 16 at sleep.c:3, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1</span>
</span><span class='line'>    frame <span class="c">#0: 0x0000000100000f40 a.out`main + 16 at sleep.c:3</span>
</span><span class='line'>   1    <span class="c">#include &lt;time.h&gt;</span>
</span><span class='line'>   2    int main <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>-&gt; 3      struct timespec <span class="nv">rqtp</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>   4        2,
</span><span class='line'>   5        0
</span><span class='line'>   6      <span class="o">}</span>;
</span><span class='line'>   7
</span><span class='line'><span class="o">(</span>lldb<span class="o">)</span> disassemble
</span><span class='line'>a.out<span class="sb">`</span>main:
</span><span class='line'>    0x100000f30 &lt;+0&gt;:  pushq  %rbp
</span><span class='line'>    0x100000f31 &lt;+1&gt;:  movq   %rsp, %rbp
</span><span class='line'>    0x100000f34 &lt;+4&gt;:  subq   <span class="nv">$0x20</span>, %rsp
</span><span class='line'>    0x100000f38 &lt;+8&gt;:  leaq   -0x10<span class="o">(</span>%rbp<span class="o">)</span>, %rdi
</span><span class='line'>    0x100000f3c &lt;+12&gt;: xorl   %eax, %eax
</span><span class='line'>    0x100000f3e &lt;+14&gt;: movl   %eax, %esi
</span><span class='line'>-&gt;  0x100000f40 &lt;+16&gt;: movq   0x49<span class="o">(</span>%rip<span class="o">)</span>, %rcx
</span><span class='line'>    0x100000f47 &lt;+23&gt;: movq   %rcx, -0x10<span class="o">(</span>%rbp<span class="o">)</span>
</span><span class='line'>    0x100000f4b &lt;+27&gt;: movq   0x46<span class="o">(</span>%rip<span class="o">)</span>, %rcx
</span><span class='line'>    0x100000f52 &lt;+34&gt;: movq   %rcx, -0x8<span class="o">(</span>%rbp<span class="o">)</span>
</span><span class='line'>    0x100000f56 &lt;+38&gt;: callq  0x100000f68               ; symbol stub <span class="k">for</span>: nanosleep
</span><span class='line'>    0x100000f5b &lt;+43&gt;: xorl   %edx, %edx
</span><span class='line'>    0x100000f5d &lt;+45&gt;: movl   %eax, -0x14<span class="o">(</span>%rbp<span class="o">)</span>
</span><span class='line'>    0x100000f60 &lt;+48&gt;: movl   %edx, %eax
</span><span class='line'>    0x100000f62 &lt;+50&gt;: addq   <span class="nv">$0x20</span>, %rsp
</span><span class='line'>    0x100000f66 &lt;+54&gt;: popq   %rbp
</span><span class='line'>    0x100000f67 &lt;+55&gt;: retq
</span></code></pre></td></tr></table></div></figure>


<p>Anyways, I&rsquo;ve been learning some interesting things about OSX that I&rsquo;ll be
sharing soon. If you&rsquo;d like to learn more about x86-64 assembly programming,
you should read my other posts about
<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">writing x86-64</a>
and a toy
<a href="http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit/">JIT for Brainfuck</a>
(<a href="https://www.reddit.com/r/programming/comments/377ov9/interpreter_compiler_jit/crkkrz4">the creator of Brainfuck liked it</a>).</p>

<p>I should also do a post on
<a href="http://rr-project.org/">Mozilla&rsquo;s rr</a>,
because it can do amazing things like step backwards.  Another day&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My SIGGRAPH 2015 Experience]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/08/14/my-siggraph-2015-experience/"/>
    <updated>2015-08-14T10:10:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/08/14/my-siggraph-2015-experience</id>
    <content type="html"><![CDATA[<p>I was recently lucky enough to get to attend my first SIGGRAPH conference this
year.  While I didn&rsquo;t attend any talks, I did spend some time in the expo. Here
is a collection of some of the neat things I saw at SIGGRAPH 2015.  Sorry it&rsquo;s
not more collected; I didn&rsquo;t have the intention of writing a blog post until
after folks kept asking me &ldquo;how was it?&rdquo;</p>

<h2>VR</h2>

<p>Most booths had demos on VR headsets.  Many were DK2&rsquo;s and GearVR&rsquo;s.  AMD and
NVIDIA had Crescent Bay&rsquo;s (next gen VR headset).  It was noticeably lighter than
the DK2, and I thought it rendered better quality.  It had nicer cable bundling,
and
headphones built in, that could fold up and lock out of the way that made it
nice to put on/take off.  I also tried a Sony Morpheus.  They had a very
engaging demo that was a tie in to the upcoming movie about tight rope walking,
&ldquo;The Walk&rdquo;.  They had a thin PVC pipe taped to the floor that you had to
balance on, and a fan, and you were tight rope walking between the Twin Towers.
Looking down and trying to balance was terrifying.  There were some demos with
a strange mobile VR setup where folks had a backpack on that had an open laptop
hanging off the back and could walk around.  Toyota and Ford had demos where you
could inspect their vehicles in virtual space.  I did not see a single HTC/Valve
Vive at SIGGRAPH.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s8.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s1.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s3.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s2.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s4.jpg"></p>

<h2>AR</h2>

<p>Epson had some AR glasses. They were very glasses friendly, unlike most VR
headsets.  The nose piece was flexible, and if you flattened it out, the headset
could rest on top of your glasses and worked well.  The headset had some very
thick compound lenses.  There was a front facing camera and they had a simple
demo using image recognition of simple logos (like QR codes) that helped provide
position data.  There were other demos with orientation tracking that worked
well.  They didn&rsquo;t have positional sensor info, but had some hack that tried to
estimate positional velocity off the angular momentum (I spoke with the
programmer who implemented it).  <a href="https://moverio.epson.biz/">https://moverio.epson.biz/</a></p>

<h2>Holograms</h2>

<p>There was a demo of holograms using tilted pieces of plastic arranged in a box.
Also, there was a multiple (200+) projector array that projected a scene onto a
special screen.  When walking around the screen, the viewing angle always seemed
correct.  It was very convincing, except for the jarring restart of the animated
loop which could be smoothed out (think looping/seamless gifs).</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s5.jpg"></p>

<h2>VR/3D video</h2>

<p>Google cardboard had a booth showing off 3D videos from youtube.  I had a hard
time telling if the video were stereoscopic or monoptic since the demo videos
only had things in the distance so it was hard to tell if parallax was
implemented correctly.  A bunch of booths were showing off 3D video, but as far
as I could tell, all of the correctly rendered stereoscopic shots were computer
rendered.  I could not find a single instance with footage shot from a
stereoscopic rig, though I tried.</p>

<h2>Booths/Expo</h2>

<p>NVIDIA and Intel had the largest booths, followed by Pixar&rsquo;s Renderman.  Felt
like a GDC event, smaller, but definitely larger than GDC next.  More focus on
shiny photorealism demos, artistic tools, less on game engines themselves.</p>

<h2>Vulcan/OpenGL ES 3.2</h2>

<p>Intel had demos of Vulcan and OpenGL ES 3.2.  For 3.2 they were showing off
tessellation shaders, I think.  For the Vulcan demo, they had a cool demo showing
how with
a particle demo scene rendered with OpenGL 4, a single CPU was pegged, it was
using a lot of power, and had pretty abysmal framerate.  When rendering the same
scene with Vulcan, they were able to more evenly distribute the workload across
CPUs, achieve higher framerate, while using less power.  The API to Vulcan is
<em>still</em> not published, so no source code is available. It was explained to me
that Vulcan is still not thread safe; instead you get the freedom to implement
synchronization rather than the driver.</p>

<h2>Planetarium</h2>

<p>There was a neat demo of a planetarium projector being repurposed to display
an &ldquo;on rails&rdquo; demo of a virtual scene.  You didn&rsquo;t get parallax since it was
being projected on a hemisphere, but it was neat in that like IMAX your entire
FOV was encompassed, but you could move your head, not see any pixels, and
didn&rsquo;t experience any motion sickness or disorientation.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s7.jpg"></p>

<h2>X3D/X3DOM</h2>

<p>I spoke with some folks at the X3D booth about X3DOM.  To me, it seems like a
bunch of previous attempts have kind of added on too much complexity in an
effort to support every use case under the sun, rather than just accept
limitations, so much so that getting started writing hello world became
difficult.  Some of the folks I spoke to at the booth echoed this sentiment, but
also noted the lack of authoring tools as things that hurt adoption.  I have
some neat things I&rsquo;m working on in this space, based on this and other prior
works, that I plan on showing off at the upcoming BrazilJS.</p>

<h2>Maker Faire</h2>

<p>There was a cool maker faire, some things I&rsquo;ll have to order for family members
(young hackers in training) were <a href="http://cannybots.com/">Canny bots</a>,
<a href="http://ebeeproject.net/">eBee</a> and <a href="http://www.withpiper.com/">Piper</a>.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s6.jpg"></p>

<h2>Experimental tech</h2>

<p>Bunch of neat input devices, one I liked used directional sound as tactile
feedback.  One demo was rearranging icons on a home screen.  Rather than touch
the screen, there was a field of tiny speakers that would blast your finger with
sound when it entered to simulate the feeling of vibration. It would vibrate
to let you know you had &ldquo;grabbed&rdquo; and icon, and then drag it.</p>

<h2>Book Signing</h2>

<p>This was the first time I got to see my book printed in physical form!  It
looked gorgeous, hardcover printed in color.  I met about half of the fellow
authors who were also at SIGGRAPH, and our editor.  I even got to meet Eric
Haines, who reviewed my chapter before publication!</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s9.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s10.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s11.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Additional C/C++ Tooling]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/07/23/additional-c-slash-c-plus-plus-tooling/"/>
    <updated>2015-07-23T21:10:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/07/23/additional-c-slash-c-plus-plus-tooling</id>
    <content type="html"><![CDATA[<p><a href="http://shop.oreilly.com/product/0636920025108.do">21st Century C by Ben Klemens</a>
was a great read. It had a section with an
intro to autotools, git, and gdb.
There are a few other useful tools that came to mind that I&rsquo;ve used when
working with C and C++ codebases. These tools are a great way to start
contributing to
<a href="https://github.com/nickdesaulniers/What-Open-Source-Means-To-Me#what-open-source-means-to-me">Open Source</a>
C &amp; C++ codebases; running these tools on
the code or adding them to the codebases.  A lot of these favor command line,
open source utilities. See how many you are familiar with!</p>

<h2>Build Tools</h2>

<h3>CMake</h3>

<p>The first tool I&rsquo;d like to take a look at is
<a href="http://www.cmake.org/overview/">CMake</a>.  CMake is yet another build tool; I
realize how contentious it is to even discuss one of the many.  From my
experience working with
<a href="https://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html">Emscripten</a>,
we recommend the use of CMake for people
writing portable C/C++ programs.  CMake is able to emit Makefiles for unixes,
project files for Xcode on OSX, and project files for Visual Studio on Windows.
There are also a few other &ldquo;generators&rdquo; that you can use.</p>

<p>I&rsquo;ve been really impressed with CMake&rsquo;s modules for
<a href="http://www.cmake.org/cmake/help/v3.0/command/find_package.html">finding dependencies</a>
and
<a href="http://www.cmake.org/cmake/help/v3.0/module/ExternalProject.html">another for fetching and building external dependencies</a>.
I think
<a href="https://www.youtube.com/watch?v=nshzjMDD79w">C++ needs a package manager badly</a>,
and I think CMake would be a solid foundation for one.</p>

<p>The syntax isn&rsquo;t the greatest, but when I wanted to try to build one of my C++
projects on Windows which I know nothing about developing on, I was able to
install CMake and Visual Studio and get my project building.  If you can build
your code on one platform, it will usually build on the others.</p>

<p>If you&rsquo;re not worried about writing cross platform C/C++, maybe CMake is not
worth the effort, but I find it useful.  I wrestle with the syntax sometimes,
but documentation is not bad and it&rsquo;s something you deal with early on in the
development of a project and hopefully never have to touch again (how I wish
that were true).</p>

<h2>Code Formatters</h2>

<h3>ClangFormat</h3>

<p>Another contentious point of concern amongst developers is code style.
<a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.html">Big companies</a>
with lots of C++ code have
<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Coding_Style#CC_practices">documents</a>
explaining their stylistic choices.  Don&rsquo;t waste another hour of your life
arguing about something that really doesn&rsquo;t matter.
<a href="http://clang.llvm.org/docs/ClangFormat.html">ClangFormat</a> will help you
codify your style and format your code for you to match the style.  Simply
write the code however you want, and run the formatter on it before commiting
it.</p>

<p>It can also emit a .clang-format file that you can commit and clang-format will automatically look for that file and use the rules codified there.</p>

<h2>Linters</h2>

<h3>Flint / Flint++</h3>

<p><a href="https://github.com/facebook/flint">Flint</a> is a C++ linter in use at Facebook.
Since it moved from being
implemented in C++ to D, I&rsquo;ve had issues building it.  I&rsquo;ve had better luck
with a fork that&rsquo;s pure C++ without any of the third party dependencies Flint
originally had, called
<a href="https://github.com/L2Program/FlintPlusPlus">Flint++</a>.  While not quite full-on
static analyzers, both can be used for finding potential issues in your code
ahead of time. Linters can look at individual files in isolation; you don&rsquo;t
have to wait for long recompiles like you would with a static analyzer.</p>

<h2>Static Analyzers</h2>

<h3>Scan-build</h3>

<p><a href="http://clang-analyzer.llvm.org/scan-build.html">Scan-build</a> is a static
analyzer for C and C++ code.  You build your code &ldquo;through&rdquo; it, then use the
sibling tool scan-view to see the results.  Scan-view will emit and open an
html file that shows a list of the errors it detected.  It will insert
hyperlinks into the resulting document that step you through how certain
conditions could lead to a null pointer dereference, for example.  You can also
save and share those html files with others in the project. Static analyzers
will help you catch bugs at compile time before you run the code.</p>

<h2>Runtime Sanitizers</h2>

<h3>ASan and UBSan</h3>

<p>Clang&rsquo;s Address (ASan) and Undefined Behavior (UBSan) sanitizers are simply
compiler flags that can be used to detect errors at runtime.  ASan and UBSan
two of the more popular tools, but there are actually a ton and more being
implemented.  See the list
<a href="http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation">here</a>.
These sanitizers will catch bugs at runtime, so you&rsquo;ll have to run the code
to notice any violations, at variable runtime performance costs per sanitizer.
ASan and TSan (Thread Sanitizer) made it into gcc4.8 and UBSan is in gcc4.9.</p>

<h2>Header Analysis</h2>

<h3>Include What You Use</h3>

<p><a href="https://github.com/include-what-you-use/include-what-you-use">Include What You Use</a>
(IWYU) helps you find unused or unnecessary <code>#include</code> preprocessor directives.
It should be obvious how this can help improve compile times. IWYU can also
help cut down on recompiles by recommending forward declarations under certain
conditions.
I look forward to the C++ module proposal being adopted, but until then this
tool can help you spot cruft that can be removed.</p>

<h2>Rapid Recompiles</h2>

<h3>ccache</h3>

<p><a href="https://ccache.samba.org/">ccache</a> greatly improves recompile times by caching
the results of parts of the compilation process.
<a href="https://github.com/nickdesaulniers/dotfiles/blob/49984b3e82022e5ce82e778fc8ce990f8e1e554a/.mozconfig#L1">I use when building Firefox</a>,
and it saves a great deal of time.</p>

<h3>distcc</h3>

<p><a href="https://github.com/distcc/distcc">distcc</a> is a distributed build system.
<a href="http://blog.dholbert.org/">Some folks at Mozilla</a> speed up their Firefox builds with it.</p>

<h2>Memory Leak Detectors</h2>

<h3>Valgrind</h3>

<p><a href="http://valgrind.org/info/about.html">Valgrind</a> has a
<a href="http://valgrind.org/info/about.html">suite of tools</a>, my
favorite being memcheck for finding memory leaks. Unfortunately, it doesn&rsquo;t
seem to work on OSX since 10.10.
<a href="https://code.google.com/p/address-sanitizer/wiki/ComparisonOfMemoryTools">This page</a>
referring to ASan seems to indicate that it can do everything Valgrind&rsquo;s
Memcheck can, at less of a runtime performance cost, but I&rsquo;m not sure how true
this is exactly.</p>

<h3>leaks</h3>

<p>A much more primitive tool for finding leaks from the command line, BSD&rsquo;s have
<code>leaks</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">MallocStackLogging</span><span class="o">=</span>1 ./a.out
</span><span class='line'>leaks a.out
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h2>Profilers</h2>

<h3>Perf</h3>

<p>Perf, and
<a href="http://www.brendangregg.com/flamegraphs.html">Brendan Gregg&rsquo;s tools for emitting SVG flamegraphs</a>
from the output
are helpful for finding where time is spent in a program. In fact, there are
numerous perfomance analysis tools that are Linux specific.  My recommendation
is spend some time on <a href="http://www.brendangregg.com/linuxperf.html">Brendan Gregg&rsquo;s blog</a>.</p>

<h3>DTrace</h3>

<p>OSX doesn&rsquo;t have the same tooling as Linux, but DTrace was ported to it.  I&rsquo;ve
used it to find sampling profiles of my code before. Again,
<a href="http://www.brendangregg.com/dtrace.html">Brendan Gregg&rsquo;s blog</a> is a good
resource; there are some fantastic DTrace one liners.</p>

<h2>Debuggers</h2>

<h3>lldb</h3>

<p>lldb is analogous to gdb.  I can&rsquo;t say I have enough experience with LLDB and GDB to note the difference between the two, but LLDB did show the relative statements forward and back from the current statement by default.  I&rsquo;m informed by my friends/mortal enemies using emacs that this is less of an issue when using emacs/gdb in combination.</p>

<h2>Fuzzers</h2>

<h3>American Fuzzy Lop</h3>

<p><a href="http://lcamtuf.coredump.cx/afl/">American Fuzzy Lop</a> (AFL) is a neat program
that performs fuzzing on programs
that take inputs from files and repeatedly runs the program, modifies the
input trying to get full code coverage, and tries to find crashes.  It&rsquo;s been
getting lots of attention lately, and while I haven&rsquo;t used it myself yet, it
seems like a very powerful tool. Mozilla employs the use of fuzzers on their
JavaScript engine, for instance (not AFL, but
<a href="http://www.squarefree.com/2007/08/02/introducing-jsfunfuzz/">one developed in house</a>).</p>

<h2>Disassemblers</h2>

<h3>gobjdump</h3>

<p>If you really need to make sure the higher level code you&rsquo;re writing is getting
translated into the assembly your expecting, <code>gobjdump -S</code> will intermix the
emitted binary&rsquo;s disassembled assembly and the source code.  This was used
extensively while developing <a href="http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit/">my Brainfuck JIT</a>.</p>

<h2>Conclusion</h2>

<p>Hopefully you learned of some useful tools that you should know about when
working with C or C++.  What did I miss?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interpreter, Compiler, JIT]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit/"/>
    <updated>2015-05-25T08:35:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit</id>
    <content type="html"><![CDATA[<p>Interpreters and compilers are interesting programs, themselves used to run or
translate other programs, respectively.  Those other programs that might be
interpreted might be languages like JavaScript, Ruby, Python, PHP, and Perl.  The
other programs that might be compiled are C, C++, and to some extent Java and
C#.</p>

<p>Taking the time to do translation to native machine code ahead of
time can result in better performance at runtime, but an interpreter can get to work right away without spending any time translating.  There happens to be a sweet spot
somewhere in between interpretation and compilation that combines the best of
both worlds.  Such a technique
is called Just In Time (JIT) compiling.  While interpreting, compiling, and JIT&#8217;ing code might sound radically different, they&rsquo;re actually strikingly similar.  In
this post, I hope to show how similar by comparing the code for an interpreter,
a compiler, and a JIT compiler for the language Brainfuck in around 100 lines
of C code each.</p>

<p>All of the code in the post is up on <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler">GitHub</a>.</p>

<div class="embed-video-container"><iframe src="http://nickdesaulniers.github.io//www.youtube.com/embed/_C5AHaS1mOA" allowfullscreen></iframe></div>


<p>Brainfuck is an interesting, if hard to read, language.  It only has eight
operations it can perform <code>&gt; &lt; + - . , [ ]</code>, yet is Turing complete.  There&rsquo;s nothing really to
lex; each character is a token, and if the token is not one of the eight
operators, it&rsquo;s ignored.  There&rsquo;s also not much of a grammar to parse; the
forward jumping and backwards jumping operators should be matched for well
formed input, but that&rsquo;s about it.  In this post, we&rsquo;ll skip over validating
input assuming well formed input so we can focus on the interpretation/code
generation.  You can read more about it on the
<a href="http://en.wikipedia.org/wiki/Brainfuck">Wikipedia page</a>,
which we&rsquo;ll be using as a reference throughout.</p>

<p>A Brainfuck program operates on a 30,000 element byte array initialized to all
zeros.  It starts off with an instruction pointer, that initially points to the
first element in the data array or &ldquo;tape.&rdquo;  In C code for an interpreter that
might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// Initialize the tape with 30,000 zeroes.</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">tape</span> <span class="p">[</span><span class="mi">30000</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set the pointer to point at the left most cell of the tape.</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">tape</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, since we&rsquo;re performing an operation for each character in the Brainfuck
source, we can have a for loop over every character with a nested switch
statement containing case statements for each operator.</p>

<p>The first two operators, <code>&gt;</code> and <code>&lt;</code> increment and decrement the data pointer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>: <span class="o">++</span><span class="n">ptr</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span>: <span class="o">--</span><span class="n">ptr</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing that could be bad is that because the interpreter is written in C and
we&rsquo;re representing the tape as an array but we&rsquo;re not validating our inputs,
there&rsquo;s potential for stack buffer overrun since we&rsquo;re not performing bounds
checks.  Again, punting and assuming well formed input to keep the code and the
point more precise.</p>

<p>Next up are the <code>+</code> and <code>-</code> operators, used for incrementing and decrementing
the cell pointed to by the data pointer by one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;+&#39;</span>: <span class="o">++</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;-&#39;</span>: <span class="o">--</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The operators <code>.</code> and <code>,</code> provide Brainfuck&rsquo;s only means of input or output, by
writing the value pointed to by the instruction pointer to stdout as an ASCII
value, or reading one byte from stdin as an ASCII value and writing it to the
cell pointed to by the instruction pointer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;.&#39;</span>: <span class="n">putchar</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;,&#39;</span>: <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">();</span> <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, our looping constructs, <code>[</code> and <code>]</code>.  From the definition on Wikipedia
for <code>[</code>: <code>if the byte at the data pointer is zero, then instead of moving the
instruction pointer forward to the next command, jump it forward to the command
after the matching ] command</code> and for <code>]</code>: <code>if the byte at the data pointer is
nonzero, then instead of moving the instruction pointer forward to the next
command, jump it back to the command after the matching [ command.</code></p>

<p>I interpret that as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;[&#39;</span>:
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">loop</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">loop</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">current_char</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="o">++</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">current_char</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">--</span><span class="n">loop</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">current_char</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">++</span><span class="n">loop</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;]&#39;</span>:
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">loop</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">loop</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">current_char</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="o">--</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">current_char</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">--</span><span class="n">loop</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">current_char</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">++</span><span class="n">loop</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where the variable <code>loop</code> keeps track of open brackets for which we&rsquo;ve not seen
a matching close bracket, aka our nested depth.</p>

<p>So <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/interpreter.c">we can see the interpreter is quite basic</a>, in around 50 SLOC were able to
read a byte, and immediately perform an action based on the operator.  How we
perform that operation might not be the fastest though.</p>

<p>How about if we want to compile the Brainfuck source code to native machine
code?  Well, we need to know a little bit about our host machine&rsquo;s Instruction
Set Architecture (ISA) and Application Binary Interface (ABI).  The rest of the
code in this post will not be as portable as the above C code, since it assumes
an x86-64 ISA and UNIX ABI.  Now would be a good time to <a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">take a detour and learn more about writing assembly for x86-64</a>.  The interpreter is even portable enough to <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler#emscripten">build with Emscripten and run in a browser</a>!</p>

<p>For our compiler, we&rsquo;ll iterate over every character in the source file again,
switching on the recognized operator.  This time, instead of performing an
action right away, we&rsquo;ll print assembly instructions to stdout.  Doing so
requires running the compiler on an input file, redirecting stdout to a file,
then running the system assembler and linker on that file.  We&rsquo;ll stick with
just compiling and not assembling (though it&rsquo;s not too difficult), and linking
(for now).</p>

<p>First, we need to print a prologue for our compiled code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="k">const</span> <span class="n">prologue</span> <span class="o">=</span>
</span><span class='line'>  <span class="s">&quot;.text</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;.globl _main</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;_main:</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;  pushq %rbp</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;  movq %rsp, %rbp</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;  pushq %r12</span><span class="se">\n</span><span class="s">&quot;</span>        <span class="c1">// store callee saved register</span>
</span><span class='line'>  <span class="s">&quot;  subq $30008, %rsp</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// allocate 30,008 B on stack, and realign</span>
</span><span class='line'>  <span class="s">&quot;  leaq (%rsp), %rdi</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// address of beginning of tape</span>
</span><span class='line'>  <span class="s">&quot;  movl $0, %esi</span><span class="se">\n</span><span class="s">&quot;</span>     <span class="c1">// fill with 0&#39;s</span>
</span><span class='line'>  <span class="s">&quot;  movq $30000, %rdx</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// length 30,000 B</span>
</span><span class='line'>  <span class="s">&quot;  call _memset</span><span class="se">\n</span><span class="s">&quot;</span>      <span class="c1">// memset</span>
</span><span class='line'>  <span class="s">&quot;  movq %rsp, %r12&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">puts</span><span class="p">(</span><span class="n">prologue</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>During the linking phase, we&rsquo;ll make sure to link in libc so we can call
memset.  What we&rsquo;re doing is backing up callee saved registers we&rsquo;ll be using,
stack allocating the tape, realigning the stack (<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">x86-64 ABI point #1</a>), copying
the address of the only item on the stack into a register for our first
argument, setting the second argument to the constant <code>0</code>, the third arg to
<code>30000</code>, then calling memset.  Finally, we use the callee saved register %r12
as our instruction pointer, which is the address into a value on the stack.</p>

<p>We
can expect the call to memset to result in a segfault if simply subtract just
30000B, and not realign for the 2 registers (64 b each, 8 B each) we pushed on
the stack.  The first pushed register aligns the stack on a 16 B boundary, the
second misaligns it; that&rsquo;s why we allocate an additional 8 B on the stack
(<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">x86-64 ABI point #1</a>).  The stack is mis-aligned upon function entry in x86-64.
30000 is a multiple of 16.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/compiler_stack_alignment.png"></p>

<p>Moving the instruction pointer (<code>&gt;</code>, <code>&lt;</code>) and modifying the pointed to value
(<code>+</code>, <code>-</code>) are straight-forward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  inc %r12&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  dec %r12&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;+&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  incb (%r12)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;-&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  decb (%r12)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For output, <code>.</code>, we need to copy the pointed to byte into the register for the
first argument to putchar.  We
explicitly zero out the register before calling putchar, since it takes an int
(32 b), but we&rsquo;re only copying a char (8 b) (Look up C&rsquo;s type promotion rules for more info).  x86-64 has an instruction that does both, movzXX, Where the first X is the source size (b, w) and the second is the destination size (w, l, q).  Thus movzbl moves a <strong>b</strong>yte (8 b) into a doub<strong>l</strong>e word (32 b).  %rdi and %edi are the same register, but %rdi is the full
64 b register, while %edi is the lowest (or least significant) 32 b.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;.&#39;</span>:
</span><span class='line'>  <span class="c1">// move byte to double word and zero upper bits since putchar takes an</span>
</span><span class='line'>  <span class="c1">// int.</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  movzbl (%r12), %edi&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  call _putchar&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Input (<code>,</code>) is easy; call getchar, move the resulting lowest byte into the cell
pointed to by the instruction pointer.  %al is the lowest 8 b of the 64 b %rax register.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;,&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  call _getchar&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  movb %al, (%r12)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As usual, the looping constructs (<code>[</code> &amp; <code>]</code>) are much more work.  We have to
match up jumps to matching labels, but for an assembly program, labels must be
unique.  One way we can solve for this is whenever we encounter an opening
brace, push a monotonically increasing number that represents the numbers of
opening brackets we&rsquo;ve seen so far onto a stack like data structure.  Then, we
do our comparison and jump to what will be the label that should be produced by
the matching close label.  Next, we insert our starting label, and finally
increment the number of brackets seen.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;[&#39;</span>:
</span><span class='line'>  <span class="n">stack_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack</span><span class="p">,</span> <span class="n">num_brackets</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  cmpb $0, (%r12)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;  je bracket_%d_end</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">num_brackets</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;bracket_%d_start:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">num_brackets</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For close brackets, we pop the number of brackets seen (or rather, number of
pending open brackets which we have yet to see a matching close bracket) off of
the stack, do our comparison, jump to the matching start label, and finally
place our end label.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;]&#39;</span>:
</span><span class='line'>  <span class="n">stack_pop</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">matching_bracket</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  cmpb $0, (%r12)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;  jne bracket_%d_start</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">matching_bracket</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;bracket_%d_end:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">matching_bracket</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So for sequential loops (<code>[][]</code>) we can expect the relevant assembly to look
like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">je</span> <span class="no">bracket_0_end</span>
</span><span class='line'><span class="nl">bracket_0_start:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">jne</span> <span class="no">bracket_0_start</span>
</span><span class='line'><span class="nl">bracket_0_end:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">je</span> <span class="no">bracket_1_end</span>
</span><span class='line'><span class="nl">bracket_1_start:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">jne</span> <span class="no">bracket_1_start</span>
</span><span class='line'><span class="nl">bracket_1_end:</span>
</span></code></pre></td></tr></table></div></figure>


<p>and for nested loops (<code>[[]]</code>), we can expect assembly like the following (note
the difference in the order of numbered start and end labels):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">je</span> <span class="no">bracket_0_end</span>
</span><span class='line'><span class="nl">bracket_0_start:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">je</span> <span class="no">bracket_1_end</span>
</span><span class='line'><span class="nl">bracket_1_start:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">jne</span> <span class="no">bracket_1_start</span>
</span><span class='line'><span class="nl">bracket_1_end:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">jne</span> <span class="no">bracket_0_start</span>
</span><span class='line'><span class="nl">bracket_0_end:</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we need an epilogue to clean up the stack and callee saved registers
after ourselves.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="k">const</span> <span class="n">epilogue</span> <span class="o">=</span>
</span><span class='line'>  <span class="s">&quot;  addq $30008, %rsp</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// clean up tape from stack.</span>
</span><span class='line'>  <span class="s">&quot;  popq %r12</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// restore callee saved register</span>
</span><span class='line'>  <span class="s">&quot;  popq %rbp</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;  ret</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">puts</span><span class="p">(</span><span class="n">epilogue</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compiler is a pain when modifying and running a Brainfuck
program; it takes a couple extra commands to compile the Brainfuck program to
assembly, assemble the assembly into an object file, link it into an
executable, and run it whereas with the interpreter we can just run it.  The
trade off is that the compiled version is quite a bit faster.  How much faster?
Let&rsquo;s save that for later.</p>

<p>Wouldn&rsquo;t it be nice if there was a translation &amp; execution technique that
didn&rsquo;t force us to compile our code every time we changed it and wanted to run
it, but also performed closer to that of compiled code?  That&rsquo;s where a JIT
compiler comes in!</p>

<p>For the basics of JITing code, make sure you read <a href="http://nickdesaulniers.github.io/blog/2013/04/03/basic-jit/">my previous article on the basics of JITing code in C</a>.  We&rsquo;re going to follow the same technique of
creating executable memory, copying bytes into that memory, casting it to a
function pointer, then calling it.  Just like the interpreter and the compiler,
we&rsquo;re going to do a unique action for each recognized token.  What&rsquo;s different is
that for each operator, we&rsquo;re going to push opcodes into a dynamic array, that
way it can grow based on our sequential reading of input and will simplify our calculation of relative offsets for branching operations.</p>

<p>The other special thing we&rsquo;re going to do it that we&rsquo;re going to pass
the address of our libc functions (memset, putchar, and getchar) into our
JIT&#8217;ed function at runtime.  This avoids those kooky stub functions you might
see in a disassembled executable.  That means we&rsquo;ll be invoking our JIT&#8217;ed
function like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="kt">void</span><span class="o">*</span> <span class="nf">fn_memset</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">);</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="nf">fn_putchar</span> <span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="nf">fn_getchar</span> <span class="p">();</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">jitted_func</span><span class="p">)</span> <span class="p">(</span><span class="n">fn_memset</span><span class="p">,</span> <span class="n">fn_putchar</span><span class="p">,</span> <span class="n">fn_getchar</span><span class="p">)</span> <span class="o">=</span> <span class="n">mem</span><span class="p">;</span>
</span><span class='line'><span class="n">jitted_func</span><span class="p">(</span><span class="n">memset</span><span class="p">,</span> <span class="n">putchar</span><span class="p">,</span> <span class="n">getchar</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where mem is our mmap&#8217;ed executable memory with our opcodes copied into it, and
the typedef&rsquo;s are for the respective function signatures for our function
pointers we&rsquo;ll be passing to our JIT&#8217;ed code.  We&rsquo;re kind of getting ahead of
ourselves, but knowing how we will invoke the dynamically created executable
code will give us an idea of how the code itself will work.</p>

<p>The prologue is quite a bit involved, so we&rsquo;ll take it step at a time.  First,
we have the usual prologue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="n">prologue</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="mh">0x55</span><span class="p">,</span> <span class="c1">// push rbp</span>
</span><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xE5</span><span class="p">,</span> <span class="c1">// mov rsp, rbp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we want to back up our callee saved registers that we&rsquo;ll be using.  Expect horrific and difficult to debug bugs if you forget to do this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x54</span><span class="p">,</span> <span class="c1">// pushq %r12</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x55</span><span class="p">,</span> <span class="c1">// pushq %r13</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x56</span><span class="p">,</span> <span class="c1">// pushq %r14</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, %rdi will contain the address of memset, %rsi will contain the
address of putchar, and %rdx will contain the address of getchar, see
<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">x86-64 ABI point #2</a>.  We want to store these in callee saved registers before
calling any of them, else they may clobber %rdi, %rsi, or %rdx since they&rsquo;re
not &ldquo;callee saved,&rdquo; rather &ldquo;call clobbered.&rdquo;  See <a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">x86-64 ABI point #4</a>.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/prologue1.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xFC</span><span class="p">,</span> <span class="c1">// movq %rdi, %r12</span>
</span><span class='line'>  <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xF5</span><span class="p">,</span> <span class="c1">// movq %rsi, %r13</span>
</span><span class='line'>  <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xD6</span><span class="p">,</span> <span class="c1">// movq %rdx, %r14</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, %r12 will contain the address of memset, %r13 will contain the
address of putchar, and %r14 will contain the address of getchar.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/prologue2.png"></p>

<p>Next up is allocating 30008 B on the stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x81</span><span class="p">,</span> <span class="mh">0xEC</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// subq $30008, %rsp</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is our first hint at how numbers, whose value is larger than the maximum
representable value in a byte, are represented on x86-64.  Where in this
instruction is the value 30008?  The answer is the 4 byte sequence
<code>0x38, 0x75, 0x00, 0x00</code>.  The x86-64 architecture is &ldquo;Little Endian,&rdquo; which
means that the least significant bit (LSB) is first and the most significant
bit (MSB) is last.  When humans do math, they typically represent numbers the
other way, or “Big Endian.”  Thus we write decimal ten as &ldquo;10&rdquo; and not &ldquo;01.&rdquo;
So that means that <code>0x38, 0x75, 0x00, 0x00</code> in Little Endian is
<code>0x00, 0x00, 0x75, 0x38</code> in Big Endian, which then is
<code>7*16^3+5*16^2+3*16^1+8*16^0</code>
which is <code>30008</code> in decimal, the amount of bytes we want to subtract from the
stack. We&rsquo;re allocating an additional 8 B on the stack for alignment
requirements, similar to the compiler.  By pushing even numbers of 64 b
registers, we need to realign our stack pointer.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/prologue3.png"></p>

<p>Next in the prologue, we set up and call memset:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="c1">// address of beginning of tape</span>
</span><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="c1">// leaq (%rsp), %rdi</span>
</span><span class='line'>  <span class="c1">// fill with 0&#39;s</span>
</span><span class='line'>  <span class="mh">0xBE</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// movl $0, %esi</span>
</span><span class='line'>  <span class="c1">// length 30,000 B</span>
</span><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0xC7</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// movq $30000, %rdx</span>
</span><span class='line'>  <span class="c1">// memset</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="c1">// callq *%r12</span>
</span></code></pre></td></tr></table></div></figure>


<p>After invoking memset, %rdi, %rsi, &amp; %rcx will contain garbage values since
they are &ldquo;call clobbered&rdquo; registers.  At this point we no longer need memset,
so we now use %r12 as our instruction pointer.  %rsp will point to the top
(technically the bottom) of the stack, which is the beginning of our memset&#8217;ed
tape.  That&rsquo;s the end of our prologue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xE4</span> <span class="c1">// movq %rsp, %r12</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://nickdesaulniers.github.io/images/prologue4.png"></p>

<p>We can then push our prologue into our dynamic array implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">prologue</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">prologue</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we iterate over our Brainfuck program and switch on the operations again.
For pointer increment and decrement, we just nudge %r12.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xC4</span> <span class="c1">// inc %r12</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xCC</span> <span class="c1">// dec %r12</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That extra fun block in the switch statement is because in C/C++, we <a href="http://stackoverflow.com/a/8550253/1027966">can&rsquo;t
define variables in the branches of switch statements</a>.</p>

<p>Pointer deref then increment/decrement are equally uninspiring:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;+&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xFE</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x24</span> <span class="c1">// incb (%r12)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;-&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xFE</span><span class="p">,</span> <span class="mh">0x0C</span><span class="p">,</span> <span class="mh">0x24</span> <span class="c1">// decv (%r12)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I/O might be interesting, but in x86-64 we have an opcode for calling the
function at the end of a pointer.  %r13 contains the address of putchar while
%r14 contains the address of getchar.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;.&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0xB6</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="c1">// movzbl (%r12), %edi</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xD5</span> <span class="c1">// callq *%r13</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;,&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xD6</span><span class="p">,</span> <span class="c1">// callq *%r14</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x88</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x24</span> <span class="c1">// movb %al, (%r12)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now with our looping constructs, we get to the fun part.  With the compiler, we
deferred the concept of &ldquo;relocation&rdquo; to the assembler.  We simply emitted
labels, that the assembler turned into relative offsets (jumps by values
relative to the last byte in the jump instruction).  We&rsquo;ve found ourselves in a
Catch-22 though: how many bytes forward do we jump to the matching close
bracket that we haven&rsquo;t seen yet?</p>

<p>Normally, an assembler might have a data structure known as a
&ldquo;relocation table.&rdquo;  It keeps track of the first byte after a label and jumps,
rewriting jumps-to-labels (which aren&rsquo;t kept around in the resulting binary
executable) to relative jumps.  Spidermonkey, Firefox&rsquo;s JavaScript Virtual
Machine has two classes for this, <a href="http://mxr.mozilla.org/mozilla-central/source/js/src/jit/MacroAssembler.cpp">MacroAssembler</a> and <a href="http://mxr.mozilla.org/mozilla-central/source/js/src/jit/Label.h">Label</a>.  Spidermonkey
embeds a linked list in the opcodes it generates for jumps with which it&rsquo;s yet
to see a label for.  Once it finds the label, it walks the linked list (which
itself is embedded in the emitted instruction stream) patching up these
locations as it goes.</p>

<p>For Brainfuck, we don&rsquo;t have to anything quite as fancy since each label only
ends up having one jump site.  Instead, we can use a stack of integers that are
offsets into our dynamic array, and do the relocation once we know where
exactly we&rsquo;re jumping to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;[&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// cmpb $0, (%r12)</span>
</span><span class='line'>      <span class="c1">// Needs to be patched up</span>
</span><span class='line'>      <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0x84</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span> <span class="c1">// je &lt;32b relative offset, 2&#39;s compliment, LE&gt;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">stack_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">relocation_table</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span><span class="p">);</span> <span class="c1">// create a label after</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>First we push the compare and jump opcodes, but for now we leave the relative
offset blank (four zero bytes).  We will come back and patch it up later.
Then, we push the current length of dynamic array, which just so happens to be
the offset into the instruction stream of the next instruction.</p>

<p>All of the relocation magic happens in the case for the closing bracket.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;]&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// cmpb $0, (%r12)</span>
</span><span class='line'>      <span class="c1">// Needs to be patched up</span>
</span><span class='line'>      <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0x85</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span> <span class="c1">// jne &lt;33b relative offset, 2&#39;s compliment, LE&gt;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, we push our comparison and jump instructions into the dynamic array.
We should know the relative offset we need to jump back to at this point, and
thus don&rsquo;t need to push four empty bytes, but it makes the following math a
little simpler, as were not done yet with this case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="n">stack_pop</span><span class="p">(</span><span class="o">&amp;</span><span class="n">relocation_table</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">relocation_site</span><span class="p">);</span>
</span><span class='line'>  <span class="n">relative_offset</span> <span class="o">=</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span> <span class="o">-</span> <span class="n">relocation_site</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://nickdesaulniers.github.io/images/relative_jump_unknown.png"></p>

<p>We pop the matching offset into the dynamic array (from the matching open
bracket), and calculate the difference from the current size of the instruction
stream to the matching offset to get our relative offset.  What&rsquo;s interesting
is that this offset is equal in magnitude for the forward and backwards jumps
that we now need to patch up.  We simply go back in our instruction stream 4 B,
and write that relative offset negated as a 32 b LE number (patching our
backwards jump), then go back to the site of our forward jump minus 4 B and
write that relative offset as a 32 b LE number (patching our forwards jump).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="n">vector_write32LE</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="n">relative_offset</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vector_write32LE</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">relocation_site</span> <span class="o">-</span> <span class="mi">4</span><span class="p">,</span> <span class="n">relative_offset</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thus, when writing a JIT, one must worry about manual relocation.  From the
<a href="http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf">Intel 64 and IA-32 Architectures Software Developer’s Manual Volume 2 (2A, 2B &amp; 2C): Instruction Set Reference, A-Z</a> &ldquo;A relative offset
(rel8, rel16, or rel32) is generally specified as a label in assembly code, but
at the machine code level, it is encoded as a signed, 8-bit or 32-bit immediate
value, which is added to the instruction pointer.&rdquo;</p>

<p>The last thing we push onto our instruction stream is clean up code in the
epilogue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="n">epilogue</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x81</span><span class="p">,</span> <span class="mh">0xC4</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// addq $30008, %rsp</span>
</span><span class='line'>  <span class="c1">// restore callee saved registers</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="c1">// popq %r14</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x5D</span><span class="p">,</span> <span class="c1">// popq %r13</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x5C</span><span class="p">,</span> <span class="c1">// popq %r12</span>
</span><span class='line'>  <span class="mh">0x5d</span><span class="p">,</span> <span class="c1">// pop rbp</span>
</span><span class='line'>  <span class="mh">0xC3</span> <span class="c1">// ret</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">epilogue</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">epilogue</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>A dynamic array of bytes isn&rsquo;t really useful, so we need to create executable
memory the size of the current instruction stream and copy all of the machine
opcodes into it, cast it to a function pointer, call it, and finally clean up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span><span class="o">*</span> <span class="n">mem</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span><span class="p">,</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_EXEC</span><span class="p">,</span>
</span><span class='line'>  <span class="n">MAP_ANON</span> <span class="o">|</span> <span class="n">MAP_PRIVATE</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="n">mem</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">jitted_func</span><span class="p">)</span> <span class="p">(</span><span class="n">fn_memset</span><span class="p">,</span> <span class="n">fn_putchar</span><span class="p">,</span> <span class="n">fn_getchar</span><span class="p">)</span> <span class="o">=</span> <span class="n">mem</span><span class="p">;</span>
</span><span class='line'><span class="n">jitted_func</span><span class="p">(</span><span class="n">memcpy</span><span class="p">,</span> <span class="n">putchar</span><span class="p">,</span> <span class="n">getchar</span><span class="p">);</span>
</span><span class='line'><span class="n">munmap</span><span class="p">(</span><span class="n">mem</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'><span class="n">vector_destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: we could have used the instruction stream rewinding technique to move the address of memset, putchar, and getchar as 64 b immediate values into %r12-%r14, which would have <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/pull/6/files">simplified our JIT&rsquo;d function&rsquo;s type signature</a>.</p>

<p>Compile that, and we now have <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/jit.c">a function that will JIT compile and execute Brainfuck in roughly 141 SLOC</a>.  And, we can make changes to our Brainfuck program and not have to recompile it like we did with the Brainfuck compiler.</p>

<p>Hopefully it&rsquo;s becoming apparent how similar an interpreter, compiler, and JIT
behave.  In the interpreter, we immediately execute some operation.  In the
compiler, we emit the equivalent text based assembly instructions corresponding
to what the higher level language might get translated to in the interpreter.
In the JIT, we emit the binary opcodes into executable memory and manually
perform relocation, where the binary opcodes are equivalent to the text based
assembly we might emit in the compiler.  A production ready JIT would probably have macros for each operation in the JIT would perform, so the code would look more like the compiler rather than raw arrays of bytes (though the preprocessor would translate those macros into such).  The entire process is basically disassembling C code with <code>gobjdump -S -M suffix a.out</code>, and punching in hex like one would a Gameshark.</p>

<p>Compare pointer incrementing from the three:</p>

<p>Interpreter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>: <span class="o">++</span><span class="n">ptr</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compiler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  inc %r12&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>JIT:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xC4</span> <span class="c1">// inc %r12</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or compare the full sources of the <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/interpreter.c">the interpreter</a>, <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/compiler.c">the compiler</a>, and <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/jit.c">the JIT</a>. Each at ~100 lines of code should be fairly easy to digest.</p>

<p>Let&rsquo;s now examine the performance of these three.  One of the longer running
Brainfuck programs I can find is <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/samples/mandelbrot.b">one that prints the Mandelbrot set as ASCII art to stdout</a>.</p>

<p><video width='' height='' preload='none' controls poster=''><source src='http://nickdesaulniers.github.io/video/jit.mp4 ' ></video></p>

<p>Running the UNIX command <code>time</code> on the interpreter, compiled
result, and the JIT, we should expect numbers similar to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">time</span> <span class="p">.</span><span class="o">/</span><span class="n">interpreter</span> <span class="p">..</span><span class="o">/</span><span class="n">samples</span><span class="o">/</span><span class="n">mandelbrot</span><span class="p">.</span><span class="n">b</span>
</span><span class='line'><span class="mf">43.54</span><span class="n">s</span> <span class="n">user</span> <span class="mf">0.03</span><span class="n">s</span> <span class="n">system</span> <span class="mi">99</span><span class="o">%</span> <span class="n">cpu</span> <span class="mf">43.581</span> <span class="n">total</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">compiler</span> <span class="p">..</span><span class="o">/</span><span class="n">samples</span><span class="o">/</span><span class="n">mandelbrot</span><span class="p">.</span><span class="n">b</span> <span class="o">&gt;</span> <span class="n">temp</span><span class="p">.</span><span class="n">s</span><span class="p">;</span> <span class="p">..</span><span class="o">/</span><span class="n">assemble</span><span class="p">.</span><span class="n">sh</span> <span class="n">temp</span><span class="p">.</span><span class="n">s</span><span class="p">;</span> <span class="n">time</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span>
</span><span class='line'><span class="mf">3.24</span><span class="n">s</span> <span class="n">user</span> <span class="mf">0.01</span><span class="n">s</span> <span class="n">system</span> <span class="mi">99</span><span class="o">%</span> <span class="n">cpu</span> <span class="mf">3.254</span> <span class="n">total</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">time</span> <span class="p">.</span><span class="o">/</span><span class="n">jit</span> <span class="p">..</span><span class="o">/</span><span class="n">samples</span><span class="o">/</span><span class="n">mandelbrot</span><span class="p">.</span><span class="n">b</span>
</span><span class='line'><span class="mf">3.27</span><span class="n">s</span> <span class="n">user</span> <span class="mf">0.01</span><span class="n">s</span> <span class="n">system</span> <span class="mi">99</span><span class="o">%</span> <span class="n">cpu</span> <span class="mf">3.282</span> <span class="n">total</span>
</span></code></pre></td></tr></table></div></figure>


<p>The interpreter is an order of magnitude slower than the compiled result or run
of the JIT.  Then again, the interpreter isn&rsquo;t able to jump back and forth as
efficiently as the compiler or JIT, since it scans back and forth for matching
brackets O(N), while the other two can jump to where they need to go in a few instructions O(1).  A production interpreter would probably translate the higher level language to a byte code, and thus be able to calculate the offsets used for jumps directly, rather than scanning back and forth.</p>

<p>The interpreter bounces back and forth between looking up an operation, then
doing something based on the operation, then lookup, etc..  The compiler and JIT preform the translation first, then the execution, not interleaving the two.</p>

<p>The compiled result is the fastest, as expected, since it doesn&rsquo;t have the
overhead the JIT does of having to read the input file or build up the
instructions to execute at runtime.  The compiler has read
and translated the input file ahead of time.</p>

<p>What if we take into account the
time it takes to compile the source code, and run it?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">time</span> <span class="p">(.</span><span class="o">/</span><span class="n">compiler</span> <span class="p">..</span><span class="o">/</span><span class="n">samples</span><span class="o">/</span><span class="n">mandelbrot</span><span class="p">.</span><span class="n">b</span> <span class="o">&gt;</span> <span class="n">temp</span><span class="p">.</span><span class="n">s</span><span class="p">;</span> <span class="p">..</span><span class="o">/</span><span class="n">assemble</span><span class="p">.</span><span class="n">sh</span> <span class="n">temp</span><span class="p">.</span><span class="n">s</span><span class="p">;</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'><span class="mf">3.27</span><span class="n">s</span> <span class="n">user</span> <span class="mf">0.08</span><span class="n">s</span> <span class="n">system</span> <span class="mi">99</span><span class="o">%</span> <span class="n">cpu</span> <span class="mf">3.353</span> <span class="n">total</span>
</span></code></pre></td></tr></table></div></figure>


<p>Including the time it takes to compile the code then run it, the compiled
results are now slightly slower than the JIT (though I bet the multiple processes we start up are suspect), but with the JIT we pay the price
to compile each and every time we run our code.  With the compiler, we pay that
tax once.  When compilation time is cheap, as is the case with our Brainfuck
compiler &amp; JIT, it makes sense to prefer the JIT; it allows us to quickly make
changes to our code and re-run it.  When compilation is expensive, we might
only want to pay the compilation tax once, especially if we plan on running the
program repeatedly.</p>

<p>JIT&rsquo;s are neat but compared to compilers can be more complex to
implement.  They also repeatedly re-parse input files and re-build instruction
streams at runtime. Where they can shine is bridging the gap for dynamically
typed languages where the runtime itself is much more dynamic, and thus harder
(if not, impossible) to optimize ahead of time.  Being able to jump into JIT&rsquo;d
native code from an
interpreter and back gives you the best of both (interpreted and compiled)
worlds.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hidden in Plain Sight - Public Key Crypto]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/02/22/public-key-crypto-code-example/"/>
    <updated>2015-02-22T11:48:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/02/22/public-key-crypto-code-example</id>
    <content type="html"><![CDATA[<p>How is it possible for us to communicate securely when there&rsquo;s the possibility
of a third party eavesdropping on us?  How can we communicate private secrets
through public channels?  How do such techniques enable us to bank online and
carry out other sensitive transactions on the Internet while trusting numerous
relays?  In this post, I hope
to explain public key cryptography, with actual code examples, so that the
concepts are a little more concrete.</p>

<p>First, please check out this excellent video on public key crypto:</p>

<div class="embed-video-container"><iframe src="http://nickdesaulniers.github.io//www.youtube.com/embed/YEBfamv-_do" allowfullscreen></iframe></div>


<p>Hopefully that explains the gist of the technique, but what might it actually
look like in code?  Let&rsquo;s take a look at example code in JavaScript using the
Node.js crypto module.  We&rsquo;ll later compare the upcoming WebCrypto API and
look at a TLS handshake.</p>

<p>Meet Alice.  Meet Bob. Meet Eve.  Alice would like to send Bob a secret
message.  Alice would not like Eve to view the message.  Assume Eve can
intercept, but not tamper with, everything Alice and Bob try to share with each
other.</p>

<p>Alice chooses a modular exponential key group, such as modp4, then creates a
public and private key.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">group</span> <span class="o">=</span> <span class="s2">&quot;modp4&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">aliceDH</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">getDiffieHellman</span><span class="p">(</span><span class="nx">group</span><span class="p">);</span>
</span><span class='line'><span class="nx">aliceDH</span><span class="p">.</span><span class="nx">generateKeys</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>A modular exponential key group is simply a &ldquo;sufficiently large&rdquo; prime number,
paired with a generator (specific number), such as those defined in
<a href="http://tools.ietf.org/html/rfc2412">RFC2412</a> and
<a href="http://tools.ietf.org/html/rfc3526">RFC3526</a>.</p>

<p>The public key is meant to be shared; it is ok for Eve to know the public key.
The private key must not ever be shared, even with the person communicating to.</p>

<p>Alice then shares her public key and group with Bob.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Public</span> <span class="nx">Key</span><span class="o">:</span>
</span><span class='line'> <span class="o">&lt;</span><span class="nx">Buffer</span> <span class="mi">96</span> <span class="mi">33</span> <span class="nx">c5</span> <span class="mi">9</span><span class="nx">e</span> <span class="nx">b9</span> <span class="mi">07</span> <span class="mi">3</span><span class="nx">e</span> <span class="nx">f2</span> <span class="nx">ec</span> <span class="mi">56</span> <span class="mi">6</span><span class="nx">d</span> <span class="nx">f4</span> <span class="mi">1</span><span class="nx">a</span> <span class="nx">b4</span> <span class="nx">f8</span> <span class="mi">4</span><span class="nx">c</span> <span class="mi">77</span> <span class="nx">e6</span> <span class="mi">5</span><span class="nx">f</span> <span class="nx">a0</span> <span class="mi">93</span> <span class="nx">cf</span> <span class="mi">32</span> <span class="nx">d3</span> <span class="mi">22</span> <span class="mi">42</span> <span class="nx">c8</span> <span class="nx">b4</span> <span class="mi">7</span><span class="nx">b</span> <span class="mi">2</span><span class="nx">b</span> <span class="mi">1</span><span class="nx">f</span> <span class="nx">a9</span> <span class="mi">55</span> <span class="mi">86</span> <span class="mi">05</span> <span class="nx">a4</span> <span class="mi">60</span> <span class="mi">17</span> <span class="nx">ae</span> <span class="nx">f9</span> <span class="nx">ee</span> <span class="nx">bf</span> <span class="nx">b3</span> <span class="nx">c9</span> <span class="mi">05</span> <span class="nx">a9</span> <span class="mi">31</span> <span class="mi">31</span> <span class="mi">94</span> <span class="mi">0</span><span class="nx">f</span> <span class="p">...</span> <span class="o">&gt;</span>
</span><span class='line'><span class="nx">Group</span><span class="o">:</span>
</span><span class='line'> <span class="nx">modp14</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bob now creates a public and private key pair with the same group as Alice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">bobDH</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">getDiffieHellman</span><span class="p">(</span><span class="nx">group</span><span class="p">);</span>
</span><span class='line'><span class="nx">bobDH</span><span class="p">.</span><span class="nx">generateKeys</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bob shares his public key with Alice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Public</span> <span class="nx">key</span><span class="o">:</span>
</span><span class='line'> <span class="o">&lt;</span><span class="nx">Buffer</span> <span class="nx">ee</span> <span class="nx">d7</span> <span class="nx">e2</span> <span class="mi">00</span> <span class="nx">e5</span> <span class="mi">82</span> <span class="mi">11</span> <span class="nx">eb</span> <span class="mi">67</span> <span class="nx">ab</span> <span class="mi">50</span> <span class="mi">20</span> <span class="mi">30</span> <span class="mi">81</span> <span class="nx">b1</span> <span class="mi">74</span> <span class="mi">7</span><span class="nx">a</span> <span class="mi">51</span> <span class="mi">0</span><span class="nx">d</span> <span class="mi">7</span><span class="nx">e</span> <span class="mi">2</span><span class="nx">a</span> <span class="nx">de</span> <span class="nx">b7</span> <span class="nx">df</span> <span class="nx">db</span> <span class="nx">cf</span> <span class="nx">ac</span> <span class="mi">57</span> <span class="nx">de</span> <span class="nx">a4</span> <span class="nx">f0</span> <span class="nx">bd</span> <span class="nx">bc</span> <span class="nx">b5</span> <span class="mi">7</span><span class="nx">e</span> <span class="nx">ea</span> <span class="nx">df</span> <span class="nx">b0</span> <span class="mi">3</span><span class="nx">b</span> <span class="nx">c3</span> <span class="mi">3</span><span class="nx">a</span> <span class="nx">e2</span> <span class="nx">fa</span> <span class="mi">0</span><span class="nx">e</span> <span class="nx">ed</span> <span class="mi">22</span> <span class="mi">90</span> <span class="mi">31</span> <span class="mi">01</span> <span class="mi">67</span> <span class="p">...</span> <span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alice and Bob now compute a shared secret.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">aliceSecret</span> <span class="o">=</span> <span class="nx">aliceDH</span><span class="p">.</span><span class="nx">computeSecret</span><span class="p">(</span><span class="nx">bobDH</span><span class="p">.</span><span class="nx">getPublicKey</span><span class="p">(),</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;hex&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bobSecret</span> <span class="o">=</span> <span class="nx">bobDH</span><span class="p">.</span><span class="nx">computeSecret</span><span class="p">(</span><span class="nx">aliceDH</span><span class="p">.</span><span class="nx">getPublicKey</span><span class="p">(),</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;hex&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alice and Bob have now derived a shared secret from each others&#8217; public keys.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">aliceSecret</span> <span class="o">===</span> <span class="nx">bobSecret</span><span class="p">;</span> <span class="c1">// =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Meanwhile, Eve has intercepted Alice and Bob&rsquo;s public keys and group.  Eve
tries to compute the same secret.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">eveDH</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">getDiffieHellman</span><span class="p">(</span><span class="nx">group</span><span class="p">);</span>
</span><span class='line'><span class="nx">eveDH</span><span class="p">.</span><span class="nx">generateKeys</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">eveSecret</span> <span class="o">=</span> <span class="nx">eveDH</span><span class="p">.</span><span class="nx">computeSecret</span><span class="p">(</span><span class="nx">aliceDH</span><span class="p">.</span><span class="nx">getPublicKeys</span><span class="p">(),</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;hex&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">eveSecret</span> <span class="o">===</span> <span class="nx">aliceSecret</span><span class="p">;</span> <span class="c1">// =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is because Alice&rsquo;s secret is derived from Alice and Bob&rsquo;s private keys,
which Eve does not have.  Eve may not realize her secret is not the same as
Alice and Bob&rsquo;s until later.</p>

<p>That was asymmetric encryption; using different keys.  The shared secret may
now be used in symmetric encryption; using the same keys.</p>

<p>Alice creates a symmetric block cypher using her favorite algorithm, a hash of
their secret as a key, and random bytes as an initialization vector.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cypher</span> <span class="o">=</span> <span class="s2">&quot;aes-256-ctr&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">hash</span> <span class="o">=</span> <span class="s2">&quot;sha256&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">aliceIV</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">randomBytes</span><span class="p">(</span><span class="mi">128</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">aliceHashedSecret</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="nx">hash</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="nx">aliceSecret</span><span class="p">).</span><span class="nx">digest</span><span class="p">(</span><span class="s2">&quot;binary&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">aliceCypher</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createCypher</span><span class="p">(</span><span class="nx">cypher</span><span class="p">,</span> <span class="nx">aliceHashedSecret</span><span class="p">,</span> <span class="nx">aliceIV</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alice then uses her cypher to encrypt her message to Bob.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cypherText</span> <span class="o">=</span> <span class="nx">aliceCypher</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="s2">&quot;...&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alice then sends the cypher text, cypher, and hash to Bob.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">cypherText</span><span class="o">:</span>
</span><span class='line'> <span class="o">&lt;</span><span class="nx">Buffer</span> <span class="nx">bd</span> <span class="mi">29</span> <span class="mi">96</span> <span class="mi">83</span> <span class="nx">fa</span> <span class="nx">a8</span> <span class="mi">7</span><span class="nx">d</span> <span class="mi">9</span><span class="nx">c</span> <span class="nx">ea</span> <span class="mi">90</span> <span class="nx">ab</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">cypher</span><span class="o">:</span>
</span><span class='line'> <span class="nx">aes</span><span class="o">-</span><span class="mi">256</span><span class="o">-</span><span class="nx">ctr</span>
</span><span class='line'><span class="nx">hash</span><span class="o">:</span>
</span><span class='line'> <span class="nx">sha256</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bob now constructs a symmetric block cypher using the algorithm from Alice,
and a hash of their shared secret.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">bobHashedSecret</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="nx">hash</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="nx">bobSecret</span><span class="p">).</span><span class="nx">digest</span><span class="p">(</span><span class="s2">&quot;binary&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bobCypher</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createDecipher</span><span class="p">(</span><span class="nx">cypher</span><span class="p">,</span> <span class="nx">bobHashedSecret</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bob now decyphers the encrypted message (cypher text) from Alice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">plainText</span> <span class="o">=</span> <span class="nx">bobCypher</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">cypherText</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">plainText</span><span class="p">);</span> <span class="c1">// =&gt; &quot;I love you&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Eve has intercepted the cypher text, cypher, hash, and tries to decrypt it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">eveHashedSecret</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="nx">hash</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="nx">eveSecret</span><span class="p">).</span><span class="nx">digest</span><span class="p">(</span><span class="s2">&quot;binary&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">eveCypher</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createDecipher</span><span class="p">(</span><span class="nx">cypher</span><span class="p">,</span> <span class="nx">eveHashedSecret</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">eveCypher</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">cypherText</span><span class="p">).</span><span class="nx">toString</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// =&gt; ��_r](�i)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s where Eve realizes her secret is not correct.</p>

<p>This prevents passive eavesdropping, but not active man-in-the-middle (MITM)
attacks.  For example, how does Alice know that the messages she was supposedly
receiving from Bob actually came from Bob, not Eve posing as Bob?</p>

<p>Today, we use a system of certificates to provide authentication.  This system
certainly <a href="http://thenextweb.com/insider/2015/02/19/lenovo-caught-installing-adware-new-computers/">has</a> its
<a href="https://deadbeefsec.wordpress.com/2012/09/30/who-do-you-trust-why-certificate-authorities-are-a-cartel/">flaws</a>,
but it is what we use today.  This is more advanced topic that won&rsquo;t be covered
here.  Trust is a funny thing.</p>

<p>What&rsquo;s interesting to note is that the prime and generator used to generate
Diffie-Hellman public and private keys have strings that represent the
corresponding modular key exponential groups, ie &ldquo;modp14&rdquo;.  Web crypto&rsquo;s API
gives you
<a href="https://hg.mozilla.org/mozilla-central/file/d866ac7f8606/dom/crypto/test/test_WebCrypto_DH.html#l30">finer grain control</a>
to specify the generator and
<a href="https://hg.mozilla.org/mozilla-central/file/d866ac7f8606/dom/crypto/test/test-vectors.js#l662">large prime number</a>
in a Typed Array.  I&rsquo;m not sure why this is; if it allows you to have finer
grain control, or allows you to support newer groups before the implementation
does?  To me, it seems like a source for errors to be made; hopefully someone
will make a library to provide these prime/generator pairs.</p>

<p>One issue with my approach is that I assumed that Alice and Bob both had
support for the same hashing algorithms, modular exponential key group, and
symmetric block cypher.  In the real world, this is not always the case.
Instead, it is much more common for the client to broadcast publicly all of the
algorithms it supports, and the server to pick one.  This list of algorithms is
called a &ldquo;suite,&rdquo; ie &ldquo;cypher suit.&rdquo; I learned this the hard way recently trying
to
<a href="https://stribika.github.io/2015/01/04/secure-secure-shell.html">upgrade</a>
the <a href="https://wiki.mozilla.org/Security/Guidelines/OpenSSH">cypher suit</a>
on my ssh server and finding out that
<a href="https://mochtu.de/2015/01/07/updating-openssh-on-mac-os-x-10-10-yosemite/">my client did not support the lastest cyphers</a>. In this case, Alice and Bob might not have the same
versions of Node.js, which statically link their own versions of OpenSSL. Thus,
one should use <code>cryto.getCiphers()</code> and <code>crypto.getHashes()</code> before assuming
the party they&rsquo;re communicating to can do the math to decrypt. We&rsquo;ll see &ldquo;cypher
suites&rdquo; come up again in TLS handshakes. The NSA
<a href="http://en.wikipedia.org/wiki/NSA_Suite_B_Cryptography">publishes a list of endorsed cryptographic components</a>,
for what it&rsquo;s worth.  There are also neat tricks we can do to prevent the
message from being decrypted at a later time should the private key be
compromised and encrytped message recorded, called Perfect Forward Secrecy.</p>

<p>Let&rsquo;s take a look now at how a browser does a TLS handshake.  Here&rsquo;s a
capture from Wireshark of me navigating to <a href="https://google.com.">https://google.com.</a> First we have a
TLSv1.2 Client Hello to start the handshake.  Here we can see a list of the
cypher suites.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/tls_1_client_hello.png"></p>

<p>Next is the response from the server, a TLSv1.2 Server Hello.  Here you can see
the server has picked a cypher to use.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/tls_2_server_hello.png"></p>

<p>The server then sends its certificate, which contains a copy of its public key.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/tls_3_server_cert.png"></p>

<p>Now that we&rsquo;ve agreed on a cypher suite, the client now sends its public key.
The server sets up a session, that way it may abbreviate the handshake in the
future. Finally, the client may now start making requests to the server with
encrypted application data.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/tls_4_key_exchange.png"></p>

<p>For more information on TLS handshakes, you should read
<a href="https://www.igvita.com/">Ilya Grigorik&rsquo;s</a>
High Performance Browser Networking book chapter
<a href="http://chimera.labs.oreilly.com/books/1230000000545/ch04.html#TLS_HANDSHAKE">TLS Handshake</a>,
<a href="https://wiki.mozilla.org/Security/Server_Side_TLS#DHE_handshake_and_dhparam">Mozilla OpSec&rsquo;s fantastic wiki</a>,
and
<a href="http://security.stackexchange.com/questions/20803/how-does-ssl-tls-work/20833">this exellent Stack Exchange post</a>.
As you might imagine, all of these back and forth trips made during the TLS
handshake add latency overhead when compared to unencrypted HTTP requests.</p>

<p>I hope this post helped you understand how we can use cryptography to exchange
secret information through public channels.  This isn&rsquo;t enough information to
implement a perfectly secure system; end to end security means one single
mistake can compromise the entire system.  Peer review and open source,
<a href="https://danielmiessler.com/writing/cryptography_opensource/">battle tested</a>
implementations
<a href="http://dodcio.defense.gov/OpenSourceSoftwareFAQ.aspx#Q%3a_Doesn.27t_hiding_source_code_automatically_make_software_more_secure.3F">go a long way</a>.</p>

<blockquote><p>A cryptosystem should be secure even if everything about the system, except the key, is public knowledge.</p><footer><strong>Kerckhoffs&#8217;s principle</strong></footer></blockquote>


<p>I wanted to write this post because I believe abstinence-only crypto education
isn&rsquo;t working and I cant stand when anyone acts like part of a cabal from their
ivory tower to those trying to learn new things.
Someone will surely cite
<a href="http://matasano.com/articles/javascript-cryptography/">Javascript Cryptography Considered Harmful</a>,
which while valid, misses my point of simply trying to show people more concrete
basics with code examples.
The first crypto system you implement will have its holes, but you
can&rsquo;t go from ignorance of crypto to perfect knowledge without implementing a
few imperfect systems.  Don&rsquo;t be afraid to, just don&rsquo;t start with trying to protect
high value data.  Crypto is dangerous, because it can be difficult to
impossible to tell when your system fails.
<a href="https://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">Assembly</a>
is also akin to juggling knives, but at least
you&rsquo;ll usually segfault if you mess up and program execution will halt.</p>

<p>With upcoming APIs like
<a href="http://www.w3.org/TR/service-workers/#security-considerations">Service Workers requiring TLS</a>,
protocols like <a href="http://http2.github.io/faq/#does-http2-require-encryption">HTTP2</a>,
pushes for all <a href="http://blog.codinghorror.com/should-all-web-traffic-be-encrypted/">web traffic to be encrypted</a>,
and <a href="https://nickdesaulniers.github.io/blog/2013/07/03/why-ill-be-marching-this-4th/">shitty things governments</a>,
<a href="http://www.theguardian.com/technology/2015/jan/16/david-cameron-encryption-lavabit-ladar-levison">politicians</a>,
and <a href="https://www.youtube.com/watch?v=fpbOEoRrHyU">ISPs</a> do,
web developers are going to have to start boning up on their crypto knowledge.</p>

<p>What are your recommendations for correctly learning crypto?  Leave me some
thoughts in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing my first technical book chapter]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/01/25/writing-my-first-book-chapter/"/>
    <updated>2015-01-25T20:50:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/01/25/writing-my-first-book-chapter</id>
    <content type="html"><![CDATA[<p>It&rsquo;s a feeling of immense satisfaction when we complete a major achievement.
Being able to say &ldquo;it&rsquo;s done&rdquo; is such a great stress relief.  Recently, I
completed work on my first publication, a chapter about Emscripten for the
upcoming book
<a href="http://www.crcpress.com/product/isbn/9781498716079">WebGL Insights</a>
to be published by CRC Press in time for
<a href="http://s2015.siggraph.org/">SIGGRAPH 2015</a>.</p>

<p>One of the life goals I&rsquo;ve had for a while is writing a book.  A romantic idea
it seems to have your ideas transcribed to a medium that will outlast your
bones.  It&rsquo;s enamoring to hold books from long dead authors, and see that their
ideas are still valid and powerful.  Being able to write a book, in my eyes,
provides some form of life after death.  Though, one could imagine ancestors
reading blog posts from long dead relatives via utilities like the
<a href="https://web.archive.org/web/20141218200253/http://nickdesaulniers.github.io/">Internet Archive&rsquo;s WayBack Machine</a>.</p>

<p>Writing about highly technical content places an upper limit on the usefulness
of the content, and shows as &ldquo;dated&rdquo; quickly.  A book I recently ordered was
<a href="http://shop.oreilly.com/product/0636920033707.do">Scott Meyers&#8217; Effective Modern C++</a>.
This title strikes me, because what
exactly do we consider <em>modern</em> or <em>contemporary</em>?  Those adjectives only make
sense in a time limited context.  When C++ undergoes another revolution,
Scott&rsquo;s book may become irrelevant, at which point the adjective <em>modern</em>
becomes incorrect.  Not that I think Scott&rsquo;s book or my own is time-limited in
usefulness; more that technical books&#8217; duration of usefulness is significantly
less than philosophical works like <em>1984</em> or <em>Brave New World</em>.  Almost like having
a record in a sport is a feather in one&rsquo;s cap, until the next best thing comes
along and you&rsquo;re forgotten to time.</p>

<p>Somewhat short of my goal of writing an entire book, I only wrote a single
chapter for a book.  It&rsquo;s interesting to see that a lot of graphics programming
books seem to follow the format of one author per chapter or at least multiple
authors.  Such book series as <em>GPU Gems</em>, <em>Shader X</em>, and <em>GPU Pro</em> follow this
pattern, which is interesting.  After seeing how much work goes into one
chapter, I think I&rsquo;m content with not writing an entire book, though I may
revisit that decision later in life.</p>

<p>How did this all get started?  I had followed Graham Sellers on Twitter and saw
<a href="http://octopress.org/2015/01/15/octopress-3.0-is-coming/">a tweet from him</a>
about a call to authors for WebGL Insights.  Explicitly in the linked to page
under the call for authors was interest in proposals about Emscripten and
asm.js.</p>

<p><a href="https://twitter.com/grahamsellers/status/504974663848456193">Tweet</a></p>

<p>At the time, I was headlong into a project helping Disney port Where&rsquo;s My Water
from C++ to JavaScript using Emscripten.  I was intimately familiar with
Emscripten, having been trained by one of its most prolific contributors,
<a href="http://clb.demon.fi/">Jukka Jylänki</a>.
Also, Emscripten&rsquo;s creator,
<a href="http://mozakai.blogspot.com/">Alon Zakai</a>, sat on the other side
of the office from me, so I was constantly pestering him about how to do
different things with Emscripten.  The #emscripten irc channel on
irc.mozilla.org is very active, but there&rsquo;s no substitute for being able to
have a second pair of eyes look over your shoulder when something is going
wrong.</p>

<p>Knowing Emscripten&rsquo;s strengths and limitations, seeing interest in the subject
I knew a bit about (but wouldn&rsquo;t consider myself an expert in), and having the
goal of writing something to be published in book form, this was my opportunity
to seize.</p>

<p>I wrote up a quick proposal with a few figures about why Emscripten was
important and how it worked, and sent it off with fingers crossed.  Initially,
I was overjoyed to learn when my proposal was accepted, but then there was a
slow realization that I had a lot of work to do.  The editor,
<a href="http://www.seas.upenn.edu/~pcozzi/">Patrick Cozzi</a>, set up
<a href="https://github.com/WebGLInsights/WebGLInsights-1">a GitHub repo</a>
for our additional code and figures, a mailing
list, and sent us a chapter template document detailing the process.  We had 6
weeks to write the rough draft, then 6 weeks to work with reviewers to get the
chapter done.  The chapter was written as a Google Doc, so that we could have
explicit control over who we shared the document with, and what kinds of
editing power they had over the document.  I think this approach worked well.</p>

<p>I had most of the content written by week 2.  This was surprising to me,
because I&rsquo;m a heavy procrastinator.  The only issue was that the number of
pages I wrote was double the allowed amount; way over page count.  I was
worried about the amount of content, but told myself to try not to be attached
to the content, just as you shouldn&rsquo;t stay attached with your code.</p>

<p>I took the additional 4 weeks I had left to finish the rough draft to invite
some of my friends and coworkers to provide feedback.  It&rsquo;s useful to have a
short list of people who have ever offered to help in this regard or owe you
one.  You&rsquo;ll also want a diverse team of reviewers that are either close to the
subject matter, or approaching it as new information.  This allows you to stay
technically correct, while not presuming your readers know everything that you
do.</p>

<p>The strategy worked out well; some of the content I had initially written about
how JavaScript VMs and JITs speculate types was straight up wrong.  While it
played nicely into the narrative I was weaving, someone more well versed in
JavaScript virtual machines would be able to call BS on my work.  The reviewers
who weren&rsquo;t as close to subject matter were able to point out when logical
progressions did not follow.</p>

<p>Fear of being publicly corrected prevents a lot of people from blogging or
contributing to open source.  It&rsquo;s important to not stay attached to your work,
especially when you need to make cuts.  When push came to shove, I did have
difficulty removing sections.</p>

<p>Lets say you have three sequential sections: A, B, &amp; C.  If section A and
section B both set up section C, and someone tells you section B has to go, it
can be difficult to cut section B because as the author you may think it&rsquo;s
really important to include B for the lead into C.  My recommendation is sum up
the most important idea from section B and add it to the end of section A.</p>

<p>For the last six weeks, the editor, some invited third parties, and other
authors reviewed my chapter.  It was great that others even followed along and
pointed out when I was making assumptions based on specific compiler or
browser.
<a href="http://erich.realtimerendering.com/">Eric Haines</a> even reviewed my chapter!
That was definitely a highlight for me.</p>

<p>We used a Google Sheet to keep track of the state of reviews.  Reviewers were
able to comment on sections of the chapter.  What was nice was that you were
able to keep using the comment as a thread, responding directly to a
criticism.  What didn&rsquo;t work so well was then once you edited that line, the
comment and thus the thread was lost.</p>

<p>Once everything was done, we zipped up the assets to be used as figures,
submitted bios, and wrote a tips and tricks section.  Now, it&rsquo;s just a long
waiting game until the book is published.</p>

<p>As far as dealing with the publisher, I didn&rsquo;t have much interaction.  Since
the book was assembled by a dedicated editor, Patrick did most of the leg work.
I only asked that what royalties I would receive be donated to Mozilla, which
the publisher said would be too small (est $250) to be worth the paperwork.  It
would be against my advice if you were thinking of writing a technical book for
the sole reason of monetary benefit.  I&rsquo;m excited to be receiving a hard cover
copy of the book when it&rsquo;s published.  I&rsquo;ll also have to see if I can find my
way to SIGGRAPH this year; I&rsquo;d love to meet my fellow authors in person and
potential readers.  Just seeing the list of authors was really a who&rsquo;s-who of
folks doing cool WebGL stuff.</p>

<p>If you&rsquo;re interested in learning more about working with Emscripten, asm.js,
and WebGL, I sugguest you pick up a copy of WebGL Insights in August when it&rsquo;s
published.  A big thank you to my reviewers: Eric Haines, Havi Hoffman,
Jukka Jylänki, Chris Mills, Traian Stanev, Luke Wagner, and Alon Zakai.</p>

<p>So that was a little bit about my first experience with authorship.  I&rsquo;d be
happy to follow up with any further questions you might have for me.  Let me
know in the comments below, on Twitter, HN, or wherever and I&rsquo;ll probably find
it!</p>
]]></content>
  </entry>
  
</feed>
