<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Nick Desaulniers</title>
    <link>https://nickdesaulniers.github.io/categories/javascript/</link>
    <description>Recent content in javascript on Nick Desaulniers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Feb 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://nickdesaulniers.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hidden in Plain Sight - Public Key Crypto</title>
      <link>https://nickdesaulniers.github.io/blog/2015/02/22/public-key-crypto-code-example/</link>
      <pubDate>Sun, 22 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://nickdesaulniers.github.io/blog/2015/02/22/public-key-crypto-code-example/</guid>
      <description>How is it possible for us to communicate securely when there&amp;rsquo;s the possibility of a third party eavesdropping on us? How can we communicate private secrets through public channels? How do such techniques enable us to bank online and carry out other sensitive transactions on the Internet while trusting numerous relays? In this post, I hope to explain public key cryptography, with actual code examples, so that the concepts are a little more concrete.</description>
    </item>
    
    <item>
      <title>Function.prototype.bind Edge Cases</title>
      <link>https://nickdesaulniers.github.io/blog/2013/09/26/function-dot-prototype-dot-bind-edge-cases/</link>
      <pubDate>Thu, 26 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nickdesaulniers.github.io/blog/2013/09/26/function-dot-prototype-dot-bind-edge-cases/</guid>
      <description>ECMAScript 5&amp;rsquo;s Function.prototype.bind is a great tool that&amp;rsquo;s implemented in all modern browser JavaScript engines. It allows you to modify the context, this, of a function when it is evaluated in the future. Knowing what this refers to in various contexts is key to being a professional JavaScript developer; don&amp;rsquo;t show up to an interview without knowing all about it.
Here&amp;rsquo;s a common use case that developers need to watch for.</description>
    </item>
    
    <item>
      <title>Making Great Node.js Modules With Coffeescript</title>
      <link>https://nickdesaulniers.github.io/blog/2013/08/28/making-great-node-dot-js-modules-with-coffeescript/</link>
      <pubDate>Wed, 28 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nickdesaulniers.github.io/blog/2013/08/28/making-great-node-dot-js-modules-with-coffeescript/</guid>
      <description>Node.js is a great runtime for writing applications in JavaScript, the language I primarily develop in. CoffeeScript is a programming language that compiles to JavaScript. Why would we write a reusable piece of code, a module , in CoffeeScript? CoffeeScript is a very high level language and beautifully brings together my favorite aspects of JavaScript, Ruby, and Python. In this tutorial, I&amp;rsquo;ll show you how I create reusable open source modules for Node.</description>
    </item>
    
    <item>
      <title>Closures: JavaScript, Ruby, and Rust</title>
      <link>https://nickdesaulniers.github.io/blog/2013/01/14/closures-javascript/</link>
      <pubDate>Mon, 14 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nickdesaulniers.github.io/blog/2013/01/14/closures-javascript/</guid>
      <description>It&amp;rsquo;s all about closures. Understanding scope is paramount to coding. What can you access and what can&amp;rsquo;t you access. Closures allow us to access variables that otherwise might be awkward to pass into a function. Closures can help us out of tricky situations, but can confuse those from backgrounds with (typically) statically typed languages that may not support closing over variables.
Rust is an up and coming systems level programming language being developed at Mozilla.</description>
    </item>
    
  </channel>
</rss>
